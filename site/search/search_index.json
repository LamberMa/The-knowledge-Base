{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"django/07-DRF/01-Restful/","text":"DRF www.cnblogs.com/wupeiqi/articles/7805382.html RestFul Restful\u8bf4\u660e REST\u4e0e\u6280\u672f\u65e0\u5173\uff0c\u4ee3\u8868\u7684\u662f\u4e00\u79cd\u8f6f\u4ef6\u67b6\u6784\u98ce\u683c\uff0cREST\u662fRepresentational State Transfer\u7684\u7b80\u79f0\uff0c\u4e2d\u6587\u7ffb\u8bd1\u4e3a\u201c\u8868\u5f81\u72b6\u6001\u8f6c\u79fb\u201d REST\u4ece\u8d44\u6e90\u7684\u89d2\u5ea6\u7c7b\u5ba1\u89c6\u6574\u4e2a\u7f51\u7edc\uff0c\u5b83\u5c06\u5206\u5e03\u5728\u7f51\u7edc\u4e2d\u67d0\u4e2a\u8282\u70b9\u7684\u8d44\u6e90\u901a\u8fc7URL\u8fdb\u884c\u6807\u8bc6\uff0c\u5ba2\u6237\u7aef\u5e94\u7528\u901a\u8fc7URL\u6765\u83b7\u53d6\u8d44\u6e90\u7684\u8868\u5f81\uff0c\u83b7\u5f97\u8fd9\u4e9b\u8868\u5f81\u81f4\u4f7f\u8fd9\u4e9b\u5e94\u7528\u8f6c\u53d8\u72b6\u6001 \u6240\u6709\u7684\u6570\u636e\uff0c\u4e0d\u7ba1\u662f\u901a\u8fc7\u7f51\u7edc\u83b7\u53d6\u7684\u8fd8\u662f\u64cd\u4f5c\uff08\u589e\u5220\u6539\u67e5\uff09\u7684\u6570\u636e\uff0c\u90fd\u662f\u8d44\u6e90\uff0c\u5c06\u4e00\u5207\u6570\u636e\u89c6\u4e3a\u8d44\u6e90\u662fREST\u533a\u522b\u4e0e\u5176\u4ed6\u67b6\u6784\u98ce\u683c\u7684\u6700\u672c\u8d28\u5c5e\u6027 \u5bf9\u4e8eREST\u8fd9\u79cd\u9762\u5411\u8d44\u6e90\u7684\u67b6\u6784\u98ce\u683c\uff0c\u6709\u4eba\u63d0\u51fa\u4e00\u79cd\u5168\u65b0\u7684\u7ed3\u6784\u7406\u5ff5\uff0c\u5373\uff1a\u9762\u5411\u8d44\u6e90\u67b6\u6784\uff08ROA\uff1aResource Oriented Architecture\uff09 Restful\u8bbe\u8ba1\u89c4\u8303 API\u4e0e\u7528\u6237\u7684\u901a\u4fe1\u534f\u8bae\uff0c\u603b\u662f\u4f7f\u7528 HTTPs\u534f\u8bae \u3002\uff08\u63a8\u8350\u4f7f\u7528https\uff09 \u57df\u540d https://api.example.com\uff1a\u5c3d\u91cf\u5c06API\u90e8\u7f72\u5728\u4e13\u7528\u57df\u540d\uff08\u4f1a\u5b58\u5728\u8de8\u57df\u95ee\u9898\uff0c\u9700\u8981\u81ea\u5df1\u89e3\u51b3\uff09 https://example.org/api/\uff1a\u5c3d\u91cf\u4f7f\u7528\u8fd9\u79cd\uff0c\u8fd9\u6837\u7684API\u5f88\u7b80\u5355 \u7248\u672c\uff1a\u53ef\u80fd\u5b58\u5728\u591a\u4e2a\u7248\u672c\u5171\u5b58\u7684\u60c5\u51b5\uff0c\u7248\u672c\u4e4b\u95f4\u53ef\u80fd\u4e5f\u9700\u8981\u8fc7\u6e21\uff0c\u56e0\u6b64url\u540e\u9762\u4e00\u822c\u8fd8\u4f1a\u5e26\u4e00\u4e2a\u7248\u672c URL\uff0c\u5982\uff1ahttps://api.example.com/v1/ \u4e00\u822c\u7248\u672c\u53f7\u653e\u5728url \u7248\u672c\u597d\u4e5f\u53ef\u4ee5\u52a0\u5230\u8bf7\u6c42\u5934 \u8de8\u57df\u65f6\uff0c\u5f15\u53d1\u53d1\u9001\u591a\u6b21\u8bf7\u6c42 \u8def\u5f84\uff0c\u89c6\u7f51\u7edc\u4e0a\u4efb\u4f55\u4e1c\u897f\u90fd\u662f\u8d44\u6e90\uff08\u9762\u5411\u8d44\u6e90\u7f16\u7a0b\uff09\uff0c\u5747\u4f7f\u7528\u540d\u8bcd\u8868\u793a\uff08\u53ef\u590d\u6570\uff09\uff0c\u6bd4\u5982\u8ba2\u5355order\uff0c\u800c\u4e0d\u662fget_order\uff0c\u6216\u8005delete_order\u8fd9\u6837\u7684url\u3002 https://api.example.com/v1/zoos https://api.example.com/v1/animals https://api.example.com/v1/employees method GET \uff1a\u4ece\u670d\u52a1\u5668\u53d6\u51fa\u8d44\u6e90\uff08\u4e00\u9879\u6216\u591a\u9879\uff09 POST \uff1a\u5728\u670d\u52a1\u5668\u65b0\u5efa\u4e00\u4e2a\u8d44\u6e90 PUT \uff1a\u5728\u670d\u52a1\u5668\u66f4\u65b0\u8d44\u6e90\uff08\u5ba2\u6237\u7aef\u63d0\u4f9b\u6539\u53d8\u540e\u7684\u5b8c\u6574\u8d44\u6e90\uff0c\u5373\u5168\u90e8\u66f4\u65b0\uff09 PATCH \uff1a\u5728\u670d\u52a1\u5668\u66f4\u65b0\u8d44\u6e90\uff08\u5ba2\u6237\u7aef\u63d0\u4f9b\u6539\u53d8\u7684\u5c5e\u6027\uff0c\u5373\u5c40\u90e8\u66f4\u65b0\uff09 DELETE \uff1a\u4ece\u670d\u52a1\u5668\u5220\u9664\u8d44\u6e90 \u8fc7\u6ee4\uff0c\u901a\u8fc7\u5728url\u4e0a\u4f20\u53c2\u7684\u5f62\u5f0f\u4f20\u9012\u641c\u7d22\u6761\u4ef6 https://api.example.com/v1/zoos?limit=10\uff1a\u6307\u5b9a\u8fd4\u56de\u8bb0\u5f55\u7684\u6570\u91cf https://api.example.com/v1/zoos?offset=10\uff1a\u6307\u5b9a\u8fd4\u56de\u8bb0\u5f55\u7684\u5f00\u59cb\u4f4d\u7f6e https://api.example.com/v1/zoos?page=2 per_page=100\uff1a\u6307\u5b9a\u7b2c\u51e0\u9875\uff0c\u4ee5\u53ca\u6bcf\u9875\u7684\u8bb0\u5f55\u6570 https://api.example.com/v1/zoos?sortby=name order=asc\uff1a\u6307\u5b9a\u8fd4\u56de\u7ed3\u679c\u6309\u7167\u54ea\u4e2a\u5c5e\u6027\u6392\u5e8f\uff0c\u4ee5\u53ca\u6392\u5e8f\u987a\u5e8f https://api.example.com/v1/zoos?animal_type_id=1\uff1a\u6307\u5b9a\u7b5b\u9009\u6761\u4ef6 \u72b6\u6001\u7801\uff1a\u6839\u636e\u72b6\u6001\u7801\u7ed9\u7528\u6237\u505a\u63d0\u793a\uff0c\u4f46\u662f\u4ec5\u4ec5\u7528\u72b6\u6001\u7801\u662f\u4e0d\u591f\u7684\uff0c\u56e0\u6b64\u5927\u591a\u4f7f\u7528code+\u72b6\u6001\u7801\u7ed3\u5408\u4f7f\u7528\u3002status code\u53ef\u4ee5\u5728HTTPResponse\u4e2d\u4ee5\u53c2\u6570\u5f62\u5f0f\u8fd4\u56de\u3002\u73b0\u5728\u4e3b\u8981\u8fd8\u662f\u4ee5code\u4e3a\u4e3b\u3002\u6709\u7684\u5bf9\u72b6\u6001\u7801\u6709\u9700\u6c42\uff0c\u6709\u7684\u6ca1\u6709\u9700\u6c42\uff0c\u5728\u5199\u63a5\u53e3\u524d\u8981\u95ee\u6e05\u695a\u3002 ```html 200 OK - [GET]\uff1a\u670d\u52a1\u5668\u6210\u529f\u8fd4\u56de\u7528\u6237\u8bf7\u6c42\u7684\u6570\u636e\uff0c\u8be5\u64cd\u4f5c\u662f\u5e42\u7b49\u7684\uff08Idempotent\uff09\u3002 201 CREATED - [POST/PUT/PATCH]\uff1a\u7528\u6237\u65b0\u5efa\u6216\u4fee\u6539\u6570\u636e\u6210\u529f\u3002 202 Accepted - [ ]\uff1a\u8868\u793a\u4e00\u4e2a\u8bf7\u6c42\u5df2\u7ecf\u8fdb\u5165\u540e\u53f0\u6392\u961f\uff08\u5f02\u6b65\u4efb\u52a1\uff09 204 NO CONTENT - [DELETE]\uff1a\u7528\u6237\u5220\u9664\u6570\u636e\u6210\u529f\u3002 400 INVALID REQUEST - [POST/PUT/PATCH]\uff1a\u7528\u6237\u53d1\u51fa\u7684\u8bf7\u6c42\u6709\u9519\u8bef\uff0c\u670d\u52a1\u5668\u6ca1\u6709\u8fdb\u884c\u65b0\u5efa\u6216\u4fee\u6539\u6570\u636e\u7684\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u662f\u5e42\u7b49\u7684\u3002 401 Unauthorized - [ ]\uff1a\u8868\u793a\u7528\u6237\u6ca1\u6709\u6743\u9650\uff08\u4ee4\u724c\u3001\u7528\u6237\u540d\u3001\u5bc6\u7801\u9519\u8bef\uff09\u3002 403 Forbidden - [ ] \u8868\u793a\u7528\u6237\u5f97\u5230\u6388\u6743\uff08\u4e0e401\u9519\u8bef\u76f8\u5bf9\uff09\uff0c\u4f46\u662f\u8bbf\u95ee\u662f\u88ab\u7981\u6b62\u7684\u3002 404 NOT FOUND - [ ]\uff1a\u7528\u6237\u53d1\u51fa\u7684\u8bf7\u6c42\u9488\u5bf9\u7684\u662f\u4e0d\u5b58\u5728\u7684\u8bb0\u5f55\uff0c\u670d\u52a1\u5668\u6ca1\u6709\u8fdb\u884c\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u662f\u5e42\u7b49\u7684\u3002 406 Not Acceptable - [GET]\uff1a\u7528\u6237\u8bf7\u6c42\u7684\u683c\u5f0f\u4e0d\u53ef\u5f97\uff08\u6bd4\u5982\u7528\u6237\u8bf7\u6c42JSON\u683c\u5f0f\uff0c\u4f46\u662f\u53ea\u6709XML\u683c\u5f0f\uff09\u3002 410 Gone -[GET]\uff1a\u7528\u6237\u8bf7\u6c42\u7684\u8d44\u6e90\u88ab\u6c38\u4e45\u5220\u9664\uff0c\u4e14\u4e0d\u4f1a\u518d\u5f97\u5230\u7684\u3002 422 Unprocesable entity - [POST/PUT/PATCH] \u5f53\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u53d1\u751f\u4e00\u4e2a\u9a8c\u8bc1\u9519\u8bef\u3002 500 INTERNAL SERVER ERROR - [*]\uff1a\u670d\u52a1\u5668\u53d1\u751f\u9519\u8bef\uff0c\u7528\u6237\u5c06\u65e0\u6cd5\u5224\u65ad\u53d1\u51fa\u7684\u8bf7\u6c42\u662f\u5426\u6210\u529f\u3002 \u66f4\u591a\u770b\u8fd9\u91cc\uff1ahttp://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html ``` \u9519\u8bef\u5904\u7406\uff0c\u72b6\u6001\u7801\u662f4xx\u65f6\uff0c\u5e94\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff0c\u63a8\u8350\u7528error\u5f53\u505akey\u3002 json { error: \"Invalid API key\" } \u8fd4\u56de\u7ed3\u679c\uff0c\u9488\u5bf9\u4e0d\u540c\u64cd\u4f5c\uff0c\u670d\u52a1\u5668\u5411\u7528\u6237\u8fd4\u56de\u7684\u7ed3\u679c\u5e94\u8be5\u7b26\u5408\u4ee5\u4e0b\u89c4\u8303\u3002 GET /collection\uff1a\u8fd4\u56de\u8d44\u6e90\u5bf9\u8c61\u7684\u5217\u8868\uff08\u6570\u7ec4\uff09 GET /collection/resource\uff1a\u8fd4\u56de\u5355\u4e2a\u8d44\u6e90\u5bf9\u8c61 POST /collection\uff1a\u8fd4\u56de\u65b0\u751f\u6210\u7684\u8d44\u6e90\u5bf9\u8c61 PUT /collection/resource\uff1a\u8fd4\u56de\u5b8c\u6574\u7684\u8d44\u6e90\u5bf9\u8c61 PATCH /collection/resource\uff1a\u8fd4\u56de\u5b8c\u6574\u7684\u8d44\u6e90\u5bf9\u8c61 DELETE /collection/resource\uff1a\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6587\u6863 Hypermedia API\uff0cRESTful API\u6700\u597d\u505a\u5230Hypermedia\uff0c\u5373\u8fd4\u56de\u7ed3\u679c\u4e2d\u63d0\u4f9b\u94fe\u63a5\uff0c\u8fde\u5411\u5176\u4ed6API\u65b9\u6cd5\uff0c\u4f7f\u5f97\u7528\u6237\u4e0d\u67e5\u6587\u6863\uff0c\u4e5f\u77e5\u9053\u4e0b\u4e00\u6b65\u5e94\u8be5\u505a\u4ec0\u4e48\u3002\uff08\u5176\u5b9e\u5c31\u662f\u4e3a\u4e86\u8ba9\u4f60\u7701\u4e8b\uff0c\u518d\u7ed9\u4f60\u8fd4\u56de\u4e00\u4e2aurl\uff09 { \"link\": { \"rel\": \"collection https://www.example.com/zoos\", \"href\": \"https://api.example.com/zoos\", \"title\": \"List of zoos\", \"type\": \"application/vnd.yourformat+json\" } } \u8c08\u8c08\u4f60\u5bf9Restful\u89c4\u8303\u7684\u8ba4\u8bc6 \u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u89c4\u8303\uff0c\u8ba9\u540e\u53f0\u66f4\u5bb9\u6613\u5904\u7406\uff0c\u8ba9\u524d\u7aef\u66f4\u5bb9\u6613\u8bb0\u4f4f\u8fd9\u4e9burl\uff0c\u5728url\u4e0a\u80fd\u4f53\u73b0\u66f4\u591a\u7684\u64cd\u4f5c\u3002 restful\u6709\u4e9b\u9002\u7528\u9879\u76ee\uff0c\u6709\u4e9b\u4e5f\u4e0d\u9002\u7528\uff0c\u4e0d\u4e00\u5b9a\u8981\u5b8c\u5168\u7b26\u5408\u8fd9\u4e2a\u6807\u51c6\uff0c\u6700\u91cd\u8981\u7684\u8fd8\u662f\u5951\u5408\u9879\u76ee\u3002 \u534f\u540c\u5f00\u53d1\u7684\u65f6\u5019\u5171\u540c\u9075\u5faa\u8fd9\u4e2a\u89c4\u8303\uff0c\u8ba9\u64cd\u4f5c\u66f4\u52a0\u7edf\u4e00\u3002 \u63a8\u8350\u4f7f\u7528CBV\u7684\u65b9\u5f0f \u5c01\u88c5\u4f53\u73b0\u5728\u4e24\u5927\u65b9\u9762\uff1a \u5bf9\u65b9\u6cd5\u5c01\u88c5\u5230\u7c7b\u4e2d\uff0c\u6bd4\u5982\u64cd\u4f5c\u6587\u4ef6\u7684\u589e\u5220\u6539\u67e5\uff0c\u548c\u64cd\u4f5c\u6570\u636e\u5e93\u7684\u589e\u5220\u6539\u67e5\u3002 \u5c06\u6570\u636e\u5c01\u88c5\u5230\u5bf9\u8c61\u4e2d\uff0c\u4f53\u73b0\u5728\u6bd4\u5982\u5b66\u751f\u7c7b\uff0c\u5b66\u751f\u7684\u4fe1\u606f\u90fd\u5c01\u88c5\u5728\u5b66\u751f\u7c7b\u7684\u5bf9\u8c61\u91cc\u9762\u3002 \u4e2d\u95f4\u4ef6\uff1a\u7528\u6237\u767b\u5f55\u8ba4\u8bc1\uff0crbac\uff0ccsrftoken \u4f60\u7528\u8fc7\u4ec0\u4e48\u4e2d\u95f4\u4ef6\uff1fCSRFtoken\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1fcsrf\u5199\u5728\u4e86process_view\u91cc\u9762\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5199\u5728process_request\u91cc\u9762\u5462\uff1f\u867d\u7136\u90fd\u662f\u8bf7\u6c42\u4e4b\u524d\u505a\u7684\u5224\u65ad\uff0c\u4f46\u662f\u6211\u4eec\u77e5\u9053\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u88c5\u9970\u5668\u514d\u9664csrf\u7684\u9a8c\u8bc1\uff0c\u4e5f\u5c31\u662f\u9a8c\u8bc1\u8fc7\u7a0b\u4e2d\u8fd8\u8981\u9a8c\u8bc1\u8fd9\u4e2a\u51fd\u6570\u6709\u6ca1\u6709\u52a0\u8fd9\u4e2a\u88c5\u9970\u5668\u3002\u56e0\u4e3a\u5728process_request\u6267\u884c\u5b8c\u4e86\u4ee5\u540e\u624d\u6267\u884c\u7684\u8def\u7531\u7684\u5339\u914d\uff0c\u624d\u627e\u5230\u7684\u90a3\u4e2a\u51fd\u6570\u3002process_view\u65b9\u6cd5\u7528\u6765\u68c0\u67e5\u89c6\u56fe\u662f\u5426\u88ab\u88c5\u9970\u5668\u88c5\u9970\uff0c\u88c5\u9970\u4e86\u5c31\u53ef\u514d\u9664\u8ba4\u8bc1\u3002\u53bb\u8bf7\u6c42\u4f53\u6216\u8005cookie\u4e2d\u83b7\u53d6token\uff0c\u7136\u540e\u6839\u636e\u83b7\u53d6\u7684token\u505a\u6821\u9a8c\u3002 \u5f00\u53d1\u6a21\u5f0f \u666e\u901a\u6a21\u5f0f\uff1a\u524d\u540e\u7aef\u653e\u5230\u4e00\u8d77\u5199 \u524d\u540e\u7aef\u5206\u79bb\u7684\u6a21\u5f0f","title":"DRF"},{"location":"django/07-DRF/01-Restful/#drf","text":"www.cnblogs.com/wupeiqi/articles/7805382.html","title":"DRF"},{"location":"django/07-DRF/01-Restful/#restful","text":"","title":"RestFul"},{"location":"django/07-DRF/01-Restful/#restful_1","text":"REST\u4e0e\u6280\u672f\u65e0\u5173\uff0c\u4ee3\u8868\u7684\u662f\u4e00\u79cd\u8f6f\u4ef6\u67b6\u6784\u98ce\u683c\uff0cREST\u662fRepresentational State Transfer\u7684\u7b80\u79f0\uff0c\u4e2d\u6587\u7ffb\u8bd1\u4e3a\u201c\u8868\u5f81\u72b6\u6001\u8f6c\u79fb\u201d REST\u4ece\u8d44\u6e90\u7684\u89d2\u5ea6\u7c7b\u5ba1\u89c6\u6574\u4e2a\u7f51\u7edc\uff0c\u5b83\u5c06\u5206\u5e03\u5728\u7f51\u7edc\u4e2d\u67d0\u4e2a\u8282\u70b9\u7684\u8d44\u6e90\u901a\u8fc7URL\u8fdb\u884c\u6807\u8bc6\uff0c\u5ba2\u6237\u7aef\u5e94\u7528\u901a\u8fc7URL\u6765\u83b7\u53d6\u8d44\u6e90\u7684\u8868\u5f81\uff0c\u83b7\u5f97\u8fd9\u4e9b\u8868\u5f81\u81f4\u4f7f\u8fd9\u4e9b\u5e94\u7528\u8f6c\u53d8\u72b6\u6001 \u6240\u6709\u7684\u6570\u636e\uff0c\u4e0d\u7ba1\u662f\u901a\u8fc7\u7f51\u7edc\u83b7\u53d6\u7684\u8fd8\u662f\u64cd\u4f5c\uff08\u589e\u5220\u6539\u67e5\uff09\u7684\u6570\u636e\uff0c\u90fd\u662f\u8d44\u6e90\uff0c\u5c06\u4e00\u5207\u6570\u636e\u89c6\u4e3a\u8d44\u6e90\u662fREST\u533a\u522b\u4e0e\u5176\u4ed6\u67b6\u6784\u98ce\u683c\u7684\u6700\u672c\u8d28\u5c5e\u6027 \u5bf9\u4e8eREST\u8fd9\u79cd\u9762\u5411\u8d44\u6e90\u7684\u67b6\u6784\u98ce\u683c\uff0c\u6709\u4eba\u63d0\u51fa\u4e00\u79cd\u5168\u65b0\u7684\u7ed3\u6784\u7406\u5ff5\uff0c\u5373\uff1a\u9762\u5411\u8d44\u6e90\u67b6\u6784\uff08ROA\uff1aResource Oriented Architecture\uff09","title":"Restful\u8bf4\u660e"},{"location":"django/07-DRF/01-Restful/#restful_2","text":"API\u4e0e\u7528\u6237\u7684\u901a\u4fe1\u534f\u8bae\uff0c\u603b\u662f\u4f7f\u7528 HTTPs\u534f\u8bae \u3002\uff08\u63a8\u8350\u4f7f\u7528https\uff09 \u57df\u540d https://api.example.com\uff1a\u5c3d\u91cf\u5c06API\u90e8\u7f72\u5728\u4e13\u7528\u57df\u540d\uff08\u4f1a\u5b58\u5728\u8de8\u57df\u95ee\u9898\uff0c\u9700\u8981\u81ea\u5df1\u89e3\u51b3\uff09 https://example.org/api/\uff1a\u5c3d\u91cf\u4f7f\u7528\u8fd9\u79cd\uff0c\u8fd9\u6837\u7684API\u5f88\u7b80\u5355 \u7248\u672c\uff1a\u53ef\u80fd\u5b58\u5728\u591a\u4e2a\u7248\u672c\u5171\u5b58\u7684\u60c5\u51b5\uff0c\u7248\u672c\u4e4b\u95f4\u53ef\u80fd\u4e5f\u9700\u8981\u8fc7\u6e21\uff0c\u56e0\u6b64url\u540e\u9762\u4e00\u822c\u8fd8\u4f1a\u5e26\u4e00\u4e2a\u7248\u672c URL\uff0c\u5982\uff1ahttps://api.example.com/v1/ \u4e00\u822c\u7248\u672c\u53f7\u653e\u5728url \u7248\u672c\u597d\u4e5f\u53ef\u4ee5\u52a0\u5230\u8bf7\u6c42\u5934 \u8de8\u57df\u65f6\uff0c\u5f15\u53d1\u53d1\u9001\u591a\u6b21\u8bf7\u6c42 \u8def\u5f84\uff0c\u89c6\u7f51\u7edc\u4e0a\u4efb\u4f55\u4e1c\u897f\u90fd\u662f\u8d44\u6e90\uff08\u9762\u5411\u8d44\u6e90\u7f16\u7a0b\uff09\uff0c\u5747\u4f7f\u7528\u540d\u8bcd\u8868\u793a\uff08\u53ef\u590d\u6570\uff09\uff0c\u6bd4\u5982\u8ba2\u5355order\uff0c\u800c\u4e0d\u662fget_order\uff0c\u6216\u8005delete_order\u8fd9\u6837\u7684url\u3002 https://api.example.com/v1/zoos https://api.example.com/v1/animals https://api.example.com/v1/employees method GET \uff1a\u4ece\u670d\u52a1\u5668\u53d6\u51fa\u8d44\u6e90\uff08\u4e00\u9879\u6216\u591a\u9879\uff09 POST \uff1a\u5728\u670d\u52a1\u5668\u65b0\u5efa\u4e00\u4e2a\u8d44\u6e90 PUT \uff1a\u5728\u670d\u52a1\u5668\u66f4\u65b0\u8d44\u6e90\uff08\u5ba2\u6237\u7aef\u63d0\u4f9b\u6539\u53d8\u540e\u7684\u5b8c\u6574\u8d44\u6e90\uff0c\u5373\u5168\u90e8\u66f4\u65b0\uff09 PATCH \uff1a\u5728\u670d\u52a1\u5668\u66f4\u65b0\u8d44\u6e90\uff08\u5ba2\u6237\u7aef\u63d0\u4f9b\u6539\u53d8\u7684\u5c5e\u6027\uff0c\u5373\u5c40\u90e8\u66f4\u65b0\uff09 DELETE \uff1a\u4ece\u670d\u52a1\u5668\u5220\u9664\u8d44\u6e90 \u8fc7\u6ee4\uff0c\u901a\u8fc7\u5728url\u4e0a\u4f20\u53c2\u7684\u5f62\u5f0f\u4f20\u9012\u641c\u7d22\u6761\u4ef6 https://api.example.com/v1/zoos?limit=10\uff1a\u6307\u5b9a\u8fd4\u56de\u8bb0\u5f55\u7684\u6570\u91cf https://api.example.com/v1/zoos?offset=10\uff1a\u6307\u5b9a\u8fd4\u56de\u8bb0\u5f55\u7684\u5f00\u59cb\u4f4d\u7f6e https://api.example.com/v1/zoos?page=2 per_page=100\uff1a\u6307\u5b9a\u7b2c\u51e0\u9875\uff0c\u4ee5\u53ca\u6bcf\u9875\u7684\u8bb0\u5f55\u6570 https://api.example.com/v1/zoos?sortby=name order=asc\uff1a\u6307\u5b9a\u8fd4\u56de\u7ed3\u679c\u6309\u7167\u54ea\u4e2a\u5c5e\u6027\u6392\u5e8f\uff0c\u4ee5\u53ca\u6392\u5e8f\u987a\u5e8f https://api.example.com/v1/zoos?animal_type_id=1\uff1a\u6307\u5b9a\u7b5b\u9009\u6761\u4ef6 \u72b6\u6001\u7801\uff1a\u6839\u636e\u72b6\u6001\u7801\u7ed9\u7528\u6237\u505a\u63d0\u793a\uff0c\u4f46\u662f\u4ec5\u4ec5\u7528\u72b6\u6001\u7801\u662f\u4e0d\u591f\u7684\uff0c\u56e0\u6b64\u5927\u591a\u4f7f\u7528code+\u72b6\u6001\u7801\u7ed3\u5408\u4f7f\u7528\u3002status code\u53ef\u4ee5\u5728HTTPResponse\u4e2d\u4ee5\u53c2\u6570\u5f62\u5f0f\u8fd4\u56de\u3002\u73b0\u5728\u4e3b\u8981\u8fd8\u662f\u4ee5code\u4e3a\u4e3b\u3002\u6709\u7684\u5bf9\u72b6\u6001\u7801\u6709\u9700\u6c42\uff0c\u6709\u7684\u6ca1\u6709\u9700\u6c42\uff0c\u5728\u5199\u63a5\u53e3\u524d\u8981\u95ee\u6e05\u695a\u3002 ```html 200 OK - [GET]\uff1a\u670d\u52a1\u5668\u6210\u529f\u8fd4\u56de\u7528\u6237\u8bf7\u6c42\u7684\u6570\u636e\uff0c\u8be5\u64cd\u4f5c\u662f\u5e42\u7b49\u7684\uff08Idempotent\uff09\u3002 201 CREATED - [POST/PUT/PATCH]\uff1a\u7528\u6237\u65b0\u5efa\u6216\u4fee\u6539\u6570\u636e\u6210\u529f\u3002 202 Accepted - [ ]\uff1a\u8868\u793a\u4e00\u4e2a\u8bf7\u6c42\u5df2\u7ecf\u8fdb\u5165\u540e\u53f0\u6392\u961f\uff08\u5f02\u6b65\u4efb\u52a1\uff09 204 NO CONTENT - [DELETE]\uff1a\u7528\u6237\u5220\u9664\u6570\u636e\u6210\u529f\u3002 400 INVALID REQUEST - [POST/PUT/PATCH]\uff1a\u7528\u6237\u53d1\u51fa\u7684\u8bf7\u6c42\u6709\u9519\u8bef\uff0c\u670d\u52a1\u5668\u6ca1\u6709\u8fdb\u884c\u65b0\u5efa\u6216\u4fee\u6539\u6570\u636e\u7684\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u662f\u5e42\u7b49\u7684\u3002 401 Unauthorized - [ ]\uff1a\u8868\u793a\u7528\u6237\u6ca1\u6709\u6743\u9650\uff08\u4ee4\u724c\u3001\u7528\u6237\u540d\u3001\u5bc6\u7801\u9519\u8bef\uff09\u3002 403 Forbidden - [ ] \u8868\u793a\u7528\u6237\u5f97\u5230\u6388\u6743\uff08\u4e0e401\u9519\u8bef\u76f8\u5bf9\uff09\uff0c\u4f46\u662f\u8bbf\u95ee\u662f\u88ab\u7981\u6b62\u7684\u3002 404 NOT FOUND - [ ]\uff1a\u7528\u6237\u53d1\u51fa\u7684\u8bf7\u6c42\u9488\u5bf9\u7684\u662f\u4e0d\u5b58\u5728\u7684\u8bb0\u5f55\uff0c\u670d\u52a1\u5668\u6ca1\u6709\u8fdb\u884c\u64cd\u4f5c\uff0c\u8be5\u64cd\u4f5c\u662f\u5e42\u7b49\u7684\u3002 406 Not Acceptable - [GET]\uff1a\u7528\u6237\u8bf7\u6c42\u7684\u683c\u5f0f\u4e0d\u53ef\u5f97\uff08\u6bd4\u5982\u7528\u6237\u8bf7\u6c42JSON\u683c\u5f0f\uff0c\u4f46\u662f\u53ea\u6709XML\u683c\u5f0f\uff09\u3002 410 Gone -[GET]\uff1a\u7528\u6237\u8bf7\u6c42\u7684\u8d44\u6e90\u88ab\u6c38\u4e45\u5220\u9664\uff0c\u4e14\u4e0d\u4f1a\u518d\u5f97\u5230\u7684\u3002 422 Unprocesable entity - [POST/PUT/PATCH] \u5f53\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u53d1\u751f\u4e00\u4e2a\u9a8c\u8bc1\u9519\u8bef\u3002 500 INTERNAL SERVER ERROR - [*]\uff1a\u670d\u52a1\u5668\u53d1\u751f\u9519\u8bef\uff0c\u7528\u6237\u5c06\u65e0\u6cd5\u5224\u65ad\u53d1\u51fa\u7684\u8bf7\u6c42\u662f\u5426\u6210\u529f\u3002 \u66f4\u591a\u770b\u8fd9\u91cc\uff1ahttp://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html ``` \u9519\u8bef\u5904\u7406\uff0c\u72b6\u6001\u7801\u662f4xx\u65f6\uff0c\u5e94\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff0c\u63a8\u8350\u7528error\u5f53\u505akey\u3002 json { error: \"Invalid API key\" } \u8fd4\u56de\u7ed3\u679c\uff0c\u9488\u5bf9\u4e0d\u540c\u64cd\u4f5c\uff0c\u670d\u52a1\u5668\u5411\u7528\u6237\u8fd4\u56de\u7684\u7ed3\u679c\u5e94\u8be5\u7b26\u5408\u4ee5\u4e0b\u89c4\u8303\u3002 GET /collection\uff1a\u8fd4\u56de\u8d44\u6e90\u5bf9\u8c61\u7684\u5217\u8868\uff08\u6570\u7ec4\uff09 GET /collection/resource\uff1a\u8fd4\u56de\u5355\u4e2a\u8d44\u6e90\u5bf9\u8c61 POST /collection\uff1a\u8fd4\u56de\u65b0\u751f\u6210\u7684\u8d44\u6e90\u5bf9\u8c61 PUT /collection/resource\uff1a\u8fd4\u56de\u5b8c\u6574\u7684\u8d44\u6e90\u5bf9\u8c61 PATCH /collection/resource\uff1a\u8fd4\u56de\u5b8c\u6574\u7684\u8d44\u6e90\u5bf9\u8c61 DELETE /collection/resource\uff1a\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6587\u6863 Hypermedia API\uff0cRESTful API\u6700\u597d\u505a\u5230Hypermedia\uff0c\u5373\u8fd4\u56de\u7ed3\u679c\u4e2d\u63d0\u4f9b\u94fe\u63a5\uff0c\u8fde\u5411\u5176\u4ed6API\u65b9\u6cd5\uff0c\u4f7f\u5f97\u7528\u6237\u4e0d\u67e5\u6587\u6863\uff0c\u4e5f\u77e5\u9053\u4e0b\u4e00\u6b65\u5e94\u8be5\u505a\u4ec0\u4e48\u3002\uff08\u5176\u5b9e\u5c31\u662f\u4e3a\u4e86\u8ba9\u4f60\u7701\u4e8b\uff0c\u518d\u7ed9\u4f60\u8fd4\u56de\u4e00\u4e2aurl\uff09 { \"link\": { \"rel\": \"collection https://www.example.com/zoos\", \"href\": \"https://api.example.com/zoos\", \"title\": \"List of zoos\", \"type\": \"application/vnd.yourformat+json\" } } \u8c08\u8c08\u4f60\u5bf9Restful\u89c4\u8303\u7684\u8ba4\u8bc6 \u672c\u8d28\u4e0a\u5c31\u662f\u4e00\u4e2a\u89c4\u8303\uff0c\u8ba9\u540e\u53f0\u66f4\u5bb9\u6613\u5904\u7406\uff0c\u8ba9\u524d\u7aef\u66f4\u5bb9\u6613\u8bb0\u4f4f\u8fd9\u4e9burl\uff0c\u5728url\u4e0a\u80fd\u4f53\u73b0\u66f4\u591a\u7684\u64cd\u4f5c\u3002 restful\u6709\u4e9b\u9002\u7528\u9879\u76ee\uff0c\u6709\u4e9b\u4e5f\u4e0d\u9002\u7528\uff0c\u4e0d\u4e00\u5b9a\u8981\u5b8c\u5168\u7b26\u5408\u8fd9\u4e2a\u6807\u51c6\uff0c\u6700\u91cd\u8981\u7684\u8fd8\u662f\u5951\u5408\u9879\u76ee\u3002 \u534f\u540c\u5f00\u53d1\u7684\u65f6\u5019\u5171\u540c\u9075\u5faa\u8fd9\u4e2a\u89c4\u8303\uff0c\u8ba9\u64cd\u4f5c\u66f4\u52a0\u7edf\u4e00\u3002 \u63a8\u8350\u4f7f\u7528CBV\u7684\u65b9\u5f0f \u5c01\u88c5\u4f53\u73b0\u5728\u4e24\u5927\u65b9\u9762\uff1a \u5bf9\u65b9\u6cd5\u5c01\u88c5\u5230\u7c7b\u4e2d\uff0c\u6bd4\u5982\u64cd\u4f5c\u6587\u4ef6\u7684\u589e\u5220\u6539\u67e5\uff0c\u548c\u64cd\u4f5c\u6570\u636e\u5e93\u7684\u589e\u5220\u6539\u67e5\u3002 \u5c06\u6570\u636e\u5c01\u88c5\u5230\u5bf9\u8c61\u4e2d\uff0c\u4f53\u73b0\u5728\u6bd4\u5982\u5b66\u751f\u7c7b\uff0c\u5b66\u751f\u7684\u4fe1\u606f\u90fd\u5c01\u88c5\u5728\u5b66\u751f\u7c7b\u7684\u5bf9\u8c61\u91cc\u9762\u3002 \u4e2d\u95f4\u4ef6\uff1a\u7528\u6237\u767b\u5f55\u8ba4\u8bc1\uff0crbac\uff0ccsrftoken \u4f60\u7528\u8fc7\u4ec0\u4e48\u4e2d\u95f4\u4ef6\uff1fCSRFtoken\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff1fcsrf\u5199\u5728\u4e86process_view\u91cc\u9762\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5199\u5728process_request\u91cc\u9762\u5462\uff1f\u867d\u7136\u90fd\u662f\u8bf7\u6c42\u4e4b\u524d\u505a\u7684\u5224\u65ad\uff0c\u4f46\u662f\u6211\u4eec\u77e5\u9053\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u88c5\u9970\u5668\u514d\u9664csrf\u7684\u9a8c\u8bc1\uff0c\u4e5f\u5c31\u662f\u9a8c\u8bc1\u8fc7\u7a0b\u4e2d\u8fd8\u8981\u9a8c\u8bc1\u8fd9\u4e2a\u51fd\u6570\u6709\u6ca1\u6709\u52a0\u8fd9\u4e2a\u88c5\u9970\u5668\u3002\u56e0\u4e3a\u5728process_request\u6267\u884c\u5b8c\u4e86\u4ee5\u540e\u624d\u6267\u884c\u7684\u8def\u7531\u7684\u5339\u914d\uff0c\u624d\u627e\u5230\u7684\u90a3\u4e2a\u51fd\u6570\u3002process_view\u65b9\u6cd5\u7528\u6765\u68c0\u67e5\u89c6\u56fe\u662f\u5426\u88ab\u88c5\u9970\u5668\u88c5\u9970\uff0c\u88c5\u9970\u4e86\u5c31\u53ef\u514d\u9664\u8ba4\u8bc1\u3002\u53bb\u8bf7\u6c42\u4f53\u6216\u8005cookie\u4e2d\u83b7\u53d6token\uff0c\u7136\u540e\u6839\u636e\u83b7\u53d6\u7684token\u505a\u6821\u9a8c\u3002 \u5f00\u53d1\u6a21\u5f0f \u666e\u901a\u6a21\u5f0f\uff1a\u524d\u540e\u7aef\u653e\u5230\u4e00\u8d77\u5199 \u524d\u540e\u7aef\u5206\u79bb\u7684\u6a21\u5f0f","title":"Restful\u8bbe\u8ba1\u89c4\u8303"},{"location":"django/07-DRF/02-DRF\u8ba4\u8bc1/","text":"Django Rest FrameWork DRF\u5b89\u88c5 # \u5b89\u88c5\u8fc7\u7a0b\u6781\u5176\u7b80\u5355 pip3 install djangorestframework DRF\u7684\u8ba4\u8bc1 \u7b80\u5355\u73af\u5883\u51c6\u5907 model class\u7b80\u5355\u70b9\uff0c\u4e00\u4e2a\u7528\u6765\u5b58\u50a8\u7528\u6237\u4fe1\u606f\u4e00\u4e2a\u7528\u6765\u5b58\u50a8token\u8ba4\u8bc1\u4fe1\u606f\u3002 from django.db import models class UserInfo(models.Model): user_type_choices = ( (1, '\u666e\u901a\u7528\u6237'), (2, 'VIP'), (3, 'SVIP'), ) user_type = models.IntegerField(choices=user_type_choices) username = models.CharField(max_length=64, unique=True) password = models.CharField(max_length=64) class UserToken(models.Model): # \u8fd8\u53ef\u4ee5\u5728\u8fd9\u91cc\u52a0token\u65f6\u95f4\uff0c\u6700\u591a\u4f7f\u7528\u6b21\u6570\uff0c\u6bd4\u5982\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2aexpire_time\u4f5c\u4e3a\u8fc7\u671f\u65f6\u95f4 # \u907f\u514d\u6bcf\u6b21\u8bbf\u95ee\u7684\u65f6\u5019\u90fd\u5237\u65b0token user = models.OneToOneField('UserInfo', on_delete=models.CASCADE) token = models.CharField(max_length=64) \u8ba4\u8bc1\u6e90\u7801\u89e3\u6790 \u4f7f\u7528drf\u7684\u65f6\u5019\u6211\u4eec\u7684\u89c6\u56fe\u903b\u8f91\u4f7f\u7528\u7684\u662fCBV\u800c\u4e0d\u662fFBV\uff0c\u8fd9\u91ccCBV\u6709\u4e00\u4e2a\u8981\u70b9\u662f\u7ee7\u627f\u7684\u4e0d\u662f\u9ed8\u8ba4\u7684django\u7684View\u800c\u662f\u8981\u7ee7\u627fDRF\u7684APIView\uff0c\u56e0\u6b64\uff0c\u9700\u8981\u5bfc\u5165\u5bf9\u5e94\u7684drf\u7684APIVIEW\u3002 \u89e3\u6790\u8ba4\u8bc1\u6d41\u7a0b\u4ece\u4e00\u4e2a\u8bf7\u6c42\u8fdb\u6765\u5f00\u59cb\u8bb2\uff0c\u6bd4\u5982\u4e0b\u9762\u7684AuthView\uff0c\u7528\u6765\u5b9e\u73b0\u8ba4\u8bc1\u7684\u4e00\u4e2aCBV\u89c6\u56fe\u903b\u8f91\u3002 from rest_framework.views import APIView class AuthView(APIView): pass \u5176\u5b9e\u8fd9\u4e2aAPIView\u4e5f\u7ee7\u627f\u81eaDjango\u7684View\uff0c\u56e0\u6b64DRF\u76f8\u5f53\u4e8e\u5728Django\u7684View\u4e0a\u53c8\u7ed9\u5c01\u88c5\u4e86\u4e00\u5c42\uff0cCBV\u4e2d\u627e\u5230\u5bf9\u5e94request.method\u89c6\u56fe\u65b9\u6cd5\u7684\u5173\u952e\u662f\u5229\u7528\u53cd\u5c04\u6765\u5b8c\u6210\u7684\uff0c\u90a3\u4e48\u9996\u5148\u8d70\u7684\u5e94\u8be5\u5c31\u662fdispatch\u65b9\u6cd5\u3002\u9ed8\u8ba4\u7684Django\u7684View\u5c31\u662f\u505a\u4e86\u4e00\u5c42\u7684\u53cd\u5c04\uff1a # Django\u81ea\u8eabView\u7684dispath\u65b9\u6cd5 def dispatch(self, request, *args, **kwargs): # Try to dispatch to the right method; if a method doesn't exist, # defer to the error handler. Also defer to the error handler if the # request method isn't on the approved list. if request.method.lower() in self.http_method_names: handler = getattr(self, request.method.lower(), self.http_method_not_allowed) else: handler = self.http_method_not_allowed return handler(request, *args, **kwargs) \u4e0d\u8fc7\u6211\u4eec\u77e5\u9053\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u81ea\u5df1\u7684CBV\u4e2d\u91cd\u5199\u8fd9\u4e2adispatch\uff0c\u5148\u8c03\u7528\u4e00\u4e0b\u7236\u7c7b\uff08View\uff09\u7684dispatch\u65b9\u6cd5\uff0c\u7136\u540e\u5728\u8c03\u7528\u4e4b\u524d\u548c\u8c03\u7528\u4e4b\u540e\u5c31\u53ef\u4ee5\u505a\u4e00\u4e9b\u6211\u4eec\u81ea\u5df1\u7684\u64cd\u4f5c\u4e86\uff0c\u5176\u5b9eDRF\u4e5f\u662f\u8fd9\u4e48\u5e72\u7684\u3002 # DRF\u7684dispatch\uff0cdrf\u7684dispatch\u548cdjango\u7684dispatch\u51e0\u4e4e\u662f\u4e00\u81f4\u7684\uff0c\u53ea\u4e0d\u8fc7\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u52a0\u4e86\u4e00\u4e9b\u94a9\u5b50\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u5728\u8c03\u7528\u7236\u7c7b\u7684\u64cd\u4f5c\u4e4b\u524d\uff0c\u6267\u884c\u4e00\u4e9b\u5176\u4ed6\u7684\u65b9\u6cd5\u3002\u8fd9\u4e9b\u94a9\u5b50\u5206\u522b\u5b58\u5728\u4e8e\u5f00\u59cb\uff0c\u7ed3\u675f\u4ee5\u53ca\u5f02\u5e38\u7684\u65f6\u5019\u3002 def dispatch(self, request, *args, **kwargs): self.args = args self.kwargs = kwargs # 1\u3001\u9996\u5148\u4ece\u8fd9\u91cc\u5f00\u59cb\uff0cDRF\u5bf9django\u7684request\u505a\u4e86\u5c01\u88c5\u3002 # \u8fd9\u4e2arequest\u5df2\u7ecf\u53d1\u751f\u53d8\u5316\u4e86\uff0c\u662f\u7ecf\u8fc7drf\u52a0\u5de5\u8fc7\u540e\u7684request\u4e86\u3002 request = self.initialize_request(request, *args, **kwargs) self.request = request self.headers = self.default_response_headers # deprecate? try: self.initial(request, *args, **kwargs) # Get the appropriate handler method if request.method.lower() in self.http_method_names: handler = getattr(self, request.method.lower(), self.http_method_not_allowed) else: handler = self.http_method_not_allowed response = handler(request, *args, **kwargs) except Exception as exc: response = self.handle_exception(exc) self.response = self.finalize_response(request, response, *args, **kwargs) return self.response DRF\u662f\u5982\u4f55\u5c01\u88c5request\u7684\uff1f\u8fd9\u91cc\u53ea\u7740\u91cd\u8ba4\u8bc1\u90e8\u5206\uff0c\u5176\u4ed6\u7684\u90e8\u5206\u4f1a\u56de\u8fc7\u5934\u6765\u91cd\u65b0\u8bf4\u660e\u7684\u3002 # initialize_request def initialize_request(self, request, *args, **kwargs): \u8fd4\u56de\u521d\u59cb\u5316\u7684request\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u662fdrf\u7684Request\u7684\u5bf9\u8c61\uff0c\u76f8\u5f53\u4e8e\u5728\u539f\u57fa\u7840\u4e0a\u5c01\u88c5\u4e86\u66f4\u591a\u7684\u5185\u5bb9 \u4f46\u662f\u539f\u6765\u7684django\u7684request\u7ed9\u5c01\u88c5\u5230\u4e86\u8fd4\u56de\u7684\u5bf9\u8c61\u91cc\uff0c\u6240\u4ee5\u8bf4\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528\u4e4b\u524d\u7684request\u3002 parser_context = self.get_parser_context(request) # _request\uff1a\u539f\u751f\u7684request\uff0cauthenticators\u83b7\u53d6\u8ba4\u8bc1\u7c7b\u7684\u5bf9\u8c61\u3002 return Request( request, # \u8fd9\u91cc\u8fd4\u56de\u7684Request\u7684\u5b9e\u4f8b\u5bf9\u8c61\uff0c\u5c06\u539f\u751f\u7684Django\u7684request\u5c01\u88c5\u8fdb\u53bb\u4e86\u3002 parsers=self.get_parsers(), # 2\u3001self.authentication_classes\u4e2d\u5217\u51fa\u7684\u7c7b\u7684\u5bf9\u8c61 authenticators=self.get_authenticators(), negotiator=self.get_content_negotiator(), parser_context=parser_context ) \u5728\u521d\u59cb\u5316\u5c01\u88c5request\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8fd4\u56de\u4e86\u4e00\u4e2aDRF\u7684Request\u5bf9\u8c61\uff0c\u91cc\u9762\u5c01\u88c5\u4e86\u539f\u751f\u7684request\u4ee5\u53ca\u4e00\u4e2aauthenticators\uff0c\u8fd9\u4e2aauthenticators\u662f\u8c03\u7528 self.get_authenticators() \u83b7\u5f97\u7684\u3002 \u6765\u770b\u4e00\u4e0bget_authenticators\u662f\u5982\u4f55\u64cd\u4f5c\u7684\u3002 # \u904d\u5386self.authentications_classes\u8fd4\u56de\u5bf9\u5e94\u6bcf\u4e00\u4e2aitem\u7684\u5b9e\u4f8b\uff0c\u586b\u5145\u5230\u5217\u8868\u91cc\u3002\u56e0\u6b64\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684CBV\u4e2d\u5e94\u8be5\u9700\u8981\u5b58\u5728\u4e00\u4e2a\u5217\u8868authentication_classes\uff0c\u5217\u8868\u91cc\u662f\u6211\u4eec\u81ea\u5b9a\u4e49\u7684\u8ba4\u8bc1\u7c7b def get_authenticators(self): Instantiates and returns the list of authenticators that this view can use. return [auth() for auth in self.authentication_classes] \u6b64\u65f6\u7684\u8fd9\u4e2aself\u662f\u8c01\uff1f\u8fd9\u4e2aself\u73b0\u5728\u662f\u6211\u4eec\u5b9a\u4e49\u7684CBV\uff0c\u56e0\u6b64\u53bb\u627eself.authentication_classes\u7684\u65f6\u5019\u4f1a\u4f18\u5148\u5230\u6211\u4eec\u81ea\u5df1\u7684\u7c7b\u91cc\u9762\u53bb\u627e\uff0c\u5047\u5982\u6211\u5728\u6211\u81ea\u5df1\u7684\u7c7b\u91cc\u9762\u5b9a\u4e49\u4e86\u8fd9\u4e2a\u5185\u5bb9\uff1a class OrderView(APIView): # \u8868\u793a\u5728\u4f60\u5199\u7684\u8fd9\u4e2a\u7c7b\u4e2d\u5e94\u7528drf\u7684\u8ba4\u8bc1\u89c4\u5219 authentication_classes = [Authtication, ] def get(self, request, *args, **kwargs): pass def post(self, request, *args, **kwargs): pass \u90a3\u4e48get_authenticators\u8fd4\u56de\u7684\u5c31\u662f\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684authentication_classes\u4e2d\u7684\u5bf9\u8c61\u7684\u5217\u8868\u3002\u5230\u6b64\u4e3a\u6b62\u6211\u4eec\u5728\u8ba4\u8bc1\u65b9\u9762\u77e5\u9053dispatch\u5728DRF\u4e2d\u88ab\u521d\u59cb\u5316\uff0crequest\u88ab\u91cd\u65b0\u5c01\u88c5\uff0c\u800c\u4e14\u5c01\u88c5\u540e\u7684\u5185\u5bb9\u5305\u542b\u539f\u751f\u7684request\uff0c\u4ee5\u53ca\u4e00\u4e2a\u6211\u4eec\u81ea\u5b9a\u5236\u7684\u8ba4\u8bc1\u89c4\u5219\u7c7b\u7684\u5bf9\u8c61\u5217\u8868\u3002 \u63a5\u4e0b\u6765\u7ee7\u7eed\u770bdispatch\u7684\u5185\u5bb9\uff0c\u5728dispatch\u7684\u540e\u7eed\u4ee3\u7801\u4e2d\u8c03\u7528\u4e86initial\u65b9\u6cd5\u3002 def dispatch(self, request, *args, **kwargs): self.args = args self.kwargs = kwargs request = self.initialize_request(request, *args, **kwargs) self.request = request self.headers = self.default_response_headers # deprecate? try: # 3\u3001\u8c03\u7528initial\u65b9\u6cd5 self.initial(request, *args, **kwargs) # Get the appropriate handler method if request.method.lower() in self.http_method_names: handler = getattr(self, request.method.lower(), self.http_method_not_allowed) else: handler = self.http_method_not_allowed response = handler(request, *args, **kwargs) except Exception as exc: response = self.handle_exception(exc) self.response = self.finalize_response(request, response, *args, **kwargs) return self.response \u627e\u5230self.initial\u65b9\u6cd5 def initial(self, request, *args, **kwargs): Runs anything that needs to occur prior to calling the method handler. self.format_kwarg = self.get_format_suffix(**kwargs) # Perform content negotiation and store the accepted info on the request neg = self.perform_content_negotiation(request) request.accepted_renderer, request.accepted_media_type = neg # Determine the API version, if versioning is in use. version, scheme = self.determine_version(request, *args, **kwargs) request.version, request.versioning_scheme = version, scheme # \u786e\u8ba4\u8fdb\u6765\u7684\u8bf7\u6c42\u662f\u5426\u88ab\u5141\u8bb8\u3002 self.perform_authentication(request) self.check_permissions(request) self.check_throttles(request) \u770b\u6700\u540e\u7684self.perform_authentication\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u662f\u7528\u6765\u786e\u8ba4\u8fd9\u4e2a\u8fdb\u6765\u7684\u8bf7\u6c42\u662f\u5426\u7ecf\u8fc7\u5141\u8bb8\uff0c\u4e5f\u5c31\u662f\u8fdb\u6765\u7684\u8fd9\u4e2a\u8bf7\u6c42\u662f\u5426\u8ba4\u8bc1\u6210\u529f\uff1f def perform_authentication(self, request): Perform authentication on the incoming request. Note that if you override this and simply 'pass', then authentication will instead be performed lazily, the first time either `request.user` or `request.auth` is accessed. request.user \u8fd4\u56de\u4e86\u4e00\u4e2arequest\u5bf9\u8c61\u7684user\u65b9\u6cd5\uff0c\u6ce8\u610f\u6b64\u65f6\u7684request\u662f\u5df2\u7ecf\u88ab\u5c01\u88c5\u8fc7\u7684request\uff0c\u6211\u4eec\u53bbDRF\u7684Request\u7c7b\u4e2d\u53bb\u627e\u8fd9\u4e48\u4e00\u4e2a\u65b9\u6cd5\uff0c\u4e4b\u6240\u4ee5\u6ca1\u6709\u52a0\u62ec\u53f7\u662f\u56e0\u4e3a\u88abproperty\u4fee\u9970\u8fc7\u4e86\uff1a @property def user(self): Returns the user associated with the current request, as authenticated by the authentication classes provided to the request. # \u5982\u679c\u5f53\u524d\u5bf9\u8c61\u4e2d(\u6ce8\u610fself\u6307\u7684\u662fCBV\u7684\u5bf9\u8c61)\u6ca1\u6709_user\u8fd9\u4e2a\u5c5e\u6027\u7684\u8bdd\u90a3\u4e48\u5c31\u8c03\u7528_authenticate\u65b9\u6cd5 # \u5982\u679c\u6709\u76f4\u63a5\u8fd4\u56deself._user if not hasattr(self, '_user'): with wrap_attributeerrors(): self._authenticate() return self._user \u6211\u4eec\u770b\uff0c\u5982\u679c\u8bf4\u8ba4\u8bc1\u6210\u529f\u4ee5\u540e\u4f1a\u8fd4\u56deself._user\uff0c\u5982\u679c\u6ca1\u6709_user\u5219\u4f1a\u8c03\u7528self._authentication()\u65b9\u6cd5 # \u6765\u770b\u4e00\u4e0b_authenticate\u5e72\u4e86\u70b9\u4ec0\u4e48 def _authenticate(self): Attempt to authenticate the request using each authentication instance in turn. # \u5faa\u73afself.authenticators\u4e2d\u7684\u5bf9\u8c61 for authenticator in self.authenticators: try: # \u6267\u884c\u8ba4\u8bc1\u7c7b\u5bf9\u8c61\u7684authenticate\u65b9\u6cd5\uff0c\u5982\u679c\u6ca1\u6709\u5f02\u5e38\u7684\u8bdd\uff0c\u8fd4\u56de\u4e00\u4e2a\u7528\u6237\u8ba4\u8bc1\u7684\u5143\u7ec4 # \u6240\u4ee5\u6211\u4eec\u5728\u5199authenticate\u65b9\u6cd5\u7684\u65f6\u5019\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4 user_auth_tuple = authenticator.authenticate(self) except exceptions.APIException: # \u5982\u679c\u6355\u83b7\u5230\u5f02\u5e38\u4e86\uff0c\u90a3\u4e48\u5c31\u8c03\u7528_not_authenticated\u65b9\u6cd5\u3002 self._not_authenticated() # \u5411\u4e0a\u7ea7\u629b\u51fa\u5f02\u5e38 raise if user_auth_tuple is not None: # \u5982\u679c\u6709\u8fd4\u56de\u503c\uff0c\u90a3\u4e48\u8bc1\u660e\u6267\u884c\u8fc7\u76f8\u5173\u8ba4\u8bc1\u8d4b\u503c\u64cd\u4f5c # \u5982\u679c\u8fd4\u56deNone\u7684\u8bdd\uff0c\u90a3\u4e48\u5faa\u73af\u7ee7\u7eed\uff0c\u8868\u793a\u5f53\u524d\u8ba4\u8bc1\u4e0d\u5904\u7406\uff0c\u4ea4\u7ed9\u4e0b\u4e00\u4e2a\u8ba4\u8bc1\u7c7b\u53bb\u5904\u7406\u3002 # \u8d4b\u503c\uff0crequest.user\u548crequest.auth\u5c31\u662f\u8fd9\u4e48\u6765\u7684\u3002\u56e0\u6b64\u6709\u8fd4\u56de\u503c\u5fc5\u987b\u662f\u4e00\u4e2a\u5143\u7ec4 # \u5143\u7ec4\u91cc\u9762\u5fc5\u987b\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u7b2c\u4e00\u4e2a\u7ed9request.user\uff0c\u7b2c\u4e8c\u4e2a\u7ed9request.auth # \u5bf9\u5e94\u7684request.user\u5c31\u662fuser\u5bf9\u8c61\uff0crequest.auth\u5c31\u662ftoken\u5bf9\u8c61\u3002 self._authenticator = authenticator self.user, self.auth = user_auth_tuple return # \u4e5f\u6709\u53ef\u80fd\u90fd\u4e0d\u5904\u7406\uff0c\u8fd4\u56de\u7684\u90fd\u662fNone\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u9ed8\u8ba4\u8d4b\u503c self._not_authenticated() \u6211\u4eec\u5728_authenticate\u4e2d\u53d1\u73b0\uff0c\u5faa\u73af\u904d\u5386\u4e86\u6211\u4eec\u5c01\u88c5\u7684self.authenticators\u4e2d\u7684\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u5bf9\u8c61\u7684authenticate\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u6211\u4eec\u81ea\u5df1\u5199\u7684\u7c7b\u91cc\u9762\u8981\u6709\u4e00\u4e2aauthenticate\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de\u4ec0\u4e48\uff1f\u4e0a\u9762\u7684\u65b9\u6cd5\u652f\u6301\u4e09\u79cd\u8fd4\u56de\u503c\uff1a \u81ea\u5df1\u8fd4\u56de\u5143\u7ec4\uff1a\u5143\u7ec4\u4e2d\u5305\u542b\u8ba4\u8bc1\u7528\u6237\u7684user\u5bf9\u8c61\uff0c\u4ee5\u53ca\u8ba4\u8bc1\u7ed3\u679c\u7684\u8ba4\u8bc1\u5bf9\u8c61\uff08\u6bd4\u5982token\u8868\u4e2d\u7684\u5bf9\u8c61\uff09\u3002 \u629b\u51fa\u5f02\u5e38\uff1a\u8c03\u7528 self._not_authenticated() \uff0c\u629b\u51fa\u7684\u5f02\u5e38\u4f1a\u5728_authenticate\u4e2d\u6355\u83b7\u5230\u3002 \u8fd4\u56deNone\uff0c\u4e5f\u5c31\u662f\u6240\u6709\u7684\u8ba4\u8bc1\u89c4\u5219\u5168\u90e8\u901a\u8fc7\uff0c\u4f46\u662f\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u6b64\u65f6\u8c03\u7528 self._not_authenticated() . \u6765\u770b\u770b self._not_authenticated() \u90fd\u5e72\u4e86\u70b9\u4ec0\u4e48\uff1f def _not_authenticated(self): # \u8bbe\u7f6e\u9ed8\u8ba4\u7684_authenticator\u4e3a\u7a7a\uff0c self._authenticator = None # \u5982\u679c\u8bbe\u7f6e\u4e86UNAUTHENTICATED_USER\u90a3\u4e48\u5c31\u8c03\u7528\uff08AnonymousUser\uff09\uff0c\u5426\u5219\u5c31\u8fd4\u56deNone if api_settings.UNAUTHENTICATED_USER: self.user = api_settings.UNAUTHENTICATED_USER() else: self.user = None # \u5982\u679c\u8bbe\u7f6e\u4e86UNAUTHENTICATED_TOKEN\u90a3\u4e48\u5c31\u8c03\u7528\uff0c\u5426\u5219\u5c31\u8fd4\u56deNone if api_settings.UNAUTHENTICATED_TOKEN: self.auth = api_settings.UNAUTHENTICATED_TOKEN() else: self.auth = None \u5176\u5b9e\u4e3a\u9ed8\u8ba4\u7684\u7528\u6237\u505a\u4e00\u4e2a\u8bbe\u7f6e\uff0c\u7ed9\u901a\u8fc7\u8ba4\u8bc1\u5374\u6ca1\u6709\u8fd4\u56de\u5177\u4f53\u8ba4\u8bc1\u4fe1\u606f\u7684\u4eba\u4e00\u4e2a\u8eab\u4efd\uff08\u533f\u540d\u7528\u6237\uff09\u3002\u5230\u6b64\u4e3a\u6b62\uff0c\u8ba4\u8bc1\u662fok\u4e86\u3002\u4e0d\u8fc7\u521a\u624d\u8d70\u7684authenticate_classes\u662f\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684\uff0c\u96be\u9053\u6211\u4eec\u6bcf\u5199\u4e00\u4e2a\u7c7b\u90fd\u8981\u81ea\u5df1\u8fd9\u6837\u5b9a\u4e49\u4e00\u4e0b\u4e48\uff1f\u5176\u5b9e\u4e0d\u662f\u7684\uff0c\u9488\u5bf9\u8fd9\u4e2a\u8ba4\u8bc1\u89c4\u5219\u662f\u6709\u4e00\u4e2a\u5168\u5c40\u8bbe\u7f6e\u7684\u3002 \u4e4b\u524d\u7684authenticate_classes\u662f\u9ed8\u8ba4\u4f18\u5148\u627e\u81ea\u5df1\u5b9a\u4e49\u7684cbv\u4e2d\u7684\u8fd9\u4e2a\u5c5e\u6027\uff0c\u5047\u5982\u8bf4\u6ca1\u6709\u7684\u8bdd\u90a3\u4e48\u5c31\u5e94\u8be5\u53bb\u7236\u7c7b\u53bb\u627e\u4e86\uff0c\u90a3\u4e48\u7236\u7c7b\u4e2d\u662f\u5982\u4f55\u5b9a\u4e49\u7684\uff1f\u6700\u540e\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u5185\u7f6e\u7684authentication_classess\uff0c\u5b83\u662f\u4e00\u4e2aapi_settings\u7684\u4e00\u4e2a\u914d\u7f6e\u9879\uff1a class APIView(View): # The following policies may be set at either globally, or per-view. renderer_classes = api_settings.DEFAULT_RENDERER_CLASSES parser_classes = api_settings.DEFAULT_PARSER_CLASSES authentication_classes = api_settings.DEFAULT_AUTHENTICATION_CLASSES \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 api_settings = APISettings(None, DEFAULTS, IMPORT_STRINGS) def reload_api_settings(*args, **kwargs): setting = kwargs['setting'] # \u4f1a\u53bb\u914d\u7f6e\u6587\u4ef6\u4e2d\u627eREST_FRAMEWORK\u8fd9\u6837\u4e00\u4e2akey\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u914d\u7f6e\u9879\u5199\u5230\u8fd9\u91cc\u3002 if setting == 'REST_FRAMEWORK': api_settings.reload() \u9ed8\u8ba4\u8fd9\u4e2a\u53d8\u91cf\u662f\u6ca1\u6709\u4e1c\u897f\u7684\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u53bb\u52a0\uff0c\u52a0\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a # settings.py\u6587\u4ef6\u6700\u540e\u8fdb\u884c\u6dfb\u52a0 REST_FRAMEWORK = { # \u8fd9\u91cc\u5199\u7684\u662f\u8ba4\u8bc1\u7c7b\u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u5355\u72ec\u6254\u5230\u4e00\u4e2apy\u6587\u4ef6\u91cc 'DEFAULT_AUTHENTICATION_CLASSES': ['api.utils.auth.FirstAuth', 'api.utils.xxx.xxx'], # \u63a8\u8350\u4f7f\u7528None\uff0c\u8fd9\u4e2a\u73a9\u610f\u662f\u53ef\u4ee5\u8c03\u7528\u7684\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u5199\u4e00\u4e2alambda\u8868\u8fbe\u5f0f\u8fd4\u56de\u6211\u4eec\u81ea\u5b9a\u4e49\u7684\u4fe1\u606f\u5c31\u53ef\u4ee5\u4e86\u3002 'UNAUTHENTICATED_USER': None, # request.user = None 'UNAUTHENTICATED_TOKEN': None, # request.auth = None } \u8ba4\u8bc1\u7c7b\u4e0d\u8981\u548cview\u5199\u5230\u4e00\u8d77\uff0c\u8fd9\u6837\u89c6\u56fe\u51fd\u6570\u5c31\u53ea\u6709\u89c6\u56fe\u76f8\u5173\u7684\u903b\u8f91\uff0c\u800c\u8ba4\u8bc1\u76f8\u5173\u7684\u88ab\u5265\u79bb\u5230auth.py\u4e2d\u4e86\u3002\u56e0\u6b64\u5728api\u9879\u76ee\u4e0b\u65b0\u5efa\u4e00\u4e2autils\u7684\u76ee\u5f55\uff0c\u65b0\u5efa\u4e00\u4e2aauth.py\u5c06\u6211\u4eec\u7684\u8ba4\u8bc1\u903b\u8f91\u90fd\u6254\u5230auth.py\u91cc\u9762\u53bb\uff0c\u8fd9\u91cc\u7684\u503c\u6211\u4eec\u77e5\u9053\u5bf9\u5e94\u7684\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u91cc\u9762\u5199\u7684\u90fd\u662f\u7c7b\u7684\u5168\u8def\u5f84\uff08\u7c7b\u4f3cmiddleware\u90a3\u79cd\u5199\u6cd5\uff09\u3002 \u8fd9\u6837\u6211\u4eec\u5b9e\u9645\u7684\u6bcf\u4e00\u4e2a\u4e1a\u52a1\u7c7b\u5c31\u4e0d\u7528\u5199\u8fd9\u4e9b\u5185\u5bb9\u4e86\uff0c\u76f8\u5f53\u4e8e\u5168\u5c40\u6dfb\u52a0\u4e86\u8ba4\u8bc1\uff0c\u4f46\u662f\u4e5f\u6709\u4f8b\u5916\u7684\u9875\u9762\uff0c\u6bd4\u5982\u8ba4\u8bc1\u9875\u9762\uff0c\u8ba4\u8bc1\u9875\u9762\u662f\u4e0d\u9700\u8981\u6dfb\u52a0\u8ba4\u8bc1\u673a\u5236\u7684\uff0c\u4f60\u5f97\u5148\u901a\u8fc7\u4e86\u8ba4\u8bc1\u9875\u9762\u62ff\u5230\u4e86token\u8bbf\u95ee\u522b\u7684\u9700\u8981\u8ba4\u8bc1\u7684\u9875\u9762\u7684\u65f6\u5019\u624d\u9700\u8981\u8ba4\u8bc1\uff0c\u4f60\u73b0\u5728\u90fd\u6ca1\u767b\u5f55\uff0c\u6211\u8ba4\u8bc1\u9875\u9762\u8fd8\u4e0d\u8ba9\u4f60\u8bbf\u95ee\u90a3\u5c31\u6ca1\u529e\u6cd5\u8bbf\u95ee\u4e86\u3002\u56e0\u6b64\u9488\u5bf9\u4e00\u4e9b\u4e1a\u52a1\u7c7b\u9700\u8981\u653e\u5f00\u8fd9\u4e2a\u6743\u9650\uff0c\u653e\u5f00\u7684\u65b9\u6cd5\u4e5f\u5f88\u7b80\u5355\uff0c\u5b9a\u4e49\u4e00\u4e2a\u7a7a\u5217\u8868\u5c31\u884c\u4e86\u3002\u56e0\u4e3a\u5728\u7c7b\u7684\u5185\u90e8\u5b9a\u4e49\u4e86\uff0c\u56e0\u6b64\u4f1a\u4f18\u5148\u8d70\u7c7b\u5185\u90e8\u7684\uff0c\u5b9e\u73b0\u4e86\u5355\u72ec\u7684\u7c7b\u7684\u7279\u6b8a\u653e\u5f00\u3002 class AuthView(APIView): # \u76f4\u63a5\u8df3\u8fc7\u9a8c\u8bc1 authentication_classes = [] def post(self, request, *args, **kwargs): \u2026\u2026\u2026\u2026\u2026\u2026 def get(self, request, *args, **kwargs): \u2026\u2026\u2026\u2026\u2026\u2026 \u5185\u7f6e\u8ba4\u8bc1\u7c7b from rest_framework.authentication import BaseAuthentication \u4e3a\u4e86\u89c4\u8303\u90fd\u8981\u7ee7\u627f\u9ed8\u8ba4\u7684BaseAuthentication\u7c7b\u3002authenticate_header\u662f\u8ba4\u8bc1\u5931\u8d25\uff08\u8fd9\u4e2a\u662f\u6d4f\u89c8\u5668\u7684\u4e00\u79cd\u8ba4\u8bc1\u673a\u5236\uff09\u7684\u65f6\u5019\u7ed9\u4f60\u7684\u6d4f\u89c8\u5668\u8fd4\u56de\u7684\u54cd\u5e94\u5934\u3002BaseAuthentication\u8fd9\u4e2a\u7c7b\u5176\u5b9e\u5565\u90fd\u6ca1\u5199\uff0c\u5c31\u662f\u5b9a\u4e49\u4e86\u4e24\u4e2a\u65b9\u6cd5\uff0c\u4e00\u4e2aauthenticate\u4e00\u4e2aauthenticate_header\u65b9\u6cd5\u3002\u800c\u4e14authenticate\u5fc5\u987b\u8981\u91cd\u5199\uff0c\u5426\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 \u5176\u4ed6\u7684\u5185\u7f6e\u8ba4\u8bc1\u7c7b\u578b\u8fd8\u5305\u62ecSession\u7684\uff0cToken\u7684\uff0cRemoteUser\u7684\uff0c\u4e0d\u8fc7\u8fd9\u4e9b\u8ba4\u8bc1\u90fd\u662f\u57fa\u4e8eDjango\u7684\uff0c\u4ee5Session\u4e3a\u4f8b\uff0c\u5b83\u4f1a\u53bb\u83b7\u53d6request.user\u8fd9\u4e2a\u9009\u9879\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u81ea\u5df1\u53bb\u5199session\u7684\u65f6\u5019\u662f\u6ca1\u6709\u8fd9\u4e2a\u5185\u5bb9\u7684\u3002request.user\u662f\u57fa\u4e8eDjango\u7684\u3002\u518d\u6bd4\u5982RemoteUser\u662f\u57fa\u4e8eDjango\u7684auth\u53bb\u8fdb\u884c\u8ba4\u8bc1\u7684\u3002\u56e0\u6b64\u5185\u7f6e\u7684\u8fd9\u51e0\u79cd\u65b9\u6cd5\u5176\u5b9e\u90fd\u662f\u6709\u4e00\u5b9a\u5c40\u9650\u6027\u7684\uff0c\u56e0\u6b64\u8ba4\u8bc1\u7c7b\uff0c\u4e00\u822c\u662f\u6211\u4eec\u81ea\u5df1\u53bb\u5199\uff0c\u4e0d\u4f1a\u53bb\u7528\u5230DRF\u539f\u751f\u7684\u3002 \u8bf4\u4e00\u4e0b BasicAuthentication \uff0c\u8fd9\u4e2a\u662f\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684\u8d26\u53f7\u5bc6\u7801\u8ba4\u8bc1\uff0c\u5728\u8bbf\u95ee\u9875\u9762\u7684\u65f6\u5019\u4f1a\u4ee5\u6d4f\u89c8\u5668\u7684\u5f62\u5f0f\u5f39\u51fa\u6765\u4e00\u4e2a\u8d26\u53f7\u5bc6\u7801\u7684\u8ba4\u8bc1\u8f93\u5165\u6846\uff0c\u6d4f\u89c8\u5668\u4f1a\u628a\u8f93\u5165\u7684\u8d26\u53f7\u5bc6\u7801\u8fdb\u884c\u52a0\u5bc6\u6254\u5230\u8bf7\u6c42\u5934\uff0c\u52a0\u5bc6\u7684\u5f62\u5f0f\u5982\u4e0b\uff1a HTTP_AUTHORIZATION: basic (\u7528\u6237\u540d+\u5bc6\u7801)base64\u8f6c\u7801 \u5728BasicAuthentication\u4e2d\u4f1a\u53bb\u83b7\u53d6\u8fd9\u4e00\u90e8\u5206\uff1a def get_authorization_header(request): Return request's 'Authorization:' header, as a bytestring. Hide some test client ickyness where the header can be unicode. # \u4ecerequest.META\u4e2d\u628a\u8fd9\u4e2aHTTP_AUTHORIZATION\u53d6\u51fa\u6765\u3002 auth = request.META.get('HTTP_AUTHORIZATION', b'') if isinstance(auth, text_type): # Work around django test client oddness auth = auth.encode(HTTP_HEADER_ENCODING) return auth \u62ff\u5230base64\u8f6c\u7801\u540e\u7684\u5185\u5bb9\u8fdb\u884c\u89e3\u7801\u7684\u64cd\u4f5c\u3002 class BasicAuthentication(BaseAuthentication): HTTP Basic authentication against username/password. www_authenticate_realm = 'api' def authenticate(self, request): Returns a `User` if a correct username and password have been supplied using HTTP Basic authentication. Otherwise returns `None`. auth = get_authorization_header(request).split() # \u5982\u679c\u8fd4\u56de\u4e3aNone\u6216\u8005\u4e0d\u662fbasic\u8ba4\u8bc1\uff0c\u90a3\u4e48return None if not auth or auth[0].lower() != b'basic': return None if len(auth) == 1: msg = _('Invalid basic header. No credentials provided.') raise exceptions.AuthenticationFailed(msg) elif len(auth) 2: msg = _('Invalid basic header. Credentials string should not contain spaces.') raise exceptions.AuthenticationFailed(msg) try: # \u5f00\u59cbbase64\u89e3\u7801\uff0c\u6ce8\u610fsplit\u548cpartition\u7c7b\u4f3c\uff0csplit\u4e0d\u4f1a\u53d6\u5206\u9694\u7b26\uff0c\u4f46\u662fpartition\u4f1a\u53d6 auth_parts = base64.b64decode(auth[1]).decode(HTTP_HEADER_ENCODING).partition(':') except (TypeError, UnicodeDecodeError, binascii.Error): msg = _('Invalid basic header. Credentials not correctly base64 encoded.') raise exceptions.AuthenticationFailed(msg) userid, password = auth_parts[0], auth_parts[2] return self.authenticate_credentials(userid, password, request) \u5c0f\u7ed3 authenticate\u8fd4\u56de\u503c None\uff1a\u6211\u4e0d\u7ba1\u4e86\uff0c\u4e0b\u4e00\u4e2a\u8ba4\u8bc1\u6765\u6267\u884c \u629b\u51fa\u5f02\u5e38\uff0c raise exception.AuthenticationFailed('Auth Failed') \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c(user obj\uff0cauth obj)\uff0c\u56e0\u6b64\u5143\u7d20\u4e00\u8d4b\u503c\u7ed9request.user\uff0c\u5143\u7d20\u4e8c\u8d4b\u503c\u7ed9request.auth \u4f7f\u7528\u8303\u56f4 \u5c40\u90e8\u4f7f\u7528\uff1a\u89c6\u56fe\u7c7b\u4e2d\u5199\u4e00\u4e2a\u9759\u6001\u5b57\u6bb5\uff0cauthentication_classes\uff0c\u5217\u8868\u91cc\u9762\u662f\u7c7b\u7684\u540d\u79f0\uff0c\u8fd9\u91cc\u548c\u5168\u5c40\u4e0d\u4e00\u6837\u3002 \u5168\u5c40\u4f7f\u7528\uff0c\u5728settings\u4e2d\u914d\u7f6e\uff1a python REST_FRAMEWORK = { # \u8fd9\u91cc\u5199\u7684\u662f\u8ba4\u8bc1\u7c7b\u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u5355\u72ec\u6254\u5230\u4e00\u4e2apy\u6587\u4ef6\u91cc 'DEFAULT_AUTHENTION_CLASSES': ['api.utils.auth.Authtication', ], 'UNAUTHENTICATED_USER': None, 'UNAUTHENTICATED_TOKEN': None, } Django\u7684\u751f\u547d\u5468\u671f\uff1a wsgi \u4e2d\u95f4\u4ef6 dispath(drf\u7684dispatch)","title":"Django Rest FrameWork"},{"location":"django/07-DRF/02-DRF\u8ba4\u8bc1/#django-rest-framework","text":"","title":"Django Rest FrameWork"},{"location":"django/07-DRF/02-DRF\u8ba4\u8bc1/#drf","text":"# \u5b89\u88c5\u8fc7\u7a0b\u6781\u5176\u7b80\u5355 pip3 install djangorestframework","title":"DRF\u5b89\u88c5"},{"location":"django/07-DRF/02-DRF\u8ba4\u8bc1/#drf_1","text":"","title":"DRF\u7684\u8ba4\u8bc1"},{"location":"django/07-DRF/02-DRF\u8ba4\u8bc1/#_1","text":"model class\u7b80\u5355\u70b9\uff0c\u4e00\u4e2a\u7528\u6765\u5b58\u50a8\u7528\u6237\u4fe1\u606f\u4e00\u4e2a\u7528\u6765\u5b58\u50a8token\u8ba4\u8bc1\u4fe1\u606f\u3002 from django.db import models class UserInfo(models.Model): user_type_choices = ( (1, '\u666e\u901a\u7528\u6237'), (2, 'VIP'), (3, 'SVIP'), ) user_type = models.IntegerField(choices=user_type_choices) username = models.CharField(max_length=64, unique=True) password = models.CharField(max_length=64) class UserToken(models.Model): # \u8fd8\u53ef\u4ee5\u5728\u8fd9\u91cc\u52a0token\u65f6\u95f4\uff0c\u6700\u591a\u4f7f\u7528\u6b21\u6570\uff0c\u6bd4\u5982\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2aexpire_time\u4f5c\u4e3a\u8fc7\u671f\u65f6\u95f4 # \u907f\u514d\u6bcf\u6b21\u8bbf\u95ee\u7684\u65f6\u5019\u90fd\u5237\u65b0token user = models.OneToOneField('UserInfo', on_delete=models.CASCADE) token = models.CharField(max_length=64)","title":"\u7b80\u5355\u73af\u5883\u51c6\u5907"},{"location":"django/07-DRF/02-DRF\u8ba4\u8bc1/#_2","text":"\u4f7f\u7528drf\u7684\u65f6\u5019\u6211\u4eec\u7684\u89c6\u56fe\u903b\u8f91\u4f7f\u7528\u7684\u662fCBV\u800c\u4e0d\u662fFBV\uff0c\u8fd9\u91ccCBV\u6709\u4e00\u4e2a\u8981\u70b9\u662f\u7ee7\u627f\u7684\u4e0d\u662f\u9ed8\u8ba4\u7684django\u7684View\u800c\u662f\u8981\u7ee7\u627fDRF\u7684APIView\uff0c\u56e0\u6b64\uff0c\u9700\u8981\u5bfc\u5165\u5bf9\u5e94\u7684drf\u7684APIVIEW\u3002 \u89e3\u6790\u8ba4\u8bc1\u6d41\u7a0b\u4ece\u4e00\u4e2a\u8bf7\u6c42\u8fdb\u6765\u5f00\u59cb\u8bb2\uff0c\u6bd4\u5982\u4e0b\u9762\u7684AuthView\uff0c\u7528\u6765\u5b9e\u73b0\u8ba4\u8bc1\u7684\u4e00\u4e2aCBV\u89c6\u56fe\u903b\u8f91\u3002 from rest_framework.views import APIView class AuthView(APIView): pass \u5176\u5b9e\u8fd9\u4e2aAPIView\u4e5f\u7ee7\u627f\u81eaDjango\u7684View\uff0c\u56e0\u6b64DRF\u76f8\u5f53\u4e8e\u5728Django\u7684View\u4e0a\u53c8\u7ed9\u5c01\u88c5\u4e86\u4e00\u5c42\uff0cCBV\u4e2d\u627e\u5230\u5bf9\u5e94request.method\u89c6\u56fe\u65b9\u6cd5\u7684\u5173\u952e\u662f\u5229\u7528\u53cd\u5c04\u6765\u5b8c\u6210\u7684\uff0c\u90a3\u4e48\u9996\u5148\u8d70\u7684\u5e94\u8be5\u5c31\u662fdispatch\u65b9\u6cd5\u3002\u9ed8\u8ba4\u7684Django\u7684View\u5c31\u662f\u505a\u4e86\u4e00\u5c42\u7684\u53cd\u5c04\uff1a # Django\u81ea\u8eabView\u7684dispath\u65b9\u6cd5 def dispatch(self, request, *args, **kwargs): # Try to dispatch to the right method; if a method doesn't exist, # defer to the error handler. Also defer to the error handler if the # request method isn't on the approved list. if request.method.lower() in self.http_method_names: handler = getattr(self, request.method.lower(), self.http_method_not_allowed) else: handler = self.http_method_not_allowed return handler(request, *args, **kwargs) \u4e0d\u8fc7\u6211\u4eec\u77e5\u9053\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u81ea\u5df1\u7684CBV\u4e2d\u91cd\u5199\u8fd9\u4e2adispatch\uff0c\u5148\u8c03\u7528\u4e00\u4e0b\u7236\u7c7b\uff08View\uff09\u7684dispatch\u65b9\u6cd5\uff0c\u7136\u540e\u5728\u8c03\u7528\u4e4b\u524d\u548c\u8c03\u7528\u4e4b\u540e\u5c31\u53ef\u4ee5\u505a\u4e00\u4e9b\u6211\u4eec\u81ea\u5df1\u7684\u64cd\u4f5c\u4e86\uff0c\u5176\u5b9eDRF\u4e5f\u662f\u8fd9\u4e48\u5e72\u7684\u3002 # DRF\u7684dispatch\uff0cdrf\u7684dispatch\u548cdjango\u7684dispatch\u51e0\u4e4e\u662f\u4e00\u81f4\u7684\uff0c\u53ea\u4e0d\u8fc7\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u52a0\u4e86\u4e00\u4e9b\u94a9\u5b50\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u5728\u8c03\u7528\u7236\u7c7b\u7684\u64cd\u4f5c\u4e4b\u524d\uff0c\u6267\u884c\u4e00\u4e9b\u5176\u4ed6\u7684\u65b9\u6cd5\u3002\u8fd9\u4e9b\u94a9\u5b50\u5206\u522b\u5b58\u5728\u4e8e\u5f00\u59cb\uff0c\u7ed3\u675f\u4ee5\u53ca\u5f02\u5e38\u7684\u65f6\u5019\u3002 def dispatch(self, request, *args, **kwargs): self.args = args self.kwargs = kwargs # 1\u3001\u9996\u5148\u4ece\u8fd9\u91cc\u5f00\u59cb\uff0cDRF\u5bf9django\u7684request\u505a\u4e86\u5c01\u88c5\u3002 # \u8fd9\u4e2arequest\u5df2\u7ecf\u53d1\u751f\u53d8\u5316\u4e86\uff0c\u662f\u7ecf\u8fc7drf\u52a0\u5de5\u8fc7\u540e\u7684request\u4e86\u3002 request = self.initialize_request(request, *args, **kwargs) self.request = request self.headers = self.default_response_headers # deprecate? try: self.initial(request, *args, **kwargs) # Get the appropriate handler method if request.method.lower() in self.http_method_names: handler = getattr(self, request.method.lower(), self.http_method_not_allowed) else: handler = self.http_method_not_allowed response = handler(request, *args, **kwargs) except Exception as exc: response = self.handle_exception(exc) self.response = self.finalize_response(request, response, *args, **kwargs) return self.response DRF\u662f\u5982\u4f55\u5c01\u88c5request\u7684\uff1f\u8fd9\u91cc\u53ea\u7740\u91cd\u8ba4\u8bc1\u90e8\u5206\uff0c\u5176\u4ed6\u7684\u90e8\u5206\u4f1a\u56de\u8fc7\u5934\u6765\u91cd\u65b0\u8bf4\u660e\u7684\u3002 # initialize_request def initialize_request(self, request, *args, **kwargs): \u8fd4\u56de\u521d\u59cb\u5316\u7684request\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u662fdrf\u7684Request\u7684\u5bf9\u8c61\uff0c\u76f8\u5f53\u4e8e\u5728\u539f\u57fa\u7840\u4e0a\u5c01\u88c5\u4e86\u66f4\u591a\u7684\u5185\u5bb9 \u4f46\u662f\u539f\u6765\u7684django\u7684request\u7ed9\u5c01\u88c5\u5230\u4e86\u8fd4\u56de\u7684\u5bf9\u8c61\u91cc\uff0c\u6240\u4ee5\u8bf4\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528\u4e4b\u524d\u7684request\u3002 parser_context = self.get_parser_context(request) # _request\uff1a\u539f\u751f\u7684request\uff0cauthenticators\u83b7\u53d6\u8ba4\u8bc1\u7c7b\u7684\u5bf9\u8c61\u3002 return Request( request, # \u8fd9\u91cc\u8fd4\u56de\u7684Request\u7684\u5b9e\u4f8b\u5bf9\u8c61\uff0c\u5c06\u539f\u751f\u7684Django\u7684request\u5c01\u88c5\u8fdb\u53bb\u4e86\u3002 parsers=self.get_parsers(), # 2\u3001self.authentication_classes\u4e2d\u5217\u51fa\u7684\u7c7b\u7684\u5bf9\u8c61 authenticators=self.get_authenticators(), negotiator=self.get_content_negotiator(), parser_context=parser_context ) \u5728\u521d\u59cb\u5316\u5c01\u88c5request\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8fd4\u56de\u4e86\u4e00\u4e2aDRF\u7684Request\u5bf9\u8c61\uff0c\u91cc\u9762\u5c01\u88c5\u4e86\u539f\u751f\u7684request\u4ee5\u53ca\u4e00\u4e2aauthenticators\uff0c\u8fd9\u4e2aauthenticators\u662f\u8c03\u7528 self.get_authenticators() \u83b7\u5f97\u7684\u3002 \u6765\u770b\u4e00\u4e0bget_authenticators\u662f\u5982\u4f55\u64cd\u4f5c\u7684\u3002 # \u904d\u5386self.authentications_classes\u8fd4\u56de\u5bf9\u5e94\u6bcf\u4e00\u4e2aitem\u7684\u5b9e\u4f8b\uff0c\u586b\u5145\u5230\u5217\u8868\u91cc\u3002\u56e0\u6b64\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684CBV\u4e2d\u5e94\u8be5\u9700\u8981\u5b58\u5728\u4e00\u4e2a\u5217\u8868authentication_classes\uff0c\u5217\u8868\u91cc\u662f\u6211\u4eec\u81ea\u5b9a\u4e49\u7684\u8ba4\u8bc1\u7c7b def get_authenticators(self): Instantiates and returns the list of authenticators that this view can use. return [auth() for auth in self.authentication_classes] \u6b64\u65f6\u7684\u8fd9\u4e2aself\u662f\u8c01\uff1f\u8fd9\u4e2aself\u73b0\u5728\u662f\u6211\u4eec\u5b9a\u4e49\u7684CBV\uff0c\u56e0\u6b64\u53bb\u627eself.authentication_classes\u7684\u65f6\u5019\u4f1a\u4f18\u5148\u5230\u6211\u4eec\u81ea\u5df1\u7684\u7c7b\u91cc\u9762\u53bb\u627e\uff0c\u5047\u5982\u6211\u5728\u6211\u81ea\u5df1\u7684\u7c7b\u91cc\u9762\u5b9a\u4e49\u4e86\u8fd9\u4e2a\u5185\u5bb9\uff1a class OrderView(APIView): # \u8868\u793a\u5728\u4f60\u5199\u7684\u8fd9\u4e2a\u7c7b\u4e2d\u5e94\u7528drf\u7684\u8ba4\u8bc1\u89c4\u5219 authentication_classes = [Authtication, ] def get(self, request, *args, **kwargs): pass def post(self, request, *args, **kwargs): pass \u90a3\u4e48get_authenticators\u8fd4\u56de\u7684\u5c31\u662f\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684authentication_classes\u4e2d\u7684\u5bf9\u8c61\u7684\u5217\u8868\u3002\u5230\u6b64\u4e3a\u6b62\u6211\u4eec\u5728\u8ba4\u8bc1\u65b9\u9762\u77e5\u9053dispatch\u5728DRF\u4e2d\u88ab\u521d\u59cb\u5316\uff0crequest\u88ab\u91cd\u65b0\u5c01\u88c5\uff0c\u800c\u4e14\u5c01\u88c5\u540e\u7684\u5185\u5bb9\u5305\u542b\u539f\u751f\u7684request\uff0c\u4ee5\u53ca\u4e00\u4e2a\u6211\u4eec\u81ea\u5b9a\u5236\u7684\u8ba4\u8bc1\u89c4\u5219\u7c7b\u7684\u5bf9\u8c61\u5217\u8868\u3002 \u63a5\u4e0b\u6765\u7ee7\u7eed\u770bdispatch\u7684\u5185\u5bb9\uff0c\u5728dispatch\u7684\u540e\u7eed\u4ee3\u7801\u4e2d\u8c03\u7528\u4e86initial\u65b9\u6cd5\u3002 def dispatch(self, request, *args, **kwargs): self.args = args self.kwargs = kwargs request = self.initialize_request(request, *args, **kwargs) self.request = request self.headers = self.default_response_headers # deprecate? try: # 3\u3001\u8c03\u7528initial\u65b9\u6cd5 self.initial(request, *args, **kwargs) # Get the appropriate handler method if request.method.lower() in self.http_method_names: handler = getattr(self, request.method.lower(), self.http_method_not_allowed) else: handler = self.http_method_not_allowed response = handler(request, *args, **kwargs) except Exception as exc: response = self.handle_exception(exc) self.response = self.finalize_response(request, response, *args, **kwargs) return self.response \u627e\u5230self.initial\u65b9\u6cd5 def initial(self, request, *args, **kwargs): Runs anything that needs to occur prior to calling the method handler. self.format_kwarg = self.get_format_suffix(**kwargs) # Perform content negotiation and store the accepted info on the request neg = self.perform_content_negotiation(request) request.accepted_renderer, request.accepted_media_type = neg # Determine the API version, if versioning is in use. version, scheme = self.determine_version(request, *args, **kwargs) request.version, request.versioning_scheme = version, scheme # \u786e\u8ba4\u8fdb\u6765\u7684\u8bf7\u6c42\u662f\u5426\u88ab\u5141\u8bb8\u3002 self.perform_authentication(request) self.check_permissions(request) self.check_throttles(request) \u770b\u6700\u540e\u7684self.perform_authentication\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u662f\u7528\u6765\u786e\u8ba4\u8fd9\u4e2a\u8fdb\u6765\u7684\u8bf7\u6c42\u662f\u5426\u7ecf\u8fc7\u5141\u8bb8\uff0c\u4e5f\u5c31\u662f\u8fdb\u6765\u7684\u8fd9\u4e2a\u8bf7\u6c42\u662f\u5426\u8ba4\u8bc1\u6210\u529f\uff1f def perform_authentication(self, request): Perform authentication on the incoming request. Note that if you override this and simply 'pass', then authentication will instead be performed lazily, the first time either `request.user` or `request.auth` is accessed. request.user \u8fd4\u56de\u4e86\u4e00\u4e2arequest\u5bf9\u8c61\u7684user\u65b9\u6cd5\uff0c\u6ce8\u610f\u6b64\u65f6\u7684request\u662f\u5df2\u7ecf\u88ab\u5c01\u88c5\u8fc7\u7684request\uff0c\u6211\u4eec\u53bbDRF\u7684Request\u7c7b\u4e2d\u53bb\u627e\u8fd9\u4e48\u4e00\u4e2a\u65b9\u6cd5\uff0c\u4e4b\u6240\u4ee5\u6ca1\u6709\u52a0\u62ec\u53f7\u662f\u56e0\u4e3a\u88abproperty\u4fee\u9970\u8fc7\u4e86\uff1a @property def user(self): Returns the user associated with the current request, as authenticated by the authentication classes provided to the request. # \u5982\u679c\u5f53\u524d\u5bf9\u8c61\u4e2d(\u6ce8\u610fself\u6307\u7684\u662fCBV\u7684\u5bf9\u8c61)\u6ca1\u6709_user\u8fd9\u4e2a\u5c5e\u6027\u7684\u8bdd\u90a3\u4e48\u5c31\u8c03\u7528_authenticate\u65b9\u6cd5 # \u5982\u679c\u6709\u76f4\u63a5\u8fd4\u56deself._user if not hasattr(self, '_user'): with wrap_attributeerrors(): self._authenticate() return self._user \u6211\u4eec\u770b\uff0c\u5982\u679c\u8bf4\u8ba4\u8bc1\u6210\u529f\u4ee5\u540e\u4f1a\u8fd4\u56deself._user\uff0c\u5982\u679c\u6ca1\u6709_user\u5219\u4f1a\u8c03\u7528self._authentication()\u65b9\u6cd5 # \u6765\u770b\u4e00\u4e0b_authenticate\u5e72\u4e86\u70b9\u4ec0\u4e48 def _authenticate(self): Attempt to authenticate the request using each authentication instance in turn. # \u5faa\u73afself.authenticators\u4e2d\u7684\u5bf9\u8c61 for authenticator in self.authenticators: try: # \u6267\u884c\u8ba4\u8bc1\u7c7b\u5bf9\u8c61\u7684authenticate\u65b9\u6cd5\uff0c\u5982\u679c\u6ca1\u6709\u5f02\u5e38\u7684\u8bdd\uff0c\u8fd4\u56de\u4e00\u4e2a\u7528\u6237\u8ba4\u8bc1\u7684\u5143\u7ec4 # \u6240\u4ee5\u6211\u4eec\u5728\u5199authenticate\u65b9\u6cd5\u7684\u65f6\u5019\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4 user_auth_tuple = authenticator.authenticate(self) except exceptions.APIException: # \u5982\u679c\u6355\u83b7\u5230\u5f02\u5e38\u4e86\uff0c\u90a3\u4e48\u5c31\u8c03\u7528_not_authenticated\u65b9\u6cd5\u3002 self._not_authenticated() # \u5411\u4e0a\u7ea7\u629b\u51fa\u5f02\u5e38 raise if user_auth_tuple is not None: # \u5982\u679c\u6709\u8fd4\u56de\u503c\uff0c\u90a3\u4e48\u8bc1\u660e\u6267\u884c\u8fc7\u76f8\u5173\u8ba4\u8bc1\u8d4b\u503c\u64cd\u4f5c # \u5982\u679c\u8fd4\u56deNone\u7684\u8bdd\uff0c\u90a3\u4e48\u5faa\u73af\u7ee7\u7eed\uff0c\u8868\u793a\u5f53\u524d\u8ba4\u8bc1\u4e0d\u5904\u7406\uff0c\u4ea4\u7ed9\u4e0b\u4e00\u4e2a\u8ba4\u8bc1\u7c7b\u53bb\u5904\u7406\u3002 # \u8d4b\u503c\uff0crequest.user\u548crequest.auth\u5c31\u662f\u8fd9\u4e48\u6765\u7684\u3002\u56e0\u6b64\u6709\u8fd4\u56de\u503c\u5fc5\u987b\u662f\u4e00\u4e2a\u5143\u7ec4 # \u5143\u7ec4\u91cc\u9762\u5fc5\u987b\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u7b2c\u4e00\u4e2a\u7ed9request.user\uff0c\u7b2c\u4e8c\u4e2a\u7ed9request.auth # \u5bf9\u5e94\u7684request.user\u5c31\u662fuser\u5bf9\u8c61\uff0crequest.auth\u5c31\u662ftoken\u5bf9\u8c61\u3002 self._authenticator = authenticator self.user, self.auth = user_auth_tuple return # \u4e5f\u6709\u53ef\u80fd\u90fd\u4e0d\u5904\u7406\uff0c\u8fd4\u56de\u7684\u90fd\u662fNone\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u9ed8\u8ba4\u8d4b\u503c self._not_authenticated() \u6211\u4eec\u5728_authenticate\u4e2d\u53d1\u73b0\uff0c\u5faa\u73af\u904d\u5386\u4e86\u6211\u4eec\u5c01\u88c5\u7684self.authenticators\u4e2d\u7684\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u5bf9\u8c61\u7684authenticate\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u6211\u4eec\u81ea\u5df1\u5199\u7684\u7c7b\u91cc\u9762\u8981\u6709\u4e00\u4e2aauthenticate\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5e94\u8be5\u8fd4\u56de\u4ec0\u4e48\uff1f\u4e0a\u9762\u7684\u65b9\u6cd5\u652f\u6301\u4e09\u79cd\u8fd4\u56de\u503c\uff1a \u81ea\u5df1\u8fd4\u56de\u5143\u7ec4\uff1a\u5143\u7ec4\u4e2d\u5305\u542b\u8ba4\u8bc1\u7528\u6237\u7684user\u5bf9\u8c61\uff0c\u4ee5\u53ca\u8ba4\u8bc1\u7ed3\u679c\u7684\u8ba4\u8bc1\u5bf9\u8c61\uff08\u6bd4\u5982token\u8868\u4e2d\u7684\u5bf9\u8c61\uff09\u3002 \u629b\u51fa\u5f02\u5e38\uff1a\u8c03\u7528 self._not_authenticated() \uff0c\u629b\u51fa\u7684\u5f02\u5e38\u4f1a\u5728_authenticate\u4e2d\u6355\u83b7\u5230\u3002 \u8fd4\u56deNone\uff0c\u4e5f\u5c31\u662f\u6240\u6709\u7684\u8ba4\u8bc1\u89c4\u5219\u5168\u90e8\u901a\u8fc7\uff0c\u4f46\u662f\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u6b64\u65f6\u8c03\u7528 self._not_authenticated() . \u6765\u770b\u770b self._not_authenticated() \u90fd\u5e72\u4e86\u70b9\u4ec0\u4e48\uff1f def _not_authenticated(self): # \u8bbe\u7f6e\u9ed8\u8ba4\u7684_authenticator\u4e3a\u7a7a\uff0c self._authenticator = None # \u5982\u679c\u8bbe\u7f6e\u4e86UNAUTHENTICATED_USER\u90a3\u4e48\u5c31\u8c03\u7528\uff08AnonymousUser\uff09\uff0c\u5426\u5219\u5c31\u8fd4\u56deNone if api_settings.UNAUTHENTICATED_USER: self.user = api_settings.UNAUTHENTICATED_USER() else: self.user = None # \u5982\u679c\u8bbe\u7f6e\u4e86UNAUTHENTICATED_TOKEN\u90a3\u4e48\u5c31\u8c03\u7528\uff0c\u5426\u5219\u5c31\u8fd4\u56deNone if api_settings.UNAUTHENTICATED_TOKEN: self.auth = api_settings.UNAUTHENTICATED_TOKEN() else: self.auth = None \u5176\u5b9e\u4e3a\u9ed8\u8ba4\u7684\u7528\u6237\u505a\u4e00\u4e2a\u8bbe\u7f6e\uff0c\u7ed9\u901a\u8fc7\u8ba4\u8bc1\u5374\u6ca1\u6709\u8fd4\u56de\u5177\u4f53\u8ba4\u8bc1\u4fe1\u606f\u7684\u4eba\u4e00\u4e2a\u8eab\u4efd\uff08\u533f\u540d\u7528\u6237\uff09\u3002\u5230\u6b64\u4e3a\u6b62\uff0c\u8ba4\u8bc1\u662fok\u4e86\u3002\u4e0d\u8fc7\u521a\u624d\u8d70\u7684authenticate_classes\u662f\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684\uff0c\u96be\u9053\u6211\u4eec\u6bcf\u5199\u4e00\u4e2a\u7c7b\u90fd\u8981\u81ea\u5df1\u8fd9\u6837\u5b9a\u4e49\u4e00\u4e0b\u4e48\uff1f\u5176\u5b9e\u4e0d\u662f\u7684\uff0c\u9488\u5bf9\u8fd9\u4e2a\u8ba4\u8bc1\u89c4\u5219\u662f\u6709\u4e00\u4e2a\u5168\u5c40\u8bbe\u7f6e\u7684\u3002 \u4e4b\u524d\u7684authenticate_classes\u662f\u9ed8\u8ba4\u4f18\u5148\u627e\u81ea\u5df1\u5b9a\u4e49\u7684cbv\u4e2d\u7684\u8fd9\u4e2a\u5c5e\u6027\uff0c\u5047\u5982\u8bf4\u6ca1\u6709\u7684\u8bdd\u90a3\u4e48\u5c31\u5e94\u8be5\u53bb\u7236\u7c7b\u53bb\u627e\u4e86\uff0c\u90a3\u4e48\u7236\u7c7b\u4e2d\u662f\u5982\u4f55\u5b9a\u4e49\u7684\uff1f\u6700\u540e\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u5185\u7f6e\u7684authentication_classess\uff0c\u5b83\u662f\u4e00\u4e2aapi_settings\u7684\u4e00\u4e2a\u914d\u7f6e\u9879\uff1a class APIView(View): # The following policies may be set at either globally, or per-view. renderer_classes = api_settings.DEFAULT_RENDERER_CLASSES parser_classes = api_settings.DEFAULT_PARSER_CLASSES authentication_classes = api_settings.DEFAULT_AUTHENTICATION_CLASSES \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 api_settings = APISettings(None, DEFAULTS, IMPORT_STRINGS) def reload_api_settings(*args, **kwargs): setting = kwargs['setting'] # \u4f1a\u53bb\u914d\u7f6e\u6587\u4ef6\u4e2d\u627eREST_FRAMEWORK\u8fd9\u6837\u4e00\u4e2akey\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u914d\u7f6e\u9879\u5199\u5230\u8fd9\u91cc\u3002 if setting == 'REST_FRAMEWORK': api_settings.reload() \u9ed8\u8ba4\u8fd9\u4e2a\u53d8\u91cf\u662f\u6ca1\u6709\u4e1c\u897f\u7684\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u53bb\u52a0\uff0c\u52a0\u7684\u65b9\u6cd5\u5982\u4e0b\uff1a # settings.py\u6587\u4ef6\u6700\u540e\u8fdb\u884c\u6dfb\u52a0 REST_FRAMEWORK = { # \u8fd9\u91cc\u5199\u7684\u662f\u8ba4\u8bc1\u7c7b\u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u5355\u72ec\u6254\u5230\u4e00\u4e2apy\u6587\u4ef6\u91cc 'DEFAULT_AUTHENTICATION_CLASSES': ['api.utils.auth.FirstAuth', 'api.utils.xxx.xxx'], # \u63a8\u8350\u4f7f\u7528None\uff0c\u8fd9\u4e2a\u73a9\u610f\u662f\u53ef\u4ee5\u8c03\u7528\u7684\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u5199\u4e00\u4e2alambda\u8868\u8fbe\u5f0f\u8fd4\u56de\u6211\u4eec\u81ea\u5b9a\u4e49\u7684\u4fe1\u606f\u5c31\u53ef\u4ee5\u4e86\u3002 'UNAUTHENTICATED_USER': None, # request.user = None 'UNAUTHENTICATED_TOKEN': None, # request.auth = None } \u8ba4\u8bc1\u7c7b\u4e0d\u8981\u548cview\u5199\u5230\u4e00\u8d77\uff0c\u8fd9\u6837\u89c6\u56fe\u51fd\u6570\u5c31\u53ea\u6709\u89c6\u56fe\u76f8\u5173\u7684\u903b\u8f91\uff0c\u800c\u8ba4\u8bc1\u76f8\u5173\u7684\u88ab\u5265\u79bb\u5230auth.py\u4e2d\u4e86\u3002\u56e0\u6b64\u5728api\u9879\u76ee\u4e0b\u65b0\u5efa\u4e00\u4e2autils\u7684\u76ee\u5f55\uff0c\u65b0\u5efa\u4e00\u4e2aauth.py\u5c06\u6211\u4eec\u7684\u8ba4\u8bc1\u903b\u8f91\u90fd\u6254\u5230auth.py\u91cc\u9762\u53bb\uff0c\u8fd9\u91cc\u7684\u503c\u6211\u4eec\u77e5\u9053\u5bf9\u5e94\u7684\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u91cc\u9762\u5199\u7684\u90fd\u662f\u7c7b\u7684\u5168\u8def\u5f84\uff08\u7c7b\u4f3cmiddleware\u90a3\u79cd\u5199\u6cd5\uff09\u3002 \u8fd9\u6837\u6211\u4eec\u5b9e\u9645\u7684\u6bcf\u4e00\u4e2a\u4e1a\u52a1\u7c7b\u5c31\u4e0d\u7528\u5199\u8fd9\u4e9b\u5185\u5bb9\u4e86\uff0c\u76f8\u5f53\u4e8e\u5168\u5c40\u6dfb\u52a0\u4e86\u8ba4\u8bc1\uff0c\u4f46\u662f\u4e5f\u6709\u4f8b\u5916\u7684\u9875\u9762\uff0c\u6bd4\u5982\u8ba4\u8bc1\u9875\u9762\uff0c\u8ba4\u8bc1\u9875\u9762\u662f\u4e0d\u9700\u8981\u6dfb\u52a0\u8ba4\u8bc1\u673a\u5236\u7684\uff0c\u4f60\u5f97\u5148\u901a\u8fc7\u4e86\u8ba4\u8bc1\u9875\u9762\u62ff\u5230\u4e86token\u8bbf\u95ee\u522b\u7684\u9700\u8981\u8ba4\u8bc1\u7684\u9875\u9762\u7684\u65f6\u5019\u624d\u9700\u8981\u8ba4\u8bc1\uff0c\u4f60\u73b0\u5728\u90fd\u6ca1\u767b\u5f55\uff0c\u6211\u8ba4\u8bc1\u9875\u9762\u8fd8\u4e0d\u8ba9\u4f60\u8bbf\u95ee\u90a3\u5c31\u6ca1\u529e\u6cd5\u8bbf\u95ee\u4e86\u3002\u56e0\u6b64\u9488\u5bf9\u4e00\u4e9b\u4e1a\u52a1\u7c7b\u9700\u8981\u653e\u5f00\u8fd9\u4e2a\u6743\u9650\uff0c\u653e\u5f00\u7684\u65b9\u6cd5\u4e5f\u5f88\u7b80\u5355\uff0c\u5b9a\u4e49\u4e00\u4e2a\u7a7a\u5217\u8868\u5c31\u884c\u4e86\u3002\u56e0\u4e3a\u5728\u7c7b\u7684\u5185\u90e8\u5b9a\u4e49\u4e86\uff0c\u56e0\u6b64\u4f1a\u4f18\u5148\u8d70\u7c7b\u5185\u90e8\u7684\uff0c\u5b9e\u73b0\u4e86\u5355\u72ec\u7684\u7c7b\u7684\u7279\u6b8a\u653e\u5f00\u3002 class AuthView(APIView): # \u76f4\u63a5\u8df3\u8fc7\u9a8c\u8bc1 authentication_classes = [] def post(self, request, *args, **kwargs): \u2026\u2026\u2026\u2026\u2026\u2026 def get(self, request, *args, **kwargs): \u2026\u2026\u2026\u2026\u2026\u2026","title":"\u8ba4\u8bc1\u6e90\u7801\u89e3\u6790"},{"location":"django/07-DRF/02-DRF\u8ba4\u8bc1/#_3","text":"from rest_framework.authentication import BaseAuthentication \u4e3a\u4e86\u89c4\u8303\u90fd\u8981\u7ee7\u627f\u9ed8\u8ba4\u7684BaseAuthentication\u7c7b\u3002authenticate_header\u662f\u8ba4\u8bc1\u5931\u8d25\uff08\u8fd9\u4e2a\u662f\u6d4f\u89c8\u5668\u7684\u4e00\u79cd\u8ba4\u8bc1\u673a\u5236\uff09\u7684\u65f6\u5019\u7ed9\u4f60\u7684\u6d4f\u89c8\u5668\u8fd4\u56de\u7684\u54cd\u5e94\u5934\u3002BaseAuthentication\u8fd9\u4e2a\u7c7b\u5176\u5b9e\u5565\u90fd\u6ca1\u5199\uff0c\u5c31\u662f\u5b9a\u4e49\u4e86\u4e24\u4e2a\u65b9\u6cd5\uff0c\u4e00\u4e2aauthenticate\u4e00\u4e2aauthenticate_header\u65b9\u6cd5\u3002\u800c\u4e14authenticate\u5fc5\u987b\u8981\u91cd\u5199\uff0c\u5426\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 \u5176\u4ed6\u7684\u5185\u7f6e\u8ba4\u8bc1\u7c7b\u578b\u8fd8\u5305\u62ecSession\u7684\uff0cToken\u7684\uff0cRemoteUser\u7684\uff0c\u4e0d\u8fc7\u8fd9\u4e9b\u8ba4\u8bc1\u90fd\u662f\u57fa\u4e8eDjango\u7684\uff0c\u4ee5Session\u4e3a\u4f8b\uff0c\u5b83\u4f1a\u53bb\u83b7\u53d6request.user\u8fd9\u4e2a\u9009\u9879\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u81ea\u5df1\u53bb\u5199session\u7684\u65f6\u5019\u662f\u6ca1\u6709\u8fd9\u4e2a\u5185\u5bb9\u7684\u3002request.user\u662f\u57fa\u4e8eDjango\u7684\u3002\u518d\u6bd4\u5982RemoteUser\u662f\u57fa\u4e8eDjango\u7684auth\u53bb\u8fdb\u884c\u8ba4\u8bc1\u7684\u3002\u56e0\u6b64\u5185\u7f6e\u7684\u8fd9\u51e0\u79cd\u65b9\u6cd5\u5176\u5b9e\u90fd\u662f\u6709\u4e00\u5b9a\u5c40\u9650\u6027\u7684\uff0c\u56e0\u6b64\u8ba4\u8bc1\u7c7b\uff0c\u4e00\u822c\u662f\u6211\u4eec\u81ea\u5df1\u53bb\u5199\uff0c\u4e0d\u4f1a\u53bb\u7528\u5230DRF\u539f\u751f\u7684\u3002 \u8bf4\u4e00\u4e0b BasicAuthentication \uff0c\u8fd9\u4e2a\u662f\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684\u8d26\u53f7\u5bc6\u7801\u8ba4\u8bc1\uff0c\u5728\u8bbf\u95ee\u9875\u9762\u7684\u65f6\u5019\u4f1a\u4ee5\u6d4f\u89c8\u5668\u7684\u5f62\u5f0f\u5f39\u51fa\u6765\u4e00\u4e2a\u8d26\u53f7\u5bc6\u7801\u7684\u8ba4\u8bc1\u8f93\u5165\u6846\uff0c\u6d4f\u89c8\u5668\u4f1a\u628a\u8f93\u5165\u7684\u8d26\u53f7\u5bc6\u7801\u8fdb\u884c\u52a0\u5bc6\u6254\u5230\u8bf7\u6c42\u5934\uff0c\u52a0\u5bc6\u7684\u5f62\u5f0f\u5982\u4e0b\uff1a HTTP_AUTHORIZATION: basic (\u7528\u6237\u540d+\u5bc6\u7801)base64\u8f6c\u7801 \u5728BasicAuthentication\u4e2d\u4f1a\u53bb\u83b7\u53d6\u8fd9\u4e00\u90e8\u5206\uff1a def get_authorization_header(request): Return request's 'Authorization:' header, as a bytestring. Hide some test client ickyness where the header can be unicode. # \u4ecerequest.META\u4e2d\u628a\u8fd9\u4e2aHTTP_AUTHORIZATION\u53d6\u51fa\u6765\u3002 auth = request.META.get('HTTP_AUTHORIZATION', b'') if isinstance(auth, text_type): # Work around django test client oddness auth = auth.encode(HTTP_HEADER_ENCODING) return auth \u62ff\u5230base64\u8f6c\u7801\u540e\u7684\u5185\u5bb9\u8fdb\u884c\u89e3\u7801\u7684\u64cd\u4f5c\u3002 class BasicAuthentication(BaseAuthentication): HTTP Basic authentication against username/password. www_authenticate_realm = 'api' def authenticate(self, request): Returns a `User` if a correct username and password have been supplied using HTTP Basic authentication. Otherwise returns `None`. auth = get_authorization_header(request).split() # \u5982\u679c\u8fd4\u56de\u4e3aNone\u6216\u8005\u4e0d\u662fbasic\u8ba4\u8bc1\uff0c\u90a3\u4e48return None if not auth or auth[0].lower() != b'basic': return None if len(auth) == 1: msg = _('Invalid basic header. No credentials provided.') raise exceptions.AuthenticationFailed(msg) elif len(auth) 2: msg = _('Invalid basic header. Credentials string should not contain spaces.') raise exceptions.AuthenticationFailed(msg) try: # \u5f00\u59cbbase64\u89e3\u7801\uff0c\u6ce8\u610fsplit\u548cpartition\u7c7b\u4f3c\uff0csplit\u4e0d\u4f1a\u53d6\u5206\u9694\u7b26\uff0c\u4f46\u662fpartition\u4f1a\u53d6 auth_parts = base64.b64decode(auth[1]).decode(HTTP_HEADER_ENCODING).partition(':') except (TypeError, UnicodeDecodeError, binascii.Error): msg = _('Invalid basic header. Credentials not correctly base64 encoded.') raise exceptions.AuthenticationFailed(msg) userid, password = auth_parts[0], auth_parts[2] return self.authenticate_credentials(userid, password, request)","title":"\u5185\u7f6e\u8ba4\u8bc1\u7c7b"},{"location":"django/07-DRF/02-DRF\u8ba4\u8bc1/#_4","text":"","title":"\u5c0f\u7ed3"},{"location":"django/07-DRF/02-DRF\u8ba4\u8bc1/#authenticate","text":"None\uff1a\u6211\u4e0d\u7ba1\u4e86\uff0c\u4e0b\u4e00\u4e2a\u8ba4\u8bc1\u6765\u6267\u884c \u629b\u51fa\u5f02\u5e38\uff0c raise exception.AuthenticationFailed('Auth Failed') \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c(user obj\uff0cauth obj)\uff0c\u56e0\u6b64\u5143\u7d20\u4e00\u8d4b\u503c\u7ed9request.user\uff0c\u5143\u7d20\u4e8c\u8d4b\u503c\u7ed9request.auth","title":"authenticate\u8fd4\u56de\u503c"},{"location":"django/07-DRF/02-DRF\u8ba4\u8bc1/#_5","text":"\u5c40\u90e8\u4f7f\u7528\uff1a\u89c6\u56fe\u7c7b\u4e2d\u5199\u4e00\u4e2a\u9759\u6001\u5b57\u6bb5\uff0cauthentication_classes\uff0c\u5217\u8868\u91cc\u9762\u662f\u7c7b\u7684\u540d\u79f0\uff0c\u8fd9\u91cc\u548c\u5168\u5c40\u4e0d\u4e00\u6837\u3002 \u5168\u5c40\u4f7f\u7528\uff0c\u5728settings\u4e2d\u914d\u7f6e\uff1a python REST_FRAMEWORK = { # \u8fd9\u91cc\u5199\u7684\u662f\u8ba4\u8bc1\u7c7b\u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u5355\u72ec\u6254\u5230\u4e00\u4e2apy\u6587\u4ef6\u91cc 'DEFAULT_AUTHENTION_CLASSES': ['api.utils.auth.Authtication', ], 'UNAUTHENTICATED_USER': None, 'UNAUTHENTICATED_TOKEN': None, } Django\u7684\u751f\u547d\u5468\u671f\uff1a wsgi \u4e2d\u95f4\u4ef6 dispath(drf\u7684dispatch)","title":"\u4f7f\u7528\u8303\u56f4"},{"location":"django/07-DRF/03-DRF\u6743\u9650/","text":"DjangoRestFrameWork\u6743\u9650 \u6743\u9650\u7684\u57fa\u672c\u4f7f\u7528 \u6ce8\u610f\u5168\u5c40\u7684\u662f\u5728settings\u914d\u7f6e\u6587\u4ef6\u914d\u7f6e\u5373\u53ef\uff0c\u5982\u679c\u662f\u5c40\u90e8\u7684\u662f\u5355\u72ec\u5728\u81ea\u5df1\u5b9a\u4e49\u7684\u7c7b\u4e2d\u52a0\u3002\u5168\u5c40\u7684\u5c31\u662f\u6240\u6709\u4eba\u7528\uff0c\u5982\u679c\u662f\u6709\u7279\u6b8a\u7684\u90a3\u5c31\u5355\u72ec\u7ed9\u67d0\u4e00\u4e2a\u7279\u6b8a\u7684\u52a0\u4e00\u4e2aperimission_class\u7684\u5217\u8868\u5c31\u53ef\u4ee5\u4e86\u3002 \u6e90\u7801\u6d41\u7a0b \u5728\u6e90\u7801\u6d41\u7a0b\u90e8\u5206\u5176\u5b9e\u548c\u8ba4\u8bc1\u90e8\u5206\u662f\u5927\u540c\u5c0f\u5f02\u7684\uff0c\u5165\u53e3\u4f9d\u65e7\u662fdispatch\u3002 \u627e\u5230dispatch\u4e2d\u5c01\u88c5\u7684initial\u65b9\u6cd5 def initial(self, request, *args, **kwargs): \u6b64\u5904\u7701\u7565\u5f88\u591a\u4ee3\u7801~~~~~ self.perform_authentication(request) # \u627e\u5230\u8fd9\u4e00\u6b65\u9aa4 self.check_permissions(request) self.check_throttles(request) \u770b\u770bcheck_permissions\u505a\u4e86\u4ec0\u4e48 def check_permissions(self, request): Check if the request should be permitted. Raises an appropriate exception if the request is not permitted. for permission in self.get_permissions(): if not permission.has_permission(request, self): self.permission_denied( request, message=getattr(permission, 'message', None) ) \u6211\u4eec\u53d1\u73b0\u5b83\u53c8\u5728self\uff08\u4e5f\u5c31\u662f\u6211\u4eecCBV\u7684\u5bf9\u8c61\u91cc\uff09\u627e\u8fd9\u4e2aget_permissions\u4e86\uff0c\u5982\u679c\u6211\u4eec\u81ea\u5df1\u6ca1\u6709\u5b9a\u4e49\u7684\u8bdd\u90a3\u4e48\u5c31\u4f1a\u53bb\u7236\u7c7b\u91cc\u9762\u627e\u3002\u627e\u5230\u7236\u7c7b\u7684APIView\uff0c\u5bf9\u5e94\u7684\u6709\u8fd9\u4e48\u4e00\u6761\uff1a class APIView(View): \u2026\u2026\u2026\u2026\u2026\u2026 permission_classes = api_settings.DEFAULT_PERMISSION_CLASSES \u2026\u2026\u2026\u2026\u2026\u2026 \u8fd9\u6837\u5c31\u548c\u4e4b\u524d\u7684\u8ba4\u8bc1\u90e8\u5206\u4e00\u81f4\u4e86\uff0c\u5982\u679c\u8981\u81ea\u5df1\u5b9a\u4e49\u7684\u8bdd\u8bb0\u5f97KEY\u8981\u5199\u6210\u5bf9\u5e94\u7684\u4e0a\u9762\u7684\u540d\u5b57\uff0c\u522b\u5199\u9519\u4e86\uff0c\u5426\u5219\u662f\u4e0d\u4f1a\u751f\u6548\u7684\u3002 \u7ee7\u7eed\u6765\u770bcheck_permissions\uff1a # get_permissions()\u505a\u4e86\u4e00\u4ef6\u4e8b\u5c31\u662f\u904d\u5386self.permission_classes\u7136\u540e\u901a\u8fc7\u5217\u8868\u751f\u6210\u5f0f\u8fd4\u56de\u6240\u6709\u6743\u9650\u7c7b\u7684\u5bf9\u8c61\u5217\u8868\u3002 def get_permissions(self): Instantiates and returns the list of permissions that this view requires. return [permission() for permission in self.permission_classes] # permission_denied\u4e2d\u629b\u51fa\u4e86\u5f02\u5e38 def permission_denied(self, request, message=None): If request is not permitted, determine what kind of exception to raise. if request.authenticators and not request.successful_authenticator: raise exceptions.NotAuthenticated() raise exceptions.PermissionDenied(detail=message) for permission in self.get_permissions(): # \u8c03\u7528\u6743\u9650\u5bf9\u8c61\u7684has_permission\u65b9\u6cd5\uff0c\u5982\u679c\u8fd4\u56de\u7684\u662fTrue\uff0c\u5373\u6743\u9650\u901a\u8fc7\u5219\u7ee7\u7eed\u5faa\u73af # \u5982\u679c\u8fd4\u56deFalse\uff0c\u5219\u6743\u9650\u4e0d\u901a\u8fc7\uff0c\u8fdb\u5165if\u6761\u4ef6\u4e2d\u3002 if not permission.has_permission(request, self): # \u8c03\u7528self\u7684permission_denied\uff0c self.permission_denied( # messages\u5728permission\u4e2d\u53d6\u4e86\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u81ea\u5b9a\u4e49\u8fd9\u4e2amessage request, message=getattr(permission, 'message', None) ) \u5185\u7f6e\u6743\u9650 @six.add_metaclass(BasePermissionMetaclass) class BasePermission(object): A base class from which all permission classes should inherit. def has_permission(self, request, view): Return `True` if permission is granted, `False` otherwise. return True def has_object_permission(self, request, view, obj): Return `True` if permission is granted, `False` otherwise. return True \u4e3a\u4e86\u89c4\u8303\uff0c\u6211\u4eec\u5199\u7684\u6743\u9650\u7c7b\u90fd\u8981\u7ee7\u627fBasePermission\u7c7b\uff0c\u5176\u4ed6\u7684\u8fd8\u6709\u4e00\u4e9b\u9ed8\u8ba4\u7684\u6743\u9650\u7c7b\uff0c\u8fd9\u91cc\u4ec5\u4f5c\u53c2\u8003\uff0c\u4e00\u822c\u751f\u4ea7\u73af\u5883\u7684\u65f6\u5019\u662f\u4e0d\u4f1a\u7528\u5230\u8fd9\u4e9b\u5185\u7f6e\u7c7b\u7684\uff0c\u800c\u662f\u6839\u636e\u4e1a\u52a1\u81ea\u5df1\u5f00\u53d1\u6743\u9650\u3002 class AllowAny(BasePermission): Allow any access. This isn't strictly required, since you could use an empty permission_classes list, but it's useful because it makes the intention more explicit. def has_permission(self, request, view): return True class IsAuthenticated(BasePermission): Allows access only to authenticated users. def has_permission(self, request, view): return bool(request.user and request.user.is_authenticated) class IsAdminUser(BasePermission): Allows access only to admin users. def has_permission(self, request, view): return bool(request.user and request.user.is_staff) class IsAuthenticatedOrReadOnly(BasePermission): The request is authenticated as a user, or is a read-only request. def has_permission(self, request, view): return bool( request.method in SAFE_METHODS or request.user and request.user.is_authenticated ) class DjangoModelPermissions(BasePermission): The request is authenticated using `django.contrib.auth` permissions. See: https://docs.djangoproject.com/en/dev/topics/auth/#permissions It ensures that the user is authenticated, and has the appropriate `add`/`change`/`delete` permissions on the model. This permission can only be applied against view classes that provide a `.queryset` attribute. # Map methods into required permission codes. # Override this if you need to also provide 'view' permissions, # or if you want to provide custom permission codes. perms_map = { 'GET': [], 'OPTIONS': [], 'HEAD': [], 'POST': ['%(app_label)s.add_%(model_name)s'], 'PUT': ['%(app_label)s.change_%(model_name)s'], 'PATCH': ['%(app_label)s.change_%(model_name)s'], 'DELETE': ['%(app_label)s.delete_%(model_name)s'], } authenticated_users_only = True def get_required_permissions(self, method, model_cls): Given a model and an HTTP method, return the list of permission codes that the user is required to have. kwargs = { 'app_label': model_cls._meta.app_label, 'model_name': model_cls._meta.model_name } if method not in self.perms_map: raise exceptions.MethodNotAllowed(method) return [perm % kwargs for perm in self.perms_map[method]] def _queryset(self, view): assert hasattr(view, 'get_queryset') \\ or getattr(view, 'queryset', None) is not None, ( 'Cannot apply {} on a view that does not set ' '`.queryset` or have a `.get_queryset()` method.' ).format(self.__class__.__name__) if hasattr(view, 'get_queryset'): queryset = view.get_queryset() assert queryset is not None, ( '{}.get_queryset() returned None'.format(view.__class__.__name__) ) return queryset return view.queryset def has_permission(self, request, view): # Workaround to ensure DjangoModelPermissions are not applied # to the root view when using DefaultRouter. if getattr(view, '_ignore_model_permissions', False): return True if not request.user or ( not request.user.is_authenticated and self.authenticated_users_only): return False queryset = self._queryset(view) perms = self.get_required_permissions(request.method, queryset.model) return request.user.has_perms(perms) class DjangoModelPermissionsOrAnonReadOnly(DjangoModelPermissions): Similar to DjangoModelPermissions, except that anonymous users are allowed read-only access. authenticated_users_only = False class DjangoObjectPermissions(DjangoModelPermissions): The request is authenticated using Django's object-level permissions. It requires an object-permissions-enabled backend, such as Django Guardian. It ensures that the user is authenticated, and has the appropriate `add`/`change`/`delete` permissions on the object using .has_perms. This permission can only be applied against view classes that provide a `.queryset` attribute. perms_map = { 'GET': [], 'OPTIONS': [], 'HEAD': [], 'POST': ['%(app_label)s.add_%(model_name)s'], 'PUT': ['%(app_label)s.change_%(model_name)s'], 'PATCH': ['%(app_label)s.change_%(model_name)s'], 'DELETE': ['%(app_label)s.delete_%(model_name)s'], } def get_required_object_permissions(self, method, model_cls): kwargs = { 'app_label': model_cls._meta.app_label, 'model_name': model_cls._meta.model_name } if method not in self.perms_map: raise exceptions.MethodNotAllowed(method) return [perm % kwargs for perm in self.perms_map[method]] def has_object_permission(self, request, view, obj): # authentication checks have already executed via has_permission queryset = self._queryset(view) model_cls = queryset.model user = request.user perms = self.get_required_object_permissions(request.method, model_cls) if not user.has_perms(perms, obj): # If the user does not have permissions we need to determine if # they have read permissions to see 403, or not, and simply see # a 404 response. if request.method in SAFE_METHODS: # Read permissions already checked and failed, no need # to make another lookup. raise Http404 read_perms = self.get_required_object_permissions('GET', model_cls) if not user.has_perms(read_perms, obj): raise Http404 # Has read permissions. return False return True","title":"DjangoRestFrameWork\u6743\u9650"},{"location":"django/07-DRF/03-DRF\u6743\u9650/#djangorestframework","text":"","title":"DjangoRestFrameWork\u6743\u9650"},{"location":"django/07-DRF/03-DRF\u6743\u9650/#_1","text":"\u6ce8\u610f\u5168\u5c40\u7684\u662f\u5728settings\u914d\u7f6e\u6587\u4ef6\u914d\u7f6e\u5373\u53ef\uff0c\u5982\u679c\u662f\u5c40\u90e8\u7684\u662f\u5355\u72ec\u5728\u81ea\u5df1\u5b9a\u4e49\u7684\u7c7b\u4e2d\u52a0\u3002\u5168\u5c40\u7684\u5c31\u662f\u6240\u6709\u4eba\u7528\uff0c\u5982\u679c\u662f\u6709\u7279\u6b8a\u7684\u90a3\u5c31\u5355\u72ec\u7ed9\u67d0\u4e00\u4e2a\u7279\u6b8a\u7684\u52a0\u4e00\u4e2aperimission_class\u7684\u5217\u8868\u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u6743\u9650\u7684\u57fa\u672c\u4f7f\u7528"},{"location":"django/07-DRF/03-DRF\u6743\u9650/#_2","text":"\u5728\u6e90\u7801\u6d41\u7a0b\u90e8\u5206\u5176\u5b9e\u548c\u8ba4\u8bc1\u90e8\u5206\u662f\u5927\u540c\u5c0f\u5f02\u7684\uff0c\u5165\u53e3\u4f9d\u65e7\u662fdispatch\u3002 \u627e\u5230dispatch\u4e2d\u5c01\u88c5\u7684initial\u65b9\u6cd5 def initial(self, request, *args, **kwargs): \u6b64\u5904\u7701\u7565\u5f88\u591a\u4ee3\u7801~~~~~ self.perform_authentication(request) # \u627e\u5230\u8fd9\u4e00\u6b65\u9aa4 self.check_permissions(request) self.check_throttles(request) \u770b\u770bcheck_permissions\u505a\u4e86\u4ec0\u4e48 def check_permissions(self, request): Check if the request should be permitted. Raises an appropriate exception if the request is not permitted. for permission in self.get_permissions(): if not permission.has_permission(request, self): self.permission_denied( request, message=getattr(permission, 'message', None) ) \u6211\u4eec\u53d1\u73b0\u5b83\u53c8\u5728self\uff08\u4e5f\u5c31\u662f\u6211\u4eecCBV\u7684\u5bf9\u8c61\u91cc\uff09\u627e\u8fd9\u4e2aget_permissions\u4e86\uff0c\u5982\u679c\u6211\u4eec\u81ea\u5df1\u6ca1\u6709\u5b9a\u4e49\u7684\u8bdd\u90a3\u4e48\u5c31\u4f1a\u53bb\u7236\u7c7b\u91cc\u9762\u627e\u3002\u627e\u5230\u7236\u7c7b\u7684APIView\uff0c\u5bf9\u5e94\u7684\u6709\u8fd9\u4e48\u4e00\u6761\uff1a class APIView(View): \u2026\u2026\u2026\u2026\u2026\u2026 permission_classes = api_settings.DEFAULT_PERMISSION_CLASSES \u2026\u2026\u2026\u2026\u2026\u2026 \u8fd9\u6837\u5c31\u548c\u4e4b\u524d\u7684\u8ba4\u8bc1\u90e8\u5206\u4e00\u81f4\u4e86\uff0c\u5982\u679c\u8981\u81ea\u5df1\u5b9a\u4e49\u7684\u8bdd\u8bb0\u5f97KEY\u8981\u5199\u6210\u5bf9\u5e94\u7684\u4e0a\u9762\u7684\u540d\u5b57\uff0c\u522b\u5199\u9519\u4e86\uff0c\u5426\u5219\u662f\u4e0d\u4f1a\u751f\u6548\u7684\u3002 \u7ee7\u7eed\u6765\u770bcheck_permissions\uff1a # get_permissions()\u505a\u4e86\u4e00\u4ef6\u4e8b\u5c31\u662f\u904d\u5386self.permission_classes\u7136\u540e\u901a\u8fc7\u5217\u8868\u751f\u6210\u5f0f\u8fd4\u56de\u6240\u6709\u6743\u9650\u7c7b\u7684\u5bf9\u8c61\u5217\u8868\u3002 def get_permissions(self): Instantiates and returns the list of permissions that this view requires. return [permission() for permission in self.permission_classes] # permission_denied\u4e2d\u629b\u51fa\u4e86\u5f02\u5e38 def permission_denied(self, request, message=None): If request is not permitted, determine what kind of exception to raise. if request.authenticators and not request.successful_authenticator: raise exceptions.NotAuthenticated() raise exceptions.PermissionDenied(detail=message) for permission in self.get_permissions(): # \u8c03\u7528\u6743\u9650\u5bf9\u8c61\u7684has_permission\u65b9\u6cd5\uff0c\u5982\u679c\u8fd4\u56de\u7684\u662fTrue\uff0c\u5373\u6743\u9650\u901a\u8fc7\u5219\u7ee7\u7eed\u5faa\u73af # \u5982\u679c\u8fd4\u56deFalse\uff0c\u5219\u6743\u9650\u4e0d\u901a\u8fc7\uff0c\u8fdb\u5165if\u6761\u4ef6\u4e2d\u3002 if not permission.has_permission(request, self): # \u8c03\u7528self\u7684permission_denied\uff0c self.permission_denied( # messages\u5728permission\u4e2d\u53d6\u4e86\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u81ea\u5b9a\u4e49\u8fd9\u4e2amessage request, message=getattr(permission, 'message', None) )","title":"\u6e90\u7801\u6d41\u7a0b"},{"location":"django/07-DRF/03-DRF\u6743\u9650/#_3","text":"@six.add_metaclass(BasePermissionMetaclass) class BasePermission(object): A base class from which all permission classes should inherit. def has_permission(self, request, view): Return `True` if permission is granted, `False` otherwise. return True def has_object_permission(self, request, view, obj): Return `True` if permission is granted, `False` otherwise. return True \u4e3a\u4e86\u89c4\u8303\uff0c\u6211\u4eec\u5199\u7684\u6743\u9650\u7c7b\u90fd\u8981\u7ee7\u627fBasePermission\u7c7b\uff0c\u5176\u4ed6\u7684\u8fd8\u6709\u4e00\u4e9b\u9ed8\u8ba4\u7684\u6743\u9650\u7c7b\uff0c\u8fd9\u91cc\u4ec5\u4f5c\u53c2\u8003\uff0c\u4e00\u822c\u751f\u4ea7\u73af\u5883\u7684\u65f6\u5019\u662f\u4e0d\u4f1a\u7528\u5230\u8fd9\u4e9b\u5185\u7f6e\u7c7b\u7684\uff0c\u800c\u662f\u6839\u636e\u4e1a\u52a1\u81ea\u5df1\u5f00\u53d1\u6743\u9650\u3002 class AllowAny(BasePermission): Allow any access. This isn't strictly required, since you could use an empty permission_classes list, but it's useful because it makes the intention more explicit. def has_permission(self, request, view): return True class IsAuthenticated(BasePermission): Allows access only to authenticated users. def has_permission(self, request, view): return bool(request.user and request.user.is_authenticated) class IsAdminUser(BasePermission): Allows access only to admin users. def has_permission(self, request, view): return bool(request.user and request.user.is_staff) class IsAuthenticatedOrReadOnly(BasePermission): The request is authenticated as a user, or is a read-only request. def has_permission(self, request, view): return bool( request.method in SAFE_METHODS or request.user and request.user.is_authenticated ) class DjangoModelPermissions(BasePermission): The request is authenticated using `django.contrib.auth` permissions. See: https://docs.djangoproject.com/en/dev/topics/auth/#permissions It ensures that the user is authenticated, and has the appropriate `add`/`change`/`delete` permissions on the model. This permission can only be applied against view classes that provide a `.queryset` attribute. # Map methods into required permission codes. # Override this if you need to also provide 'view' permissions, # or if you want to provide custom permission codes. perms_map = { 'GET': [], 'OPTIONS': [], 'HEAD': [], 'POST': ['%(app_label)s.add_%(model_name)s'], 'PUT': ['%(app_label)s.change_%(model_name)s'], 'PATCH': ['%(app_label)s.change_%(model_name)s'], 'DELETE': ['%(app_label)s.delete_%(model_name)s'], } authenticated_users_only = True def get_required_permissions(self, method, model_cls): Given a model and an HTTP method, return the list of permission codes that the user is required to have. kwargs = { 'app_label': model_cls._meta.app_label, 'model_name': model_cls._meta.model_name } if method not in self.perms_map: raise exceptions.MethodNotAllowed(method) return [perm % kwargs for perm in self.perms_map[method]] def _queryset(self, view): assert hasattr(view, 'get_queryset') \\ or getattr(view, 'queryset', None) is not None, ( 'Cannot apply {} on a view that does not set ' '`.queryset` or have a `.get_queryset()` method.' ).format(self.__class__.__name__) if hasattr(view, 'get_queryset'): queryset = view.get_queryset() assert queryset is not None, ( '{}.get_queryset() returned None'.format(view.__class__.__name__) ) return queryset return view.queryset def has_permission(self, request, view): # Workaround to ensure DjangoModelPermissions are not applied # to the root view when using DefaultRouter. if getattr(view, '_ignore_model_permissions', False): return True if not request.user or ( not request.user.is_authenticated and self.authenticated_users_only): return False queryset = self._queryset(view) perms = self.get_required_permissions(request.method, queryset.model) return request.user.has_perms(perms) class DjangoModelPermissionsOrAnonReadOnly(DjangoModelPermissions): Similar to DjangoModelPermissions, except that anonymous users are allowed read-only access. authenticated_users_only = False class DjangoObjectPermissions(DjangoModelPermissions): The request is authenticated using Django's object-level permissions. It requires an object-permissions-enabled backend, such as Django Guardian. It ensures that the user is authenticated, and has the appropriate `add`/`change`/`delete` permissions on the object using .has_perms. This permission can only be applied against view classes that provide a `.queryset` attribute. perms_map = { 'GET': [], 'OPTIONS': [], 'HEAD': [], 'POST': ['%(app_label)s.add_%(model_name)s'], 'PUT': ['%(app_label)s.change_%(model_name)s'], 'PATCH': ['%(app_label)s.change_%(model_name)s'], 'DELETE': ['%(app_label)s.delete_%(model_name)s'], } def get_required_object_permissions(self, method, model_cls): kwargs = { 'app_label': model_cls._meta.app_label, 'model_name': model_cls._meta.model_name } if method not in self.perms_map: raise exceptions.MethodNotAllowed(method) return [perm % kwargs for perm in self.perms_map[method]] def has_object_permission(self, request, view, obj): # authentication checks have already executed via has_permission queryset = self._queryset(view) model_cls = queryset.model user = request.user perms = self.get_required_object_permissions(request.method, model_cls) if not user.has_perms(perms, obj): # If the user does not have permissions we need to determine if # they have read permissions to see 403, or not, and simply see # a 404 response. if request.method in SAFE_METHODS: # Read permissions already checked and failed, no need # to make another lookup. raise Http404 read_perms = self.get_required_object_permissions('GET', model_cls) if not user.has_perms(read_perms, obj): raise Http404 # Has read permissions. return False return True","title":"\u5185\u7f6e\u6743\u9650"},{"location":"django/07-DRF/04-DRF\u8bbf\u95ee\u9650\u5236/","text":"DRF\u8bbf\u95ee\u9650\u5236 \u63a5\u53e3\u9700\u8981\u6709\u8bbf\u95ee\u7684\u9650\u5236\uff0c\u800c\u4e0d\u662f\u968f\u610f\u7684\u65e0\u9650\u5236\u7684\u8bbf\u95ee\uff0cDRF\u63d0\u4f9b\u4e86\u8bbf\u95ee\u9650\u5236\u65b9\u9762\u7684\u5185\u5bb9\u3002 \u63a7\u5236\u8bbf\u95ee\u9891\u7387 \u9996\u5148\u6765\u770b\u9488\u5bf9\u533f\u540d\u7528\u6237\u7684\u8bbf\u95ee\u9650\u5236\u7684\u8bbe\u8ba1\u601d\u8def\uff0c\u9996\u5148\u8bf4\u8bbf\u95ee\u9650\u5236\u4e0d\u662f\u7edd\u5bf9\u7684\uff0c\u9488\u5bf9\u975e\u767b\u5f55\u7684\u533f\u540d\u7528\u6237\u6765\u8bb2\uff0cIP\u53ef\u4ee5\u8bf4\u662f\u7528\u6237\u552f\u4e00\u7684\u6807\u8bc6\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u9488\u5bf9\u8bbf\u95ee\u7684\u6e90IP\u6765\u505a\u9650\u5236\uff0c\u4f46\u662f\u7528\u6237\u7684IP\u662f\u53ef\u4ee5\u6362\u7684\uff0c\u6bd4\u5982\u7528\u6237\u66f4\u6362\u4ee3\u7406\uff0c\u90a3\u4e48\u53ef\u80fd\u7684IP\u5c31\u662f\u65e0\u9650\u591a\u4e2a\uff0c\u4f46\u662f\u8bbf\u95ee\u4eba\u662f\u540c\u4e00\u4e2a\uff0c\u56e0\u6b64\u6ca1\u6709\u529e\u6cd5\u505a\u5230\u7edd\u5bf9\u7684\u9650\u5236\u3002 \u540c\u6837\u7684\uff0c\u9488\u5bf9\u767b\u5f55\u7528\u6237\u4e5f\u662f\u4e0d\u80fd\u505a\u5230\u7edd\u5bf9\u7684\u5b8c\u5168\u7684\u9650\u5236\uff0c\u73b0\u5728\u57fa\u672c\u6bcf\u4e2a\u8d26\u53f7\u90fd\u4f1a\u7ed1\u5b9a\u624b\u673a\u53f7\uff0c\u4f46\u662f\u4f60\u62e6\u4e0d\u4f4f\u7528\u6237\u76f4\u63a5\u53bb\u67d0\u5b9d\u4e70\u624b\u673a\u53f7\uff0c\u4ee3\u7406\u6ce8\u518c\uff0c\u6240\u4ee5\u8bf4\u8fd9\u4e9b\u9650\u5236\u5728\u5e94\u7528\u5c42\u9762\u4e0a\u6765\u8bb2\uff0c\u53ea\u80fd\u8bf4\u662f\u4e00\u5b9a\u7a0b\u5ea6\u505a\u4e86\u9650\u5236\u3002 \u533f\u540d\u7528\u6237\u8bbf\u95ee\u9891\u7387\u7684\u8bbe\u8ba1\u601d\u8def\uff1a \u9996\u5148\u6355\u83b7\u7528\u6237\u7684IP\u5730\u5740\uff0c\u8fd9\u4e2aip\u5730\u5740\u53ef\u4ee5\u5728request\u7684META\u4fe1\u606f\u4e2d\u53bb\u53d6\u5230\uff0cremote_addr\u6216\u8005\u662fx_forward_for \u51c6\u5907\u4e00\u4e2a\u5b57\u5178\uff0c\u8fd9\u4e2a\u5b57\u5178\u53ef\u4ee5\u662f\u4e00\u4e2a\u5168\u5c40\u7ea7\u522b\u7684\u53d8\u91cf\uff0c\u6216\u8005\u662f\u6570\u636e\u5e93\u4ea6\u6216\u662fredis\u3002 \u6355\u83b7\u5230\u7684IP\u4f5c\u4e3akey\uff0c\u800cvalue\u4e3a\u4e00\u4e2a\u5217\u8868\u53bb\u5b58\u50a8\u7528\u6237\u7684\u8bbf\u95ee\u8bb0\u5f55 \u8bbf\u95ee\u8bb0\u5f55\u7684\u5b9e\u4f53\u4e3a\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u7528\u6237\u6bcf\u8bbf\u95ee\u4e00\u6b21\u5411value\u5217\u8868\u4e2d\u7684\u9996\u90e8\u6dfb\u52a0\u4e00\u4e2a \u5f53\u7528\u6237\u6765\u8bbf\u95ee\u7684\u65f6\u5019\u9996\u5148\u6765\u770b\u8fd9\u4e2a\u5168\u5c40\u5b57\u5178\u4e2d\u6709\u6ca1\u6709\u5bf9\u5e94\u7684IP\u7684key\uff0c\u5982\u679c\u6ca1\u6709\u7684\u8bdd\u90a3\u4e48\u5c31\u6dfb\u52a0\uff0c\u5e76\u5411\u5217\u8868\u4e2d\u8ffd\u52a0\u5f53\u524d\u7684\u65f6\u95f4\u6233\u3002 \u5982\u679c\u6709\u5f53\u524d\u7684key\u8bc1\u660e\u8fd9\u4e2aip\u7684\u533f\u540d\u7528\u6237\u4e4b\u524d\u6709\u8bbf\u95ee\u8fc7\uff0c\u90a3\u4e48\u5c31\u4ece\u540e\u5f80\u524d\u9010\u4e2a\u5bf9\u6bd4\u65f6\u95f4\u5dee\u503c\u662f\u5426\u8d85\u8fc7\u8bbe\u7f6e\u7684\u65f6\u95f4\u95f4\u9694\uff0c\u5982\u679c\u6709\u8d85\u8fc7\u7684\u5c31POP\u6389\uff0c\u8fd9\u5c31\u662f\u4e3a\u5565\u8bb0\u5f55\u65f6\u95f4\u6233\u7684\u65f6\u5019\u8981\u8bb0\u5f55\u5728\u524d\u9762\uff0c\u56e0\u4e3a\u5728\u6e05\u7406\u8fc7\u671f\u8bbf\u95ee\u8bb0\u5f55\u7684\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528pop\u65b9\u4fbf\u7684\u53bb\u5220\u9664\u8bb0\u5f55\u3002 \u53bb\u9664\u6389\u8fc7\u671f\u8bb0\u5f55\u4ee5\u540e\u53bb\u6392\u67e5\u5f53\u524d\u5217\u8868\u7684\u957f\u5ea6\uff0c\u6bd4\u5982\u4e00\u5206\u949f\u5185\u53ea\u8ba9\u8bbf\u95ee10\u6b21\uff0c\u90a3\u4e48\u5047\u5982\u5f53\u524d\u7684\u5217\u8868\u957f\u5ea6\u53ea\u6709\u5c0f\u4e8e10\u7684\u65f6\u5019\u624d\u5141\u8bb8\u4f60\u8fdb\u884c\u4e0b\u4e00\u6b21\u8bbf\u95ee \u90a3\u4e48\u5177\u4f53\u7684\u4ee3\u7801\u5b9e\u73b0\u903b\u8f91\u53ef\u4ee5\u770b\u4e0b\u9762\u7684\u7b80\u5355\u4ee3\u7801\u3002 \u6240\u6709\u5bfc\u5165\u7684\u5305\u90fd\u7701\u7565\u4e86 def md5(user): ctime = time.time() m = hashlib.md5(bytes(user, encoding='utf8')) m.update(bytes(str(ctime), encoding='utf8')) return m.hexdigest() # \u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\uff0c\u6570\u636e\u5e93\u53ef\u4ee5\uff0credis\u4e5f\u53ef\u4ee5 VISIT_RECORD = {} class VisitThrottle(BaseThrottle): def __init__(self): self.history = None def allow_request(self, request, view): \u5982\u679creturn true\u8868\u793a\u53ef\u4ee5\u7ee7\u7eed\u8bbf\u95ee\uff0c\u5982\u679c\u8fd4\u56defalse\uff0c\u8868\u793a\u8bbf\u95ee\u9891\u7387\u592a\u9ad8\uff0c\u88ab\u9650\u5236\u8bbf\u95ee :param request: :param view: :return: # 1\u3001\u83b7\u53d6\u7528\u6237IP\uff0c\u6211\u4eec\u77e5\u9053\u8bf4\u8fd9\u91cc\u7684request\u662f\u5df2\u7ecf\u88ab\u5c01\u88c5\u8fc7\u7684 # \u4f46\u662f\u6709\u4e00\u4e2a\u7279\u6027\u662f\u5f53\u627e\u4e00\u4e2a\u5c5e\u6027\u7684\u65f6\u5019\u5982\u679c\u8fd9\u4e2a\u5c01\u88c5\u8fc7\u7684request\u5b58\u5728\u7684\u8bdd # \u90a3\u4e48\u5c31\u5728\u8fd9\u91cc\u53bb\u5bfb\u627e\uff0c\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0c\u90a3\u4e48\u4f1a\u4ece\u539f\u6765\u7684request\u627e # \u56e0\u6b64\u8fd9\u91cc\u53ef\u4ee5\u7701\u7565_request\uff0c\u76f4\u63a5\u8c03\u7528META remote_addr = request.META.get('REMOTE_ADDR') current_time = time.time() # \u5982\u679c\u6355\u83b7\u5230\u7684IP\u5730\u5740\u6ca1\u6709\u518d\u8fd9\u4e2a\u8bbf\u95ee\u8bb0\u5f55\u7684\u5b57\u5178\u91cc\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u589e\u52a0\u4e00\u4e0b\u3002 if remote_addr not in VISIT_RECORD: VISIT_RECORD[remote_addr] = [current_time, ] return True # \u5982\u679c\u8bf4\u6709\u8bbf\u95ee\u8bb0\u5f55\uff0c\u90a3\u4e48\u5c31\u628a\u8bbf\u95ee\u8bb0\u5f55\u7684\u5217\u8868\u8d4b\u503c\u7ed9self.history self.history = VISIT_RECORD.get(remote_addr) # \u6e05\u7406\u8fc7\u671f\u7684\u8bbf\u95ee\u8bb0\u5f55\uff0c\u6bd4\u5982\u6211\u73b0\u5728\u5141\u8bb8\u4f60\u4e00\u5206\u949f\u4f60\u8bbf\u95ee10\u6b21\uff0c\u4e5f\u5c31\u662f60s\u5185\u8bbf\u95ee10\u6b21 # \u90a3\u4e48\u65b0\u7684\u4e00\u6b21\u8bbf\u95ee\u8fdb\u6765\u4ee5\u540e\uff0c\u9996\u5148\u6bd4\u5bf9\u65b0\u7684\u65f6\u95f4\u6233\u548c\u6700\u8001\u7684\u65f6\u95f4\u6233\uff0c\u5982\u679c\u5dee\u503c\u5927\u4e8e60s # \u90a3\u4e48\u8bc1\u660e\u8fd9\u4e2a\u8bbf\u95ee\u8bb0\u5f55\u53ef\u80fd\u5df2\u7ecf\u5f88\u4e45\u8fdc\u4e86\uff0c\u5c31\u53ef\u4ee5\u5220\u6389\u4e86\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u4f9d\u6b21\u5bf9\u6bd4\u3002 while self.history and self.history[-1] (current_time - 10): self.history.pop() # \u5c06\u8001\u65e7\u7684\u4fe1\u606f\u5220\u6389\u4ee5\u540e\uff0c\u7136\u540e\u770b\u770b\u5217\u8868\u7684\u957f\u5ea6\uff0c\u4e00\u5206\u949f\u518510\u6b21\u7684\u8bdd\u90a3\u4e48\u5217\u8868\u957f\u5ea6\u5c31\u5e94\u8be5\u5c0f\u4e8e\u7b49\u4e8e10 # \u5f5310\u7684\u65f6\u5019\u6b64\u65f6\u5c31\u5df2\u7ecf\u8fbe\u5230\u8bbf\u95ee\u4e0a\u9650\u4e86\uff0c\u56e0\u6b64\u53ea\u6709\u5f53\u5217\u8868\u957f\u5ea6\u5c0f\u4e8e10\u7684\u624d\u5141\u8bb8\u7ee7\u7eed\u8bbf\u95ee\u63d2\u503c\u3002 if len(self.history) 3: # \u65f6\u95f4\u8d8a\u8fd1\u7684\u585e\u5230\u5217\u8868\u7684\u9996\u90e8 self.history.insert(0, current_time) return True def wait(self): \u63d0\u793a\u4f60\u8ddd\u79bb\u8bbf\u95ee\u8fd8\u9700\u8981\u591a\u4e45 return time.time() - self.history[-1] class AuthView(APIView): authentication_classes = [] permission_classes = [] throttle_classes = [VisitThrottle, ] def post(self, request, *args, **kwargs): ret = {'errmsg': None, 'errcode': 0} try: user = request._request.POST.get('username') pwd = request._request.POST.get('password') user_obj = models.UserInfo.objects.filter(username=user, password=pwd).first() if not user_obj: ret['errcode'] = 1000 ret['errmsg'] = '\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef' return JsonResponse(ret) token = md5(user) models.UserToken.objects.update_or_create(user=user_obj, defaults={'token': token }) ret['token'] = token ret['errmsg'] = 'ok' except Exception as e: ret['errcode'] = 1002 ret['errmsg'] = '\u8bf7\u6c42\u5f02\u5e38' ret['token'] = '' return JsonResponse(ret) \u7ecf\u8fc7\u8fd9\u6837\u4e00\u4e2a\u6d41\u7a0b\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6211\u4eec\u7684\u8bbf\u95ee\u9891\u6b21\u7684\u9650\u5236\u4e86\uff0c\u63a5\u4e0b\u6765\u770b\u4e00\u4e0b\u8fd9\u90e8\u5206\u6e90\u7801\u6d41\u7a0b\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002 \u6e90\u7801\u6d41\u7a0b \u5176\u5b9e\u4ed4\u7ec6\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e00\u5757\u7684\u903b\u8f91\u548c\u8ba4\u8bc1\u4ee5\u53ca\u6743\u9650\u7684\u903b\u8f91\u662f\u975e\u5e38\u76f8\u50cf\u7684\uff0c\u5165\u53e3\u4f9d\u7136\u662fdispatch\u3002 def initial(self, request, *args, **kwargs): \u6b64\u5904\u7701\u7565\u5f88\u591a\u4ee3\u7801 self.perform_authentication(request) self.check_permissions(request) # \u627e\u5230\u8fd9\u91cc\uff0c\u8282\u6d41\u7684\u76f8\u5173\u8bbe\u7f6e self.check_throttles(request) \u770b\u4e00\u4e0bcheck_throttles\u90fd\u5e72\u4e86\u4ec0\u4e48 # get_throttles\u7684\u903b\u8f91\u548c\u524d\u9762\u7684\u8ba4\u8bc1\u548c\u6743\u9650\u7684\u7ba1\u7406\u90fd\u662f\u4e00\u4e2a\u5957\u8def\uff0c\u8fd9\u91cc\u4e0d\u591a\u505a\u8d58\u8ff0\u4e86 # \u8fd9\u91cc\u4f9d\u7136\u662f\u8fd4\u56de\u4e86self\u4e2d\u7684throtle_classes\u7684\u7c7b\u7684\u5bf9\u8c61\u7684\u5217\u8868\uff0c\u5982\u679c\u6ca1\u6709\u7684\u8bdd # \u4f1a\u627e\u5230\u7236\u7c7bAPIView\u4e2d\u7684\u5982\u4e0b\u8fd9\u4e00\u6bb5\u5185\u5bb9\uff0c\u5982\u679c\u8981\u5168\u5c40\u5316\u76f4\u63a5\u5199\u5230settings\u4e2d\u5373\u53ef\u3002 # throttle_classes = api_settings.DEFAULT_THROTTLE_CLASSES def get_throttles(self): Instantiates and returns the list of throttles that this view uses. return [throttle() for throttle in self.throttle_classes] def check_throttles(self, request): Check if request should be throttled. Raises an appropriate exception if the request is throttled. for throttle in self.get_throttles(): # \u8c03\u7528\u5bf9\u8c61\u7684allow_request\u65b9\u6cd5\uff0c\u5982\u679c\u8fd4\u56detrue\u8868\u660e\u53ef\u4ee5\u7ee7\u7eed\u8bbf\u95ee\uff0c\u5982\u679c\u4e0d\u53cd\u56de\u6216\u8005\u8fd4\u56deFalse # \u8868\u793a\u4e0d\u80fd\u591f\u7ee7\u7eed\u8bbf\u95ee\u3002\u5f53\u4e0d\u80fd\u591f\u7ee7\u7eed\u8bbf\u95ee\u7684\u65f6\u5019\u4f1a\u8fdb\u5165\u5230\u4e0b\u9762\u7684\u6761\u4ef6\u4e2d\uff0c\u6307\u5b9athrottled\u65b9\u6cd5 # \u8c03\u7528throttled\u65b9\u6cd5\u7684\u540c\u65f6\u8fd8\u8c03\u7528\u4e86throttle\u7684wait\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u81ea\u5b9a\u4e49\u7684wait\u65b9\u6cd5 if not throttle.allow_request(request, self): self.throttled(request, throttle.wait()) throttled\u65b9\u6cd5\u76f4\u63a5\u629b\u51fa\u4e86\u5f02\u5e38\uff0c\u8fd9\u91cc\u63a5\u6536\u7684wait\u5c31\u662f\u6211\u4eec\u8fd4\u56de\u7684\u79d2\u6570\u3002 def throttled(self, request, wait): If request is throttled, determine what kind of exception to raise. raise exceptions.Throttled(wait) # \u770b\u4e00\u4e0b\u8fd9\u4e2a\u5f02\u5e38\u7c7b\u7684\u8c03\u7528 class Throttled(APIException): status_code = status.HTTP_429_TOO_MANY_REQUESTS default_detail = _('Request was throttled.') extra_detail_singular = 'Expected available in {wait} second.' extra_detail_plural = 'Expected available in {wait} seconds.' default_code = 'throttled' def __init__(self, wait=None, detail=None, code=None): if detail is None: detail = force_text(self.default_detail) if wait is not None: wait = math.ceil(wait) detail = ' '.join(( detail, force_text(ungettext(self.extra_detail_singular.format(wait=wait), self.extra_detail_plural.format(wait=wait), wait)))) self.wait = wait super(Throttled, self).__init__(detail, code) \u5185\u7f6e\u7684\u8282\u6d41\u7c7b \u5176\u5b9e\u4e0a\u9762\u8fd9\u4e00\u5806\u64cd\u4f5c\u5185\u7f6e\u7684\u8282\u6d41\u7c7b\u5c31\u5df2\u7ecf\u5e2e\u6211\u4eec\u5b9e\u73b0\u4e86 \u9996\u5148\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684\u8282\u6d41\u7c7b\u90fd\u5e94\u8be5\u7ee7\u627fBaseThrottle\u3002 class BaseThrottle(object): Rate throttling of requests. def allow_request(self, request, view): Return `True` if the request should be allowed, `False` otherwise. raise NotImplementedError('.allow_request() must be overridden') def get_ident(self, request): Identify the machine making the request by parsing HTTP_X_FORWARDED_FOR if present and number of proxies is 0. If not use all of HTTP_X_FORWARDED_FOR if it is available, if not use REMOTE_ADDR. \u6ce8\u610f\u8fd9\u91cc\u5df2\u7ecf\u5e2e\u6211\u4eec\u5b9e\u73b0\u4e86\u83b7\u53d6IP\u7684\u903b\u8f91\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u9700\u8981\u81ea\u5df1\u4eceMETA\u4e2d\u53bb\u53d6\u4e86\uff0c\u76f4\u63a5\u8c03\u7528 self.get_indent\u5c31\u53ef\u4ee5\u62ff\u5230\u533f\u540d\u7528\u6237\u7684\u5730\u5740\u6807\u8bc6\u4e86\u3002 xff = request.META.get('HTTP_X_FORWARDED_FOR') remote_addr = request.META.get('REMOTE_ADDR') num_proxies = api_settings.NUM_PROXIES if num_proxies is not None: if num_proxies == 0 or xff is None: return remote_addr addrs = xff.split(',') client_addr = addrs[-min(num_proxies, len(addrs))] return client_addr.strip() return ''.join(xff.split()) if xff else remote_addr def wait(self): Optionally, return a recommended number of seconds to wait before the next request. return None \u6211\u4eec\u4e0a\u9762\u5199\u5230\u4e86\u4e00\u5b9a\u65f6\u95f4\u5185\u9650\u5236\u7528\u6237\u7684\u8bbf\u95ee\u9891\u6b21\uff0c\u5176\u5b9eDRF\u5185\u90e8\u5df2\u7ecf\u4ee5\u4e00\u4e2a\u7b80\u5355\u7684\u9650\u6d41\u7c7b\u5e2e\u6211\u4eec\u5199\u597d\u4e86\uff0c\u5177\u4f53\u5185\u5bb9\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a class SimpleRateThrottle(BaseThrottle): A simple cache implementation, that only requires `.get_cache_key()` to be overridden. The rate (requests / seconds) is set by a `rate` attribute on the View class. The attribute is a string of the form 'number_of_requests/period'. Period should be one of: ('s', 'sec', 'm', 'min', 'h', 'hour', 'd', 'day') Previous request information used for throttling is stored in the cache. cache = default_cache timer = time.time cache_format = 'throttle_%(scope)s_%(ident)s' scope = None # 4\u3001\u4ece\u8fd9\u91cc\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2akey\u662f\u4ecesettings\u4e2d\u53d6\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5728REST_FRAMEWORK\u4e2d\u914d\u7f6e\u8fd9\u4e2akey # \u5bf9\u5e94\u7684value\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5bf9\u5e94\u7684\u6709\u4e00\u4e2ascope\u7684key\uff0c\u6bd4\u5982\u6211\u5728\u6211\u81ea\u5df1\u5b9a\u4e49\u7684\u7c7b\u91cc\u914d\u7f6escope\u4e3atest_throttle # \u90a3\u4e48\u5b83\u5c31\u4f1a\u53bb\u914d\u7f6e\u6587\u4ef6\u91cc\u627ekey\u4e3ascope\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u8bf4\u6211\u4eec\u5b9a\u4e49\u7684\u8fd9\u4e2ascope\u5176\u5b9e\u5c31\u662f\u914d\u7f6e\u6587\u4ef6\u91cc\u5bf9\u5e94\u7684key # \u90a3\u4e48\u8fd9\u4e2akey\u5bf9\u5e94\u7684value\u5e94\u8be5\u586b\u5199\u4ec0\u4e48\u5462\uff1f\u5e94\u8be5\u586b\u5199\u7c7b\u4f3c\u4e8e3/m\u8fd9\u6837\u7c7b\u4f3c\u7684\u5185\u5bb9\uff0c\u5176\u4e2dm\u4ee3\u8868\u5206\u949f\uff0cs\u79d2\uff0ch\u5c0f\u65f6 # d\u4ee3\u8868day\uff0c3/m\u5c31\u8868\u793a\u6bcf\u5206\u949f3\u6b21\u7684\u610f\u601d\uff0c\u5176\u4ed6\u7684\u7c7b\u63a8\u3002\u90a3\u4e48\u6700\u540e\u6211\u4eec\u62ff\u5230\u7684\u8fd9\u4e2aTHROTTLE_RATES\u5176\u5b9e\u5c31\u662f3/m THROTTLE_RATES = api_settings.DEFAULT_THROTTLE_RATES # 1\u3001\u5b9e\u73b0\u6784\u9020\u65b9\u6cd5\uff0c\u5728\u5bf9\u8c61\u5185\u90e8\u627erate\u8fd9\u4e2a\u5c5e\u6027\uff0c\u5982\u679crate\u5c5e\u6027\u4e0d\u5b58\u5728\u8fd9\u56de\u8c03\u7528self.get_rate def __init__(self): if not getattr(self, 'rate', None): # 5\u3001\u56de\u5230\u8fd9\u91cc\uff0cselt.rate\u5176\u5b9e\u5c31\u662f3/m\u4e86\u3002 self.rate = self.get_rate() # 6\u3001\u8c03\u7528parse_rate\u5bf9\u6211\u4eec\u76843/m\u8fdb\u884c\u6570\u636e\u5904\u7406\uff0c\u63a5\u6536\u5230\u8bf7\u6c42\u6570\u548c\u79d2\u6570\u3002 self.num_requests, self.duration = self.parse_rate(self.rate) def get_cache_key(self, request, view): Should return a unique cache-key which can be used for throttling. Must be overridden. May return `None` if the request should not be throttled. raise NotImplementedError('.get_cache_key() must be overridden') # 2\u3001\u5f53rate\u4e0d\u5b58\u5728\u7684\u65f6\u5019\u8c03\u7528\u5f53\u524d\u65b9\u6cd5\uff0c\u65b9\u6cd5\u5185\u90e8\u53bb\u8c03\u7528scope\u5c5e\u6027\uff0c\u5f53\u6ca1\u6709\u8bbe\u7f6escope\u7684\u65f6\u5019\u4f1a\u629b\u51fa\u5f02\u5e38 def get_rate(self): Determine the string representation of the allowed request rate. if not getattr(self, 'scope', None): msg = ( You must set either `.scope` or `.rate` for '%s' throttle % self.__class__.__name__) raise ImproperlyConfigured(msg) try: # 3\u3001\u5982\u679c\u8bbe\u7f6e\u4e86scope\u90a3\u4e48\u5c31\u4f1a\u53bbself.THROTTLE_RATES\u4e2d\u627e\u5bf9\u5e94\u7684key\uff0c\u8fd9\u4e2a\u503c\u662f\u4e00\u4e2a\u5b57\u5178 return self.THROTTLE_RATES[self.scope] except KeyError: msg = No default throttle rate set for '%s' scope % self.scope raise ImproperlyConfigured(msg) # 7\u3001\u5bf9self.rate\u8fdb\u884c\u6570\u636e\u5904\u7406 def parse_rate(self, rate): Given the request rate string, return a two tuple of: allowed number of requests , period of time in seconds if rate is None: return (None, None) # 8\u3001\u6211\u4eec\u7684\u6a21\u5f0f\u90fd\u662fx/x\u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u8fd9\u91cc\u76f4\u63a5\u7528/\u7ed9\u9694\u5f00\u4e86\uff0c\u83b7\u53d6\u5230\u7684num\u5c31\u662f\u6b21\u6570\uff0cperiod\u5c31\u662f\u95f4\u9694\u3002 num, period = rate.split('/') # 9\u3001int\u8f6c\u6362\u6210\u6574\u5f62 num_requests = int(num) # 10\u3001\u5c06\u5bf9\u5e94\u7684\u65e5\u671f\u8f6c\u6362\u6210\u79d2\uff0cperiod\u53ef\u80fd\u4e3as\uff0cm\uff0ch\uff0cd\uff0c\u53d6\u7b2c\u4e00\u4e2a\uff0c\u6240\u4ee5\u4f60\u5199day\uff0chour\uff0cminute\uff0csecond # \u5176\u5b9e\u4e5f\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\uff0c\u56e0\u4e3a\u90fd\u662f\u53d6\u7684\u9996\u5b57\u6bcd\uff0c\u4e0b\u9762\u7684\u64cd\u4f5c\u76f8\u5f53\u4e8e\u53d6\u5bf9\u5e94\u7684\u5b57\u5178\u7684key\u5f97\u5230\u5bf9\u5e94\u7684\u79d2\u6570 duration = {'s': 1, 'm': 60, 'h': 3600, 'd': 86400}[period[0]] # 11\u3001\u8fd4\u56de\u8bf7\u6c42\u6570\u548c\u79d2\u6570 return (num_requests, duration) # 12\u3001\u8bf7\u6c42\u8fdb\u6765\u4ee5\u540e\u5728\u6e90\u7801\u6d41\u7a0b\u4e2d\u4f1a\u8c03\u7528allow_request\u65b9\u6cd5\u3002 def allow_request(self, request, view): Implement the check to see if the request should be throttled. On success calls `throttle_success`. On failure calls `throttle_failure`. if self.rate is None: return True # 13\u3001\u8fd9\u91cc\u76f4\u63a5\u8c03\u7528self.get_cache_key\uff0c\u5982\u679c\u4ed4\u7ec6\u770b\u4e0a\u9762\u7684\u6e90\u7801\u7684\u8bdd\u4f1a\u53d1\u73b0\u8c03\u7528\u539f\u751f\u7684\u4f1a\u76f4\u63a5\u629b\u5f02\u5e38 # \u62a5\u9519\u4fe1\u606f\u544a\u77e5\u6211\u4eec\u5fc5\u987b\u81ea\u5df1\u91cd\u5199\u53bb\u8986\u76d6\u539f\u6765\u7684\u65b9\u6cd5\uff0c\u5176\u5b9e\u539f\u6765\u7684\u65b9\u6cd5\u5c31\u662f\u4e2a\u6846\u5b50\u3002 # \u6211\u4eec\u6700\u4e0a\u9762\u9488\u5bf9\u533f\u540d\u7528\u6237\u662f\u4ee5\u533f\u540d\u7528\u6237\u7684ip\u4f5c\u4e3akey\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u5728\u6211\u4eec\u7684\u9650\u6d41\u7c7b\u91cc\u8c03\u7528 # self.get_ident\u8fd4\u56deip\u8d4b\u503c\u7ed9self.key\u3002 self.key = self.get_cache_key(request, view) if self.key is None: return True # 14\u3001\u4ece\u7f13\u5b58\u4e2d\u62ff\u5230\u6240\u6709\u7684\u8bb0\u5f55\uff0c\u5c31\u76f8\u5f53\u4e8e\u4e4b\u524d\u7684VISIT_RECORD\uff0c\u8fd9\u4e2a\u7f13\u5b58\u662fDjango\u5185\u7f6e\u7684\u7f13\u5b58 self.history = self.cache.get(self.key, []) # 15\u3001\u83b7\u53d6\u5f53\u524d\u65f6\u95f4 self.now = self.timer() # 16\u3001\u8fd9\u4e00\u5757\u7684\u903b\u8f91\u57fa\u672c\u5c31\u548c\u6211\u4eec\u4e4b\u524d\u5199\u7684\u662f\u4e00\u6837\u7684\u4e86\u3002 while self.history and self.history[-1] = self.now - self.duration: self.history.pop() if len(self.history) = self.num_requests: # 17\u3001\u5982\u679c\u8bf4\u5217\u8868\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e\u8bf7\u6c42\u6570\u90a3\u4e48\u8bc1\u660e\u5df2\u7ecf\u5230\u4e86\u8bbf\u95ee\u4e0a\u7ebf\u4e86\uff0c\u76f4\u63a5return False return self.throttle_failure() # 18\u3001\u5426\u5219\u8c03\u7528throttle_success\u63d2\u5165\u65f6\u95f4\u6233\u5230\u5217\u8868\u5934\u90e8\uff0c\u5e76\u8fd4\u56deTrue\u8868\u793a\u4e0d\u9650\u6d41\u3002 return self.throttle_success() def throttle_success(self): Inserts the current request's timestamp along with the key into the cache. self.history.insert(0, self.now) self.cache.set(self.key, self.history, self.duration) return True def throttle_failure(self): Called when a request to the API has failed due to throttling. return False def wait(self): Returns the recommended next request time in seconds. if self.history: remaining_duration = self.duration - (self.now - self.history[-1]) else: remaining_duration = self.duration available_requests = self.num_requests - len(self.history) + 1 if available_requests = 0: return None return remaining_duration / float(available_requests) \u90a3\u4e48\u6211\u4eec\u81ea\u5df1\u7684\u9650\u6d41\u7c7b\u5176\u5b9e\u76f8\u5bf9\u6765\u8bb2\u5c31\u7b80\u5355\u5f88\u591a\u4e86\uff0c\u53ea\u9700\u8981\u7ee7\u627f\u5982\u4e0a\u9762\u8fd9\u4e2a\u7c7b\u518d\u505a\u7b80\u5355\u7684\u914d\u7f6e\u5373\u53ef\uff1a from rest_framework.throttling import SimpleRateThrottle # \u6700\u540e\u6211\u4eec\u9700\u8981\u505a\u7684\u5185\u5bb9\u5c31\u7b80\u7b80\u5355\u5355\u7684\u8fd9\u4e00\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002 class VisitThrottle(SimpleRateThrottle): scope = 'test_throttle' def get_cache_key(self, request, view): # \u5982\u679c\u662f\u9488\u5bf9\u767b\u5f55\u7528\u6237\u6211\u4eec\u53ef\u4ee5\u8fd4\u56de\u7528\u6237\u7684\u552f\u4e00\u767b\u5f55\u540d\uff0c\u6216\u8005\u7528\u6237\u7684pk(id) return self.get_ident(request) \u5bf9\u5e94\u7684settings\u914d\u7f6e\u5982\u4e0b: REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ['api.utils.auth.Authtication', ], 'UNAUTHENTICATED_USER': None, 'UNAUTHENTICATED_TOKEN': None, 'DEFAULT_PERMISSION_CLASSES': ['api.utils.permission.MyPermission'], 'DEFAULT_THROTTLE_CLASSES': [''], 'DEFAULT_THROTTLE_RATES': { 'test_throttle': '10/m' } } \u5176\u4ed6\u7684\u63d0\u4f9b\u5185\u7f6e\u9650\u6d41\u7c7b\u5982\u4e0b\u4ee5\u4f9b\u53c2\u8003\uff1a # \u9650\u5236\u533f\u540d\u7528\u6237 class AnonRateThrottle(SimpleRateThrottle): Limits the rate of API calls that may be made by a anonymous users. The IP address of the request will be used as the unique cache key. scope = 'anon' def get_cache_key(self, request, view): if request.user.is_authenticated: return None # Only throttle unauthenticated requests. return self.cache_format % { 'scope': self.scope, 'ident': self.get_ident(request) } # \u9650\u5236\u767b\u5f55\u7528\u6237\u7684 class UserRateThrottle(SimpleRateThrottle): Limits the rate of API calls that may be made by a given user. The user id will be used as a unique cache key if the user is authenticated. For anonymous requests, the IP address of the request will be used. scope = 'user' def get_cache_key(self, request, view): if request.user.is_authenticated: ident = request.user.pk else: ident = self.get_ident(request) return self.cache_format % { 'scope': self.scope, 'ident': ident } # \u8fd9\u4e2a\u662f\u5e94\u7528\u5728\u5c40\u90e8\u89c6\u56fe\u4e0a\u7684\uff0c\u4f46\u662f\u6211\u4eec\u5e94\u7528\u5230\u5c40\u90e8\u89c6\u56fe\u76f4\u63a5\u5728\u5bf9\u5e94\u7684\u89c6\u56fe\u7c7b\u5199throttle_classes\u5c31\u53ef\u4ee5\u4e86 # \u56e0\u6b64\u8fd9\u4e2a\u57fa\u672c\u7528\u4e0d\u5230\u3002 class ScopedRateThrottle(SimpleRateThrottle): Limits the rate of API calls by different amounts for various parts of the API. Any view that has the `throttle_scope` property set will be throttled. The unique cache key will be generated by concatenating the user id of the request, and the scope of the view being accessed. scope_attr = 'throttle_scope' def __init__(self): # Override the usual SimpleRateThrottle, because we can't determine # the rate until called by the view. pass def allow_request(self, request, view): # We can only determine the scope once we're called by the view. self.scope = getattr(view, self.scope_attr, None) # If a view does not have a `throttle_scope` always allow the request if not self.scope: return True # Determine the allowed request rate as we normally would during # the `__init__` call. self.rate = self.get_rate() self.num_requests, self.duration = self.parse_rate(self.rate) # We can now proceed as normal. return super(ScopedRateThrottle, self).allow_request(request, view) def get_cache_key(self, request, view): If `view.throttle_scope` is not set, don't apply this throttle. Otherwise generate the unique cache key by concatenating the user id with the '.throttle_scope` property of the view. if request.user.is_authenticated: ident = request.user.pk else: ident = self.get_ident(request) return self.cache_format % { 'scope': self.scope, 'ident': ident } \u5c0f\u7ed3 \u4f9d\u7136\u9700\u8981\u6ce8\u610f\uff0c\u914d\u7f6e\u6587\u4ef6\u914d\u7f6e\u7684\u8282\u6d41\u7c7b\u662f\u5168\u5c40\u7684\uff0c\u662f\u7ed9\u6240\u6709\u7684\u4eba\u7528\u7684\uff0c\u5982\u679c\u8bf4\u5355\u72ec\u9700\u8981\u5176\u4ed6\u7684\u65b9\u6848\u7684\u9700\u8981\u5355\u72ec\u5904\u7406\uff0c\u76f4\u63a5\u5728\u5bf9\u5e94\u7684\u89c6\u56feCBV\u4e2d\u5199 throttle_classes = [] \u5355\u72ec\u5904\u7406\u5c31\u53ef\u4ee5\u4e86\u3002","title":"DRF\u8bbf\u95ee\u9650\u5236"},{"location":"django/07-DRF/04-DRF\u8bbf\u95ee\u9650\u5236/#drf","text":"\u63a5\u53e3\u9700\u8981\u6709\u8bbf\u95ee\u7684\u9650\u5236\uff0c\u800c\u4e0d\u662f\u968f\u610f\u7684\u65e0\u9650\u5236\u7684\u8bbf\u95ee\uff0cDRF\u63d0\u4f9b\u4e86\u8bbf\u95ee\u9650\u5236\u65b9\u9762\u7684\u5185\u5bb9\u3002","title":"DRF\u8bbf\u95ee\u9650\u5236"},{"location":"django/07-DRF/04-DRF\u8bbf\u95ee\u9650\u5236/#_1","text":"\u9996\u5148\u6765\u770b\u9488\u5bf9\u533f\u540d\u7528\u6237\u7684\u8bbf\u95ee\u9650\u5236\u7684\u8bbe\u8ba1\u601d\u8def\uff0c\u9996\u5148\u8bf4\u8bbf\u95ee\u9650\u5236\u4e0d\u662f\u7edd\u5bf9\u7684\uff0c\u9488\u5bf9\u975e\u767b\u5f55\u7684\u533f\u540d\u7528\u6237\u6765\u8bb2\uff0cIP\u53ef\u4ee5\u8bf4\u662f\u7528\u6237\u552f\u4e00\u7684\u6807\u8bc6\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u9488\u5bf9\u8bbf\u95ee\u7684\u6e90IP\u6765\u505a\u9650\u5236\uff0c\u4f46\u662f\u7528\u6237\u7684IP\u662f\u53ef\u4ee5\u6362\u7684\uff0c\u6bd4\u5982\u7528\u6237\u66f4\u6362\u4ee3\u7406\uff0c\u90a3\u4e48\u53ef\u80fd\u7684IP\u5c31\u662f\u65e0\u9650\u591a\u4e2a\uff0c\u4f46\u662f\u8bbf\u95ee\u4eba\u662f\u540c\u4e00\u4e2a\uff0c\u56e0\u6b64\u6ca1\u6709\u529e\u6cd5\u505a\u5230\u7edd\u5bf9\u7684\u9650\u5236\u3002 \u540c\u6837\u7684\uff0c\u9488\u5bf9\u767b\u5f55\u7528\u6237\u4e5f\u662f\u4e0d\u80fd\u505a\u5230\u7edd\u5bf9\u7684\u5b8c\u5168\u7684\u9650\u5236\uff0c\u73b0\u5728\u57fa\u672c\u6bcf\u4e2a\u8d26\u53f7\u90fd\u4f1a\u7ed1\u5b9a\u624b\u673a\u53f7\uff0c\u4f46\u662f\u4f60\u62e6\u4e0d\u4f4f\u7528\u6237\u76f4\u63a5\u53bb\u67d0\u5b9d\u4e70\u624b\u673a\u53f7\uff0c\u4ee3\u7406\u6ce8\u518c\uff0c\u6240\u4ee5\u8bf4\u8fd9\u4e9b\u9650\u5236\u5728\u5e94\u7528\u5c42\u9762\u4e0a\u6765\u8bb2\uff0c\u53ea\u80fd\u8bf4\u662f\u4e00\u5b9a\u7a0b\u5ea6\u505a\u4e86\u9650\u5236\u3002 \u533f\u540d\u7528\u6237\u8bbf\u95ee\u9891\u7387\u7684\u8bbe\u8ba1\u601d\u8def\uff1a \u9996\u5148\u6355\u83b7\u7528\u6237\u7684IP\u5730\u5740\uff0c\u8fd9\u4e2aip\u5730\u5740\u53ef\u4ee5\u5728request\u7684META\u4fe1\u606f\u4e2d\u53bb\u53d6\u5230\uff0cremote_addr\u6216\u8005\u662fx_forward_for \u51c6\u5907\u4e00\u4e2a\u5b57\u5178\uff0c\u8fd9\u4e2a\u5b57\u5178\u53ef\u4ee5\u662f\u4e00\u4e2a\u5168\u5c40\u7ea7\u522b\u7684\u53d8\u91cf\uff0c\u6216\u8005\u662f\u6570\u636e\u5e93\u4ea6\u6216\u662fredis\u3002 \u6355\u83b7\u5230\u7684IP\u4f5c\u4e3akey\uff0c\u800cvalue\u4e3a\u4e00\u4e2a\u5217\u8868\u53bb\u5b58\u50a8\u7528\u6237\u7684\u8bbf\u95ee\u8bb0\u5f55 \u8bbf\u95ee\u8bb0\u5f55\u7684\u5b9e\u4f53\u4e3a\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u7528\u6237\u6bcf\u8bbf\u95ee\u4e00\u6b21\u5411value\u5217\u8868\u4e2d\u7684\u9996\u90e8\u6dfb\u52a0\u4e00\u4e2a \u5f53\u7528\u6237\u6765\u8bbf\u95ee\u7684\u65f6\u5019\u9996\u5148\u6765\u770b\u8fd9\u4e2a\u5168\u5c40\u5b57\u5178\u4e2d\u6709\u6ca1\u6709\u5bf9\u5e94\u7684IP\u7684key\uff0c\u5982\u679c\u6ca1\u6709\u7684\u8bdd\u90a3\u4e48\u5c31\u6dfb\u52a0\uff0c\u5e76\u5411\u5217\u8868\u4e2d\u8ffd\u52a0\u5f53\u524d\u7684\u65f6\u95f4\u6233\u3002 \u5982\u679c\u6709\u5f53\u524d\u7684key\u8bc1\u660e\u8fd9\u4e2aip\u7684\u533f\u540d\u7528\u6237\u4e4b\u524d\u6709\u8bbf\u95ee\u8fc7\uff0c\u90a3\u4e48\u5c31\u4ece\u540e\u5f80\u524d\u9010\u4e2a\u5bf9\u6bd4\u65f6\u95f4\u5dee\u503c\u662f\u5426\u8d85\u8fc7\u8bbe\u7f6e\u7684\u65f6\u95f4\u95f4\u9694\uff0c\u5982\u679c\u6709\u8d85\u8fc7\u7684\u5c31POP\u6389\uff0c\u8fd9\u5c31\u662f\u4e3a\u5565\u8bb0\u5f55\u65f6\u95f4\u6233\u7684\u65f6\u5019\u8981\u8bb0\u5f55\u5728\u524d\u9762\uff0c\u56e0\u4e3a\u5728\u6e05\u7406\u8fc7\u671f\u8bbf\u95ee\u8bb0\u5f55\u7684\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528pop\u65b9\u4fbf\u7684\u53bb\u5220\u9664\u8bb0\u5f55\u3002 \u53bb\u9664\u6389\u8fc7\u671f\u8bb0\u5f55\u4ee5\u540e\u53bb\u6392\u67e5\u5f53\u524d\u5217\u8868\u7684\u957f\u5ea6\uff0c\u6bd4\u5982\u4e00\u5206\u949f\u5185\u53ea\u8ba9\u8bbf\u95ee10\u6b21\uff0c\u90a3\u4e48\u5047\u5982\u5f53\u524d\u7684\u5217\u8868\u957f\u5ea6\u53ea\u6709\u5c0f\u4e8e10\u7684\u65f6\u5019\u624d\u5141\u8bb8\u4f60\u8fdb\u884c\u4e0b\u4e00\u6b21\u8bbf\u95ee \u90a3\u4e48\u5177\u4f53\u7684\u4ee3\u7801\u5b9e\u73b0\u903b\u8f91\u53ef\u4ee5\u770b\u4e0b\u9762\u7684\u7b80\u5355\u4ee3\u7801\u3002 \u6240\u6709\u5bfc\u5165\u7684\u5305\u90fd\u7701\u7565\u4e86 def md5(user): ctime = time.time() m = hashlib.md5(bytes(user, encoding='utf8')) m.update(bytes(str(ctime), encoding='utf8')) return m.hexdigest() # \u5168\u5c40\u53d8\u91cf\u53ef\u4ee5\uff0c\u6570\u636e\u5e93\u53ef\u4ee5\uff0credis\u4e5f\u53ef\u4ee5 VISIT_RECORD = {} class VisitThrottle(BaseThrottle): def __init__(self): self.history = None def allow_request(self, request, view): \u5982\u679creturn true\u8868\u793a\u53ef\u4ee5\u7ee7\u7eed\u8bbf\u95ee\uff0c\u5982\u679c\u8fd4\u56defalse\uff0c\u8868\u793a\u8bbf\u95ee\u9891\u7387\u592a\u9ad8\uff0c\u88ab\u9650\u5236\u8bbf\u95ee :param request: :param view: :return: # 1\u3001\u83b7\u53d6\u7528\u6237IP\uff0c\u6211\u4eec\u77e5\u9053\u8bf4\u8fd9\u91cc\u7684request\u662f\u5df2\u7ecf\u88ab\u5c01\u88c5\u8fc7\u7684 # \u4f46\u662f\u6709\u4e00\u4e2a\u7279\u6027\u662f\u5f53\u627e\u4e00\u4e2a\u5c5e\u6027\u7684\u65f6\u5019\u5982\u679c\u8fd9\u4e2a\u5c01\u88c5\u8fc7\u7684request\u5b58\u5728\u7684\u8bdd # \u90a3\u4e48\u5c31\u5728\u8fd9\u91cc\u53bb\u5bfb\u627e\uff0c\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0c\u90a3\u4e48\u4f1a\u4ece\u539f\u6765\u7684request\u627e # \u56e0\u6b64\u8fd9\u91cc\u53ef\u4ee5\u7701\u7565_request\uff0c\u76f4\u63a5\u8c03\u7528META remote_addr = request.META.get('REMOTE_ADDR') current_time = time.time() # \u5982\u679c\u6355\u83b7\u5230\u7684IP\u5730\u5740\u6ca1\u6709\u518d\u8fd9\u4e2a\u8bbf\u95ee\u8bb0\u5f55\u7684\u5b57\u5178\u91cc\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u589e\u52a0\u4e00\u4e0b\u3002 if remote_addr not in VISIT_RECORD: VISIT_RECORD[remote_addr] = [current_time, ] return True # \u5982\u679c\u8bf4\u6709\u8bbf\u95ee\u8bb0\u5f55\uff0c\u90a3\u4e48\u5c31\u628a\u8bbf\u95ee\u8bb0\u5f55\u7684\u5217\u8868\u8d4b\u503c\u7ed9self.history self.history = VISIT_RECORD.get(remote_addr) # \u6e05\u7406\u8fc7\u671f\u7684\u8bbf\u95ee\u8bb0\u5f55\uff0c\u6bd4\u5982\u6211\u73b0\u5728\u5141\u8bb8\u4f60\u4e00\u5206\u949f\u4f60\u8bbf\u95ee10\u6b21\uff0c\u4e5f\u5c31\u662f60s\u5185\u8bbf\u95ee10\u6b21 # \u90a3\u4e48\u65b0\u7684\u4e00\u6b21\u8bbf\u95ee\u8fdb\u6765\u4ee5\u540e\uff0c\u9996\u5148\u6bd4\u5bf9\u65b0\u7684\u65f6\u95f4\u6233\u548c\u6700\u8001\u7684\u65f6\u95f4\u6233\uff0c\u5982\u679c\u5dee\u503c\u5927\u4e8e60s # \u90a3\u4e48\u8bc1\u660e\u8fd9\u4e2a\u8bbf\u95ee\u8bb0\u5f55\u53ef\u80fd\u5df2\u7ecf\u5f88\u4e45\u8fdc\u4e86\uff0c\u5c31\u53ef\u4ee5\u5220\u6389\u4e86\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u4f9d\u6b21\u5bf9\u6bd4\u3002 while self.history and self.history[-1] (current_time - 10): self.history.pop() # \u5c06\u8001\u65e7\u7684\u4fe1\u606f\u5220\u6389\u4ee5\u540e\uff0c\u7136\u540e\u770b\u770b\u5217\u8868\u7684\u957f\u5ea6\uff0c\u4e00\u5206\u949f\u518510\u6b21\u7684\u8bdd\u90a3\u4e48\u5217\u8868\u957f\u5ea6\u5c31\u5e94\u8be5\u5c0f\u4e8e\u7b49\u4e8e10 # \u5f5310\u7684\u65f6\u5019\u6b64\u65f6\u5c31\u5df2\u7ecf\u8fbe\u5230\u8bbf\u95ee\u4e0a\u9650\u4e86\uff0c\u56e0\u6b64\u53ea\u6709\u5f53\u5217\u8868\u957f\u5ea6\u5c0f\u4e8e10\u7684\u624d\u5141\u8bb8\u7ee7\u7eed\u8bbf\u95ee\u63d2\u503c\u3002 if len(self.history) 3: # \u65f6\u95f4\u8d8a\u8fd1\u7684\u585e\u5230\u5217\u8868\u7684\u9996\u90e8 self.history.insert(0, current_time) return True def wait(self): \u63d0\u793a\u4f60\u8ddd\u79bb\u8bbf\u95ee\u8fd8\u9700\u8981\u591a\u4e45 return time.time() - self.history[-1] class AuthView(APIView): authentication_classes = [] permission_classes = [] throttle_classes = [VisitThrottle, ] def post(self, request, *args, **kwargs): ret = {'errmsg': None, 'errcode': 0} try: user = request._request.POST.get('username') pwd = request._request.POST.get('password') user_obj = models.UserInfo.objects.filter(username=user, password=pwd).first() if not user_obj: ret['errcode'] = 1000 ret['errmsg'] = '\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef' return JsonResponse(ret) token = md5(user) models.UserToken.objects.update_or_create(user=user_obj, defaults={'token': token }) ret['token'] = token ret['errmsg'] = 'ok' except Exception as e: ret['errcode'] = 1002 ret['errmsg'] = '\u8bf7\u6c42\u5f02\u5e38' ret['token'] = '' return JsonResponse(ret) \u7ecf\u8fc7\u8fd9\u6837\u4e00\u4e2a\u6d41\u7a0b\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6211\u4eec\u7684\u8bbf\u95ee\u9891\u6b21\u7684\u9650\u5236\u4e86\uff0c\u63a5\u4e0b\u6765\u770b\u4e00\u4e0b\u8fd9\u90e8\u5206\u6e90\u7801\u6d41\u7a0b\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002","title":"\u63a7\u5236\u8bbf\u95ee\u9891\u7387"},{"location":"django/07-DRF/04-DRF\u8bbf\u95ee\u9650\u5236/#_2","text":"\u5176\u5b9e\u4ed4\u7ec6\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e00\u5757\u7684\u903b\u8f91\u548c\u8ba4\u8bc1\u4ee5\u53ca\u6743\u9650\u7684\u903b\u8f91\u662f\u975e\u5e38\u76f8\u50cf\u7684\uff0c\u5165\u53e3\u4f9d\u7136\u662fdispatch\u3002 def initial(self, request, *args, **kwargs): \u6b64\u5904\u7701\u7565\u5f88\u591a\u4ee3\u7801 self.perform_authentication(request) self.check_permissions(request) # \u627e\u5230\u8fd9\u91cc\uff0c\u8282\u6d41\u7684\u76f8\u5173\u8bbe\u7f6e self.check_throttles(request) \u770b\u4e00\u4e0bcheck_throttles\u90fd\u5e72\u4e86\u4ec0\u4e48 # get_throttles\u7684\u903b\u8f91\u548c\u524d\u9762\u7684\u8ba4\u8bc1\u548c\u6743\u9650\u7684\u7ba1\u7406\u90fd\u662f\u4e00\u4e2a\u5957\u8def\uff0c\u8fd9\u91cc\u4e0d\u591a\u505a\u8d58\u8ff0\u4e86 # \u8fd9\u91cc\u4f9d\u7136\u662f\u8fd4\u56de\u4e86self\u4e2d\u7684throtle_classes\u7684\u7c7b\u7684\u5bf9\u8c61\u7684\u5217\u8868\uff0c\u5982\u679c\u6ca1\u6709\u7684\u8bdd # \u4f1a\u627e\u5230\u7236\u7c7bAPIView\u4e2d\u7684\u5982\u4e0b\u8fd9\u4e00\u6bb5\u5185\u5bb9\uff0c\u5982\u679c\u8981\u5168\u5c40\u5316\u76f4\u63a5\u5199\u5230settings\u4e2d\u5373\u53ef\u3002 # throttle_classes = api_settings.DEFAULT_THROTTLE_CLASSES def get_throttles(self): Instantiates and returns the list of throttles that this view uses. return [throttle() for throttle in self.throttle_classes] def check_throttles(self, request): Check if request should be throttled. Raises an appropriate exception if the request is throttled. for throttle in self.get_throttles(): # \u8c03\u7528\u5bf9\u8c61\u7684allow_request\u65b9\u6cd5\uff0c\u5982\u679c\u8fd4\u56detrue\u8868\u660e\u53ef\u4ee5\u7ee7\u7eed\u8bbf\u95ee\uff0c\u5982\u679c\u4e0d\u53cd\u56de\u6216\u8005\u8fd4\u56deFalse # \u8868\u793a\u4e0d\u80fd\u591f\u7ee7\u7eed\u8bbf\u95ee\u3002\u5f53\u4e0d\u80fd\u591f\u7ee7\u7eed\u8bbf\u95ee\u7684\u65f6\u5019\u4f1a\u8fdb\u5165\u5230\u4e0b\u9762\u7684\u6761\u4ef6\u4e2d\uff0c\u6307\u5b9athrottled\u65b9\u6cd5 # \u8c03\u7528throttled\u65b9\u6cd5\u7684\u540c\u65f6\u8fd8\u8c03\u7528\u4e86throttle\u7684wait\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u81ea\u5b9a\u4e49\u7684wait\u65b9\u6cd5 if not throttle.allow_request(request, self): self.throttled(request, throttle.wait()) throttled\u65b9\u6cd5\u76f4\u63a5\u629b\u51fa\u4e86\u5f02\u5e38\uff0c\u8fd9\u91cc\u63a5\u6536\u7684wait\u5c31\u662f\u6211\u4eec\u8fd4\u56de\u7684\u79d2\u6570\u3002 def throttled(self, request, wait): If request is throttled, determine what kind of exception to raise. raise exceptions.Throttled(wait) # \u770b\u4e00\u4e0b\u8fd9\u4e2a\u5f02\u5e38\u7c7b\u7684\u8c03\u7528 class Throttled(APIException): status_code = status.HTTP_429_TOO_MANY_REQUESTS default_detail = _('Request was throttled.') extra_detail_singular = 'Expected available in {wait} second.' extra_detail_plural = 'Expected available in {wait} seconds.' default_code = 'throttled' def __init__(self, wait=None, detail=None, code=None): if detail is None: detail = force_text(self.default_detail) if wait is not None: wait = math.ceil(wait) detail = ' '.join(( detail, force_text(ungettext(self.extra_detail_singular.format(wait=wait), self.extra_detail_plural.format(wait=wait), wait)))) self.wait = wait super(Throttled, self).__init__(detail, code)","title":"\u6e90\u7801\u6d41\u7a0b"},{"location":"django/07-DRF/04-DRF\u8bbf\u95ee\u9650\u5236/#_3","text":"\u5176\u5b9e\u4e0a\u9762\u8fd9\u4e00\u5806\u64cd\u4f5c\u5185\u7f6e\u7684\u8282\u6d41\u7c7b\u5c31\u5df2\u7ecf\u5e2e\u6211\u4eec\u5b9e\u73b0\u4e86 \u9996\u5148\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684\u8282\u6d41\u7c7b\u90fd\u5e94\u8be5\u7ee7\u627fBaseThrottle\u3002 class BaseThrottle(object): Rate throttling of requests. def allow_request(self, request, view): Return `True` if the request should be allowed, `False` otherwise. raise NotImplementedError('.allow_request() must be overridden') def get_ident(self, request): Identify the machine making the request by parsing HTTP_X_FORWARDED_FOR if present and number of proxies is 0. If not use all of HTTP_X_FORWARDED_FOR if it is available, if not use REMOTE_ADDR. \u6ce8\u610f\u8fd9\u91cc\u5df2\u7ecf\u5e2e\u6211\u4eec\u5b9e\u73b0\u4e86\u83b7\u53d6IP\u7684\u903b\u8f91\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u9700\u8981\u81ea\u5df1\u4eceMETA\u4e2d\u53bb\u53d6\u4e86\uff0c\u76f4\u63a5\u8c03\u7528 self.get_indent\u5c31\u53ef\u4ee5\u62ff\u5230\u533f\u540d\u7528\u6237\u7684\u5730\u5740\u6807\u8bc6\u4e86\u3002 xff = request.META.get('HTTP_X_FORWARDED_FOR') remote_addr = request.META.get('REMOTE_ADDR') num_proxies = api_settings.NUM_PROXIES if num_proxies is not None: if num_proxies == 0 or xff is None: return remote_addr addrs = xff.split(',') client_addr = addrs[-min(num_proxies, len(addrs))] return client_addr.strip() return ''.join(xff.split()) if xff else remote_addr def wait(self): Optionally, return a recommended number of seconds to wait before the next request. return None \u6211\u4eec\u4e0a\u9762\u5199\u5230\u4e86\u4e00\u5b9a\u65f6\u95f4\u5185\u9650\u5236\u7528\u6237\u7684\u8bbf\u95ee\u9891\u6b21\uff0c\u5176\u5b9eDRF\u5185\u90e8\u5df2\u7ecf\u4ee5\u4e00\u4e2a\u7b80\u5355\u7684\u9650\u6d41\u7c7b\u5e2e\u6211\u4eec\u5199\u597d\u4e86\uff0c\u5177\u4f53\u5185\u5bb9\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a class SimpleRateThrottle(BaseThrottle): A simple cache implementation, that only requires `.get_cache_key()` to be overridden. The rate (requests / seconds) is set by a `rate` attribute on the View class. The attribute is a string of the form 'number_of_requests/period'. Period should be one of: ('s', 'sec', 'm', 'min', 'h', 'hour', 'd', 'day') Previous request information used for throttling is stored in the cache. cache = default_cache timer = time.time cache_format = 'throttle_%(scope)s_%(ident)s' scope = None # 4\u3001\u4ece\u8fd9\u91cc\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2akey\u662f\u4ecesettings\u4e2d\u53d6\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5728REST_FRAMEWORK\u4e2d\u914d\u7f6e\u8fd9\u4e2akey # \u5bf9\u5e94\u7684value\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5bf9\u5e94\u7684\u6709\u4e00\u4e2ascope\u7684key\uff0c\u6bd4\u5982\u6211\u5728\u6211\u81ea\u5df1\u5b9a\u4e49\u7684\u7c7b\u91cc\u914d\u7f6escope\u4e3atest_throttle # \u90a3\u4e48\u5b83\u5c31\u4f1a\u53bb\u914d\u7f6e\u6587\u4ef6\u91cc\u627ekey\u4e3ascope\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u8bf4\u6211\u4eec\u5b9a\u4e49\u7684\u8fd9\u4e2ascope\u5176\u5b9e\u5c31\u662f\u914d\u7f6e\u6587\u4ef6\u91cc\u5bf9\u5e94\u7684key # \u90a3\u4e48\u8fd9\u4e2akey\u5bf9\u5e94\u7684value\u5e94\u8be5\u586b\u5199\u4ec0\u4e48\u5462\uff1f\u5e94\u8be5\u586b\u5199\u7c7b\u4f3c\u4e8e3/m\u8fd9\u6837\u7c7b\u4f3c\u7684\u5185\u5bb9\uff0c\u5176\u4e2dm\u4ee3\u8868\u5206\u949f\uff0cs\u79d2\uff0ch\u5c0f\u65f6 # d\u4ee3\u8868day\uff0c3/m\u5c31\u8868\u793a\u6bcf\u5206\u949f3\u6b21\u7684\u610f\u601d\uff0c\u5176\u4ed6\u7684\u7c7b\u63a8\u3002\u90a3\u4e48\u6700\u540e\u6211\u4eec\u62ff\u5230\u7684\u8fd9\u4e2aTHROTTLE_RATES\u5176\u5b9e\u5c31\u662f3/m THROTTLE_RATES = api_settings.DEFAULT_THROTTLE_RATES # 1\u3001\u5b9e\u73b0\u6784\u9020\u65b9\u6cd5\uff0c\u5728\u5bf9\u8c61\u5185\u90e8\u627erate\u8fd9\u4e2a\u5c5e\u6027\uff0c\u5982\u679crate\u5c5e\u6027\u4e0d\u5b58\u5728\u8fd9\u56de\u8c03\u7528self.get_rate def __init__(self): if not getattr(self, 'rate', None): # 5\u3001\u56de\u5230\u8fd9\u91cc\uff0cselt.rate\u5176\u5b9e\u5c31\u662f3/m\u4e86\u3002 self.rate = self.get_rate() # 6\u3001\u8c03\u7528parse_rate\u5bf9\u6211\u4eec\u76843/m\u8fdb\u884c\u6570\u636e\u5904\u7406\uff0c\u63a5\u6536\u5230\u8bf7\u6c42\u6570\u548c\u79d2\u6570\u3002 self.num_requests, self.duration = self.parse_rate(self.rate) def get_cache_key(self, request, view): Should return a unique cache-key which can be used for throttling. Must be overridden. May return `None` if the request should not be throttled. raise NotImplementedError('.get_cache_key() must be overridden') # 2\u3001\u5f53rate\u4e0d\u5b58\u5728\u7684\u65f6\u5019\u8c03\u7528\u5f53\u524d\u65b9\u6cd5\uff0c\u65b9\u6cd5\u5185\u90e8\u53bb\u8c03\u7528scope\u5c5e\u6027\uff0c\u5f53\u6ca1\u6709\u8bbe\u7f6escope\u7684\u65f6\u5019\u4f1a\u629b\u51fa\u5f02\u5e38 def get_rate(self): Determine the string representation of the allowed request rate. if not getattr(self, 'scope', None): msg = ( You must set either `.scope` or `.rate` for '%s' throttle % self.__class__.__name__) raise ImproperlyConfigured(msg) try: # 3\u3001\u5982\u679c\u8bbe\u7f6e\u4e86scope\u90a3\u4e48\u5c31\u4f1a\u53bbself.THROTTLE_RATES\u4e2d\u627e\u5bf9\u5e94\u7684key\uff0c\u8fd9\u4e2a\u503c\u662f\u4e00\u4e2a\u5b57\u5178 return self.THROTTLE_RATES[self.scope] except KeyError: msg = No default throttle rate set for '%s' scope % self.scope raise ImproperlyConfigured(msg) # 7\u3001\u5bf9self.rate\u8fdb\u884c\u6570\u636e\u5904\u7406 def parse_rate(self, rate): Given the request rate string, return a two tuple of: allowed number of requests , period of time in seconds if rate is None: return (None, None) # 8\u3001\u6211\u4eec\u7684\u6a21\u5f0f\u90fd\u662fx/x\u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u8fd9\u91cc\u76f4\u63a5\u7528/\u7ed9\u9694\u5f00\u4e86\uff0c\u83b7\u53d6\u5230\u7684num\u5c31\u662f\u6b21\u6570\uff0cperiod\u5c31\u662f\u95f4\u9694\u3002 num, period = rate.split('/') # 9\u3001int\u8f6c\u6362\u6210\u6574\u5f62 num_requests = int(num) # 10\u3001\u5c06\u5bf9\u5e94\u7684\u65e5\u671f\u8f6c\u6362\u6210\u79d2\uff0cperiod\u53ef\u80fd\u4e3as\uff0cm\uff0ch\uff0cd\uff0c\u53d6\u7b2c\u4e00\u4e2a\uff0c\u6240\u4ee5\u4f60\u5199day\uff0chour\uff0cminute\uff0csecond # \u5176\u5b9e\u4e5f\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\uff0c\u56e0\u4e3a\u90fd\u662f\u53d6\u7684\u9996\u5b57\u6bcd\uff0c\u4e0b\u9762\u7684\u64cd\u4f5c\u76f8\u5f53\u4e8e\u53d6\u5bf9\u5e94\u7684\u5b57\u5178\u7684key\u5f97\u5230\u5bf9\u5e94\u7684\u79d2\u6570 duration = {'s': 1, 'm': 60, 'h': 3600, 'd': 86400}[period[0]] # 11\u3001\u8fd4\u56de\u8bf7\u6c42\u6570\u548c\u79d2\u6570 return (num_requests, duration) # 12\u3001\u8bf7\u6c42\u8fdb\u6765\u4ee5\u540e\u5728\u6e90\u7801\u6d41\u7a0b\u4e2d\u4f1a\u8c03\u7528allow_request\u65b9\u6cd5\u3002 def allow_request(self, request, view): Implement the check to see if the request should be throttled. On success calls `throttle_success`. On failure calls `throttle_failure`. if self.rate is None: return True # 13\u3001\u8fd9\u91cc\u76f4\u63a5\u8c03\u7528self.get_cache_key\uff0c\u5982\u679c\u4ed4\u7ec6\u770b\u4e0a\u9762\u7684\u6e90\u7801\u7684\u8bdd\u4f1a\u53d1\u73b0\u8c03\u7528\u539f\u751f\u7684\u4f1a\u76f4\u63a5\u629b\u5f02\u5e38 # \u62a5\u9519\u4fe1\u606f\u544a\u77e5\u6211\u4eec\u5fc5\u987b\u81ea\u5df1\u91cd\u5199\u53bb\u8986\u76d6\u539f\u6765\u7684\u65b9\u6cd5\uff0c\u5176\u5b9e\u539f\u6765\u7684\u65b9\u6cd5\u5c31\u662f\u4e2a\u6846\u5b50\u3002 # \u6211\u4eec\u6700\u4e0a\u9762\u9488\u5bf9\u533f\u540d\u7528\u6237\u662f\u4ee5\u533f\u540d\u7528\u6237\u7684ip\u4f5c\u4e3akey\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u5728\u6211\u4eec\u7684\u9650\u6d41\u7c7b\u91cc\u8c03\u7528 # self.get_ident\u8fd4\u56deip\u8d4b\u503c\u7ed9self.key\u3002 self.key = self.get_cache_key(request, view) if self.key is None: return True # 14\u3001\u4ece\u7f13\u5b58\u4e2d\u62ff\u5230\u6240\u6709\u7684\u8bb0\u5f55\uff0c\u5c31\u76f8\u5f53\u4e8e\u4e4b\u524d\u7684VISIT_RECORD\uff0c\u8fd9\u4e2a\u7f13\u5b58\u662fDjango\u5185\u7f6e\u7684\u7f13\u5b58 self.history = self.cache.get(self.key, []) # 15\u3001\u83b7\u53d6\u5f53\u524d\u65f6\u95f4 self.now = self.timer() # 16\u3001\u8fd9\u4e00\u5757\u7684\u903b\u8f91\u57fa\u672c\u5c31\u548c\u6211\u4eec\u4e4b\u524d\u5199\u7684\u662f\u4e00\u6837\u7684\u4e86\u3002 while self.history and self.history[-1] = self.now - self.duration: self.history.pop() if len(self.history) = self.num_requests: # 17\u3001\u5982\u679c\u8bf4\u5217\u8868\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e\u8bf7\u6c42\u6570\u90a3\u4e48\u8bc1\u660e\u5df2\u7ecf\u5230\u4e86\u8bbf\u95ee\u4e0a\u7ebf\u4e86\uff0c\u76f4\u63a5return False return self.throttle_failure() # 18\u3001\u5426\u5219\u8c03\u7528throttle_success\u63d2\u5165\u65f6\u95f4\u6233\u5230\u5217\u8868\u5934\u90e8\uff0c\u5e76\u8fd4\u56deTrue\u8868\u793a\u4e0d\u9650\u6d41\u3002 return self.throttle_success() def throttle_success(self): Inserts the current request's timestamp along with the key into the cache. self.history.insert(0, self.now) self.cache.set(self.key, self.history, self.duration) return True def throttle_failure(self): Called when a request to the API has failed due to throttling. return False def wait(self): Returns the recommended next request time in seconds. if self.history: remaining_duration = self.duration - (self.now - self.history[-1]) else: remaining_duration = self.duration available_requests = self.num_requests - len(self.history) + 1 if available_requests = 0: return None return remaining_duration / float(available_requests) \u90a3\u4e48\u6211\u4eec\u81ea\u5df1\u7684\u9650\u6d41\u7c7b\u5176\u5b9e\u76f8\u5bf9\u6765\u8bb2\u5c31\u7b80\u5355\u5f88\u591a\u4e86\uff0c\u53ea\u9700\u8981\u7ee7\u627f\u5982\u4e0a\u9762\u8fd9\u4e2a\u7c7b\u518d\u505a\u7b80\u5355\u7684\u914d\u7f6e\u5373\u53ef\uff1a from rest_framework.throttling import SimpleRateThrottle # \u6700\u540e\u6211\u4eec\u9700\u8981\u505a\u7684\u5185\u5bb9\u5c31\u7b80\u7b80\u5355\u5355\u7684\u8fd9\u4e00\u70b9\u5c31\u53ef\u4ee5\u4e86\u3002 class VisitThrottle(SimpleRateThrottle): scope = 'test_throttle' def get_cache_key(self, request, view): # \u5982\u679c\u662f\u9488\u5bf9\u767b\u5f55\u7528\u6237\u6211\u4eec\u53ef\u4ee5\u8fd4\u56de\u7528\u6237\u7684\u552f\u4e00\u767b\u5f55\u540d\uff0c\u6216\u8005\u7528\u6237\u7684pk(id) return self.get_ident(request) \u5bf9\u5e94\u7684settings\u914d\u7f6e\u5982\u4e0b: REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ['api.utils.auth.Authtication', ], 'UNAUTHENTICATED_USER': None, 'UNAUTHENTICATED_TOKEN': None, 'DEFAULT_PERMISSION_CLASSES': ['api.utils.permission.MyPermission'], 'DEFAULT_THROTTLE_CLASSES': [''], 'DEFAULT_THROTTLE_RATES': { 'test_throttle': '10/m' } } \u5176\u4ed6\u7684\u63d0\u4f9b\u5185\u7f6e\u9650\u6d41\u7c7b\u5982\u4e0b\u4ee5\u4f9b\u53c2\u8003\uff1a # \u9650\u5236\u533f\u540d\u7528\u6237 class AnonRateThrottle(SimpleRateThrottle): Limits the rate of API calls that may be made by a anonymous users. The IP address of the request will be used as the unique cache key. scope = 'anon' def get_cache_key(self, request, view): if request.user.is_authenticated: return None # Only throttle unauthenticated requests. return self.cache_format % { 'scope': self.scope, 'ident': self.get_ident(request) } # \u9650\u5236\u767b\u5f55\u7528\u6237\u7684 class UserRateThrottle(SimpleRateThrottle): Limits the rate of API calls that may be made by a given user. The user id will be used as a unique cache key if the user is authenticated. For anonymous requests, the IP address of the request will be used. scope = 'user' def get_cache_key(self, request, view): if request.user.is_authenticated: ident = request.user.pk else: ident = self.get_ident(request) return self.cache_format % { 'scope': self.scope, 'ident': ident } # \u8fd9\u4e2a\u662f\u5e94\u7528\u5728\u5c40\u90e8\u89c6\u56fe\u4e0a\u7684\uff0c\u4f46\u662f\u6211\u4eec\u5e94\u7528\u5230\u5c40\u90e8\u89c6\u56fe\u76f4\u63a5\u5728\u5bf9\u5e94\u7684\u89c6\u56fe\u7c7b\u5199throttle_classes\u5c31\u53ef\u4ee5\u4e86 # \u56e0\u6b64\u8fd9\u4e2a\u57fa\u672c\u7528\u4e0d\u5230\u3002 class ScopedRateThrottle(SimpleRateThrottle): Limits the rate of API calls by different amounts for various parts of the API. Any view that has the `throttle_scope` property set will be throttled. The unique cache key will be generated by concatenating the user id of the request, and the scope of the view being accessed. scope_attr = 'throttle_scope' def __init__(self): # Override the usual SimpleRateThrottle, because we can't determine # the rate until called by the view. pass def allow_request(self, request, view): # We can only determine the scope once we're called by the view. self.scope = getattr(view, self.scope_attr, None) # If a view does not have a `throttle_scope` always allow the request if not self.scope: return True # Determine the allowed request rate as we normally would during # the `__init__` call. self.rate = self.get_rate() self.num_requests, self.duration = self.parse_rate(self.rate) # We can now proceed as normal. return super(ScopedRateThrottle, self).allow_request(request, view) def get_cache_key(self, request, view): If `view.throttle_scope` is not set, don't apply this throttle. Otherwise generate the unique cache key by concatenating the user id with the '.throttle_scope` property of the view. if request.user.is_authenticated: ident = request.user.pk else: ident = self.get_ident(request) return self.cache_format % { 'scope': self.scope, 'ident': ident }","title":"\u5185\u7f6e\u7684\u8282\u6d41\u7c7b"},{"location":"django/07-DRF/04-DRF\u8bbf\u95ee\u9650\u5236/#_4","text":"\u4f9d\u7136\u9700\u8981\u6ce8\u610f\uff0c\u914d\u7f6e\u6587\u4ef6\u914d\u7f6e\u7684\u8282\u6d41\u7c7b\u662f\u5168\u5c40\u7684\uff0c\u662f\u7ed9\u6240\u6709\u7684\u4eba\u7528\u7684\uff0c\u5982\u679c\u8bf4\u5355\u72ec\u9700\u8981\u5176\u4ed6\u7684\u65b9\u6848\u7684\u9700\u8981\u5355\u72ec\u5904\u7406\uff0c\u76f4\u63a5\u5728\u5bf9\u5e94\u7684\u89c6\u56feCBV\u4e2d\u5199 throttle_classes = [] \u5355\u72ec\u5904\u7406\u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u5c0f\u7ed3"},{"location":"django/07-DRF/05-DRF\u89e3\u6790\u5668/","text":"DRF\u7248\u672c \u89e3\u6790\u5668 restframework\u4f60\u90fd\u7ee7\u627f\u8fc7\u54ea\u4e9b\u7c7b DRF\u7248\u672c \u7248\u672c\u53ef\u4ee5\u653e\u5728URL\u91cc\uff0c\u4e5f\u53ef\u4ee5\u653e\u5728\u8bf7\u6c42\u5934\uff0c\u53ea\u8981\u662f\u53ef\u4ee5\u83b7\u53d6\u5230\u5c31\u884c\u3002 def initial(self, request, *args, **kwargs): Runs anything that needs to occur prior to calling the method handler. self.format_kwarg = self.get_format_suffix(**kwargs) # Perform content negotiation and store the accepted info on the request neg = self.perform_content_negotiation(request) request.accepted_renderer, request.accepted_media_type = neg # Determine the API version, if versioning is in use. # \u8c03\u7528self.determine_version\u65b9\u6cd5\uff0c\u4f1a\u6536\u5230\u4e24\u4e2a\u8fd4\u56de\u503c # \u4e24\u4e2a\u8fd4\u56de\u503c\u5206\u522b\u5bf9\u5e94\u7684\u7b2c\u4e00\u4e2a\u662fdetermine_version\u7684\u8fd4\u56de\u503c\uff0c\u53e6\u5916\u4e00\u4e2a\u5c31\u662f\u8fd9\u4e2aversion\u7c7b\u5bf9\u8c61\u3002 version, scheme = self.determine_version(request, *args, **kwargs) # \u5bf9\u5e94\u7684\u7248\u672c\u53f7\u548cversion\u7c7b\u5bf9\u8c61\u4f1a\u88ab\u8d4b\u503c\u7ed9request.version\u548crequest.versioning_scheme request.version, request.versioning_scheme = version, scheme # Ensure that the incoming request is permitted self.perform_authentication(request) self.check_permissions(request) self.check_throttles(request) def determine_version(self, request, *args, **kwargs): If versioning is being used, then determine any API version for the incoming request. Returns a two-tuple of (version, versioning_scheme) if self.versioning_class is None: # \u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u7684\u8bdd\u4e5f\u5c31\u662f\u8bf4\u6839\u672c\u4e0d\u7528\uff0c\u90a3\u5c31\u8fd4\u56deNone\uff0cNone\u7684\u5143\u7ec4 return (None, None) # versioning_class = api_settings.DEFAULT_VERSIONING_CLASS scheme = self.versioning_class() # \u8fd4\u56de\u8fd9\u4e2a\u7c7b\u7684\u5bf9\u8c61\u3002\u8c03\u7528\u5bf9\u8c61\u7684determine_version\u65b9\u6cd5 return (scheme.determine_version(request, *args, **kwargs), scheme) \u6ce8\u610f\u8fd9\u4e2a\u5728\u7c7b\u4e2d\u58f0\u660e\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u53ef\u4e0d\u662f\u7c7b\u5217\u8868\uff0cclass\u540e\u9762\u6ca1\u6709es\uff0c\u8fd9\u4e2a\u5c31\u662f\u5355\u72ec\u7684\u4e00\u4e2a\u7c7b\u3002 class UserView(APIView): authentication_classes = [] permission_classes = [] throttle_classes = [] # \u91cd\u8981 versioning_class = ParamVersion def get(self, request, *args, **kwargs): return HttpResponse('userlist') \u4ee5\u53c2\u6570\u5f62\u5f0f\u83b7\u53d6 \u4e0d\u8fc7\u5728\u7248\u672c\u8fd9\u4e00\u5757\uff0c\u4e0d\u7528\u81ea\u5df1\u5199\uff0cdrf\u4e2d\u5df2\u7ecf\u63d0\u4f9b\u4e86\u8fd9\u4e00\u5757\u7684\u5185\u5bb9\u3002 # \u76f4\u63a5\u8c03\u7528\u5185\u7f6e\u7684QueryParameterVersioning\u5c31\u53ef\u4ee5\u4e86\u3002 from rest_framework.versioning import QueryParameterVersioning class UserView(APIView): authentication_classes = [] permission_classes = [] throttle_classes = [] versioning_class = [QueryParameterVersioning, ] def get(self, request, *args, **kwargs): return HttpResponse('\u5f53\u524d\u7684\u7248\u672c\u4e3a\uff1a %s ' % request.version) \u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u7248\u672c\u7c7b\u7684\u5b9e\u73b0\uff1a class QueryParameterVersioning(BaseVersioning): GET /something/?version=0.1 HTTP/1.1 Host: example.com Accept: application/json invalid_version_message = _('Invalid version in query parameter.') def determine_version(self, request, *args, **kwargs): # \u800c\u4e14\u8fd9\u91cc\u5982\u679c\u83b7\u53d6\u4e0d\u5230\u914d\u7f6e\u7684VERSION_PARAM\u8fd8\u6709\u4e00\u4e2a\u9ed8\u8ba4\u7684version\u914d\u7f6e\uff1aDEFAULT_VERSION # version_param\u5c31\u662f\u4f60\u4f20\u9012\u7684\u90a3\u4e2aversion\u7684key\u662f\u4ec0\u4e48\uff0c\u540e\u9762\u7684\u5c31\u662f\u4f60\u4e0d\u4f20\u9ed8\u8ba4\u662f\u4ec0\u4e48 # \u8fd9\u4e9b\u90fd\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u53bb\u4f53\u73b0\u3002 version = request.query_params.get(self.version_param, self.default_version) if not self.is_allowed_version(version): raise exceptions.NotFound(self.invalid_version_message) return version # reverse\u7528\u6765\u53cd\u5411\u751f\u6210url\uff0cviewname\u5c31\u662f\u6211\u4eec\u7684\u90a3\u4e2aname\uff0c\u800c\u4e14version\u6211\u4eec\u4e0d\u7528\u52a0 # \u56e0\u4e3arequest.version\u643a\u5e26\u5728request\u91cc\u9762\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7701\u7565\u8fd9\u4e2a\u53c2\u6570\u3002 def reverse(self, viewname, args=None, kwargs=None, request=None, format=None, **extra): url = super(QueryParameterVersioning, self).reverse( viewname, args, kwargs, request, format, **extra ) if request.version is not None: return replace_query_param(url, self.version_param, request.version) return url # \u8bbe\u7f6e\u90fd\u5141\u8bb8\u54ea\u4e9bversion # allowed_versions = api_settings.ALLOWED_VERSIONS def is_allowed_version(self, version): if not self.allowed_versions: return True return ((version is not None and version == self.default_version) or (version in self.allowed_versions)) \u5728\u8def\u5f84\u4e2d\u4f53\u73b0 \u4e0a\u9762\u7684version\u53c2\u6570\u4f20\u9012\u662f\u4ee5\u53c2\u6570\u7684\u5f62\u5f0f\u4f20\u9012\u7684\uff0c\u4f46\u662f\u5b9e\u9645\u60c5\u51b5\u4e0b\u8fd9\u79cd\u4f7f\u7528\u7684\u5176\u5b9e\u5e76\u4e0d\u591a\uff0c\u66f4\u591a\u7684\u5176\u5b9e\u662f\u5c06version\u5305\u542b\u5728\u8def\u5f84\u4e2d\uff0c\u6bd4\u5982xxx.xxx.com/api/v1\u8fd9\u6837\u7684\u5f62\u5f0f\u3002\u5f53\u7136DRF\u5173\u4e8e\u8fd9\u79cd\u60c5\u51b5\u4e5f\u7ed9\u4f60\u5199\u597d\u4e86\u3002 class URLPathVersioning(BaseVersioning): To the client this is the same style as `NamespaceVersioning`. The difference is in the backend - this implementation uses Django's URL keyword arguments to determine the version. An example URL conf for two views that accept two different versions. urlpatterns = [ url(r'^(?P version [v1|v2]+)/users/$', users_list, name='users-list'), url(r'^(?P version [v1|v2]+)/users/(?P pk [0-9]+)/$', users_detail, name='users-detail') ] GET /1.0/something/ HTTP/1.1 Host: example.com Accept: application/json invalid_version_message = _('Invalid version in URL path.') def determine_version(self, request, *args, **kwargs): version = kwargs.get(self.version_param, self.default_version) if version is None: version = self.default_version if not self.is_allowed_version(version): raise exceptions.NotFound(self.invalid_version_message) return version def reverse(self, viewname, args=None, kwargs=None, request=None, format=None, **extra): if request.version is not None: kwargs = {} if (kwargs is None) else kwargs kwargs[self.version_param] = request.version return super(URLPathVersioning, self).reverse( viewname, args, kwargs, request, format, **extra ) \u66f4\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u914d\u7f6e\uff0c\u5176\u4ed6\u7684\u5185\u7f6e\u65b9\u6848\u4ec5\u4f9b\u53c2\u8003\uff1a class NamespaceVersioning(BaseVersioning): To the client this is the same style as `URLPathVersioning`. The difference is in the backend - this implementation uses Django's URL namespaces to determine the version. An example URL conf that is namespaced into two separate versions # users/urls.py urlpatterns = [ url(r'^/users/$', users_list, name='users-list'), url(r'^/users/(?P pk [0-9]+)/$', users_detail, name='users-detail') ] # urls.py urlpatterns = [ url(r'^v1/', include('users.urls', namespace='v1')), url(r'^v2/', include('users.urls', namespace='v2')) ] GET /1.0/something/ HTTP/1.1 Host: example.com Accept: application/json invalid_version_message = _('Invalid version in URL path. Does not match any version namespace.') def determine_version(self, request, *args, **kwargs): resolver_match = getattr(request, 'resolver_match', None) if resolver_match is None or not resolver_match.namespace: return self.default_version # Allow for possibly nested namespaces. possible_versions = resolver_match.namespace.split(':') for version in possible_versions: if self.is_allowed_version(version): return version raise exceptions.NotFound(self.invalid_version_message) def reverse(self, viewname, args=None, kwargs=None, request=None, format=None, **extra): if request.version is not None: viewname = self.get_versioned_viewname(viewname, request) return super(NamespaceVersioning, self).reverse( viewname, args, kwargs, request, format, **extra ) def get_versioned_viewname(self, viewname, request): return request.version + ':' + viewname class HostNameVersioning(BaseVersioning): GET /something/ HTTP/1.1 Host: v1.example.com Accept: application/json hostname_regex = re.compile(r'^([a-zA-Z0-9]+)\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$') invalid_version_message = _('Invalid version in hostname.') def determine_version(self, request, *args, **kwargs): hostname, separator, port = request.get_host().partition(':') match = self.hostname_regex.match(hostname) if not match: return self.default_version version = match.group(1) if not self.is_allowed_version(version): raise exceptions.NotFound(self.invalid_version_message) return version # We don't need to implement `reverse`, as the hostname will already be # preserved as part of the REST framework `reverse` implementation. class AcceptHeaderVersioning(BaseVersioning): GET /something/ HTTP/1.1 Host: example.com Accept: application/json; version=1.0 invalid_version_message = _('Invalid version in Accept header.') def determine_version(self, request, *args, **kwargs): media_type = _MediaType(request.accepted_media_type) version = media_type.params.get(self.version_param, self.default_version) version = unicode_http_header(version) if not self.is_allowed_version(version): raise exceptions.NotAcceptable(self.invalid_version_message) return version # We don't need to implement `reverse`, as the versioning is based # on the `Accept` header, not on the request URL. DRF\u89e3\u6790\u5668 def _load_post_and_files(self): Populate self._post and self._files if the content-type is a form type if self.method != 'POST': self._post, self._files = QueryDict(encoding=self._encoding), MultiValueDict() return if self._read_started and not hasattr(self, '_body'): self._mark_post_parse_error() return if self.content_type == 'multipart/form-data': if hasattr(self, '_body'): # Use already read data data = BytesIO(self._body) else: data = self try: self._post, self._files = self.parse_file_upload(self.META, data) except MultiPartParserError: # An error occurred while parsing POST data. Since when # formatting the error the request handler might access # self.POST, set self._post and self._file to prevent # attempts to parse POST data again. # Mark that an error occurred. This allows self.__repr__ to # be explicit about it instead of simply representing an # empty POST self._mark_post_parse_error() raise # \u5982\u679c\u662f\u8fd9\u4e2a\u5934\u624d\u53bbrequest.body\u4e2d\u53bb\u89e3\u6790\u6570\u636e\uff0c\u4e0d\u4ec5\u5982\u6b64\uff0c\u8fd8\u5bf9\u6570\u636e\u683c\u5f0f\u6709\u8981\u6c42 # \u6570\u636e\u683c\u5f0f\u8981\u6c42\u5fc5\u987b\u662fa=1 b=2 c=3\u8fd9\u79cd\u7684\u3002form\u8868\u5355\u7684\u63d0\u4ea4\u9ed8\u8ba4\u5c31\u662f\u8fd9\u4e2a\u5934\uff0c\u6570\u636e\u683c\u5f0f\u9ed8\u8ba4\u4e5f\u662f\u8fd9\u6837\u7684 # \u5f53\u7136Ajax\u4e5f\u662f\u53ef\u4ee5\u63d0\u4ea4\u7684\uff0c\u867d\u7136\u4f60data\u5199\u7684\u662f\u5b57\u5178\uff0c\u4e0d\u8fc7\u5185\u90e8\u4e5f\u4f1a\u7ed9\u4f60\u8f6c\u6210\u4e0a\u9762\u7684\u6570\u636e\u683c\u5f0f\uff0c\u800c\u4e14ajax\u8fd8\u53ef\u4ee5 # \u5b9a\u5236\u8bf7\u6c42\u5934headers\u3002 elif self.content_type == 'application/x-www-form-urlencoded': self._post, self._files = QueryDict(self.body, encoding=self._encoding), MultiValueDict() else: self._post, self._files = QueryDict(encoding=self._encoding), MultiValueDict() \u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\u4e5f\u662frequest.body\u6709\u503c\uff0c\u4f46\u662frequest.post\u6ca1\u6709\u503c # \u8fd9\u4e2a\u65f6\u5019\u4e0d\u4ec5\u5934\u4e0d\u6ee1\u8db3\uff0c\u6570\u636e\u683c\u5f0f\u4e5f\u4e0d\u6ee1\u8db3\uff0c\u90fd\u4e0d\u6ee1\u8db3\u3002\u6240\u6709request.post\u4f9d\u7136\u6ca1\u6709\u503c\u3002 $.ajax({ url: xxx, method: xxx, data: JSON.Stringfy({'a':1,'b':2}) }) \u4e0a\u9762\u8fd9\u4e2a\u662fDjango\u7684\uff0c\u63a5\u4e0b\u6765\u770bDRF\u89e3\u6790\u5668 \u83b7\u53d6\u7528\u6237\u8bf7\u6c42 \u83b7\u53d6\u7528\u6237\u8bf7\u6c42\u4f53 \u6839\u636e\u7528\u6237\u8bf7\u6c42\u5934\u548cparser_classes\u4e2d\u652f\u6301\u7684\u5168\u7ed9\u4f60\u6c42\u5934\u8fdb\u884c\u6bd4\u8f83 \u7b26\u5408\u7684\u5904\u7406\u7c7b\u8fdb\u884c\u8bf7\u6c42\u7684\u5904\u7406 \u8d4b\u503c\u7ed9request.data \u8c03\u7528request.data\u7684\u65f6\u5019\u751f\u6548\u3002 # JSONParser class JSONParser(BaseParser): Parses JSON-serialized data. # \u5728JSONParser\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2amedia type media_type = 'application/json' renderer_class = renderers.JSONRenderer strict = api_settings.STRICT_JSON def parse(self, stream, media_type=None, parser_context=None): Parses the incoming bytestream as JSON and returns the resulting data. parser_context = parser_context or {} encoding = parser_context.get('encoding', settings.DEFAULT_CHARSET) try: decoded_stream = codecs.getreader(encoding)(stream) parse_constant = json.strict_constant if self.strict else None return json.load(decoded_stream, parse_constant=parse_constant) except ValueError as exc: raise ParseError('JSON parse error - %s' % six.text_type(exc)) # FormParser class FormParser(BaseParser): Parser for form data. media_type = 'application/x-www-form-urlencoded' def parse(self, stream, media_type=None, parser_context=None): Parses the incoming bytestream as a URL encoded form, and returns the resulting QueryDict. parser_context = parser_context or {} encoding = parser_context.get('encoding', settings.DEFAULT_CHARSET) data = QueryDict(stream.read(), encoding=encoding) return data # 1\u3001\u6211\u4eec\u77e5\u9053\u6700\u540e\u83b7\u53d6\u5230\u7684\u7ed3\u679c\u53ef\u4ee5\u4ecerequest.data\u4e2d\u62ff\u5230\uff0c\u4f46\u662f\u8fd9\u4e2arequest\u662f\u7ecf\u8fc7\u5c01\u88c5\u540e\u7684Request\u7684\u5bf9\u8c61 # \u56e0\u6b64\u6211\u4eec\u76f4\u63a5\u53bbRequest\u91cc\u9762\u53bb\u627edata\u5c5e\u6027\uff0c\u9996\u5148\u8c03\u7528\u4e86_hasattr\uff0c\u6ce8\u610f\u8fd9\u91cc\u662f\u5e26\u4e0b\u5212\u7ebf\u7684 @property def data(self): # 3\u3001\u9ed8\u8ba4\u7684self._full_data\u4e3aEmpty\uff0c\u90a3\u4e48_hasattr\u4f1a\u8fd4\u56deFalse\uff0c\u76f4\u63a5\u8c03\u7528_load_data_and_files if not _hasattr(self, '_full_data'): self._load_data_and_files() return self._full_data # 2\u3001\u627e\u5230\u4e0b\u5212\u7ebf_has_attr,\u5b83\u4f1a\u4ece\u5f53\u524dself\u4e2d\u53bb\u53d6\u5bf9\u5e94\u7684name\uff0c\u5982\u679c\u8fd9\u4e2aname\u53d6\u5230\u4e86\u662fEmpty\uff0c\u90a3\u4e48\u5c31\u8fd4\u56deFalse def _hasattr(obj, name): return not getattr(obj, name) is Empty # 4\u3001_full_data\u9ed8\u8ba4\u503c self._full_data = Empty # 5\u3001Empty\u7684\u5b9a\u4e49 class Empty(object): Placeholder for unset attributes. Cannot use `None`, as that may be a valid value. pass # 6\u3001_load_data_and_files\u65b9\u6cd5 def _load_data_and_files(self): Parses the request content into `self.data`. # \u9ed8\u8ba4\u7684self._data = Empty\uff0c\u6240\u4ee5\u6761\u4ef6\u6ee1\u8db3\u76f4\u63a5\u8fdb\u5165\u8c03\u7528 if not _hasattr(self, '_data'): # \u8c03\u7528self._parse\u65b9\u6cd5 self._data, self._files = self._parse() if self._files: self._full_data = self._data.copy() self._full_data.update(self._files) else: self._full_data = self._data # if a form media type, copy data files refs to the underlying # http request so that closable objects are handled appropriately. if is_form_media_type(self.content_type): self._request._post = self.POST self._request._files = self.FILES # 7\u3001self._parse\u65b9\u6cd5 def _parse(self): \u683c\u5f0f\u5316request\u7684\u6587\u672c\uff0c\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a\u4e24\u4e2a\u5143\u7d20\u7684\u5143\u7ec4(data\uff0cfiles) May raise an `UnsupportedMediaType`, or `ParseError` exception. # 8\u3001\u83b7\u53d6\u7528\u6237\u7684\u8bf7\u6c42\u5934 media_type = self.content_type try: # 10\u3001\u83b7\u53d6\u7528\u6237\u7684request.body\u7684\u5185\u5bb9\uff0c\u4ee5stream\u7684\u5f62\u5f0f stream = self.stream except RawPostDataException: if not hasattr(self._request, '_post'): raise # If request.POST has been accessed in middleware, and a method='POST' # request was made with 'multipart/form-data', then the request stream # will already have been exhausted. if self._supports_form_parsing(): return (self._request.POST, self._request.FILES) stream = None if stream is None or media_type is None: if media_type and is_form_media_type(media_type): empty_data = QueryDict('', encoding=self._request._encoding) else: empty_data = {} empty_files = MultiValueDict() return (empty_data, empty_files) # 13\u3001\u8c03\u7528parser\u9009\u62e9\u5668\uff0c\u540e\u9762\u7684self.parsers\u5176\u5b9e\u5c31\u662f\u652f\u6301\u7684\u5bf9\u8c61\u3002parser_classes # self\u4e2d\u4e5f\u6709content-type\uff0c\u6240\u4ee5\u8fd9\u4e2aself\u662f\u8bf7\u6c42\u5bf9\u8c61\uff0c\u5305\u542b\u7528\u6237\u8bf7\u6c42\u7684content-type parser = self.negotiator.select_parser(self, self.parsers) if not parser: raise exceptions.UnsupportedMediaType(media_type) try: parsed = parser.parse(stream, media_type, self.parser_context) except Exception: # If we get an exception during parsing, fill in empty data and # re-raise. Ensures we don't simply repeat the error when # attempting to render the browsable renderer response, or when # logging the request or similar. self._data = QueryDict('', encoding=self._request._encoding) self._files = MultiValueDict() self._full_data = self._data raise # Parser classes may return the raw data, or a # DataAndFiles object. Unpack the result as required. try: return (parsed.data, parsed.files) except AttributeError: empty_files = MultiValueDict() return (parsed, empty_files) # 9\u3001\u52a0\u4e86property\u5c5e\u6027\uff0c\u53ef\u4ee5\u76f4\u63a5\u50cf\u503c\u4e00\u6837\u53bb\u4f7f\u7528\uff0c\u8fd9\u4e2acontent_type\u5b9e\u9645\u4e0a\u5c31\u662f\u53bb\u83b7\u53d6\u7528\u6237\u5b9e\u9645\u7684\u8bf7\u6c42\u5934\u3002 @property def content_type(self): meta = self._request.META return meta.get('CONTENT_TYPE', meta.get('HTTP_CONTENT_TYPE', '')) # 11\u3001stream @property def stream(self): Returns an object that may be used to stream the request content. # \u9ed8\u8ba4\u7684_stream\u5c31\u662fEmpty\u6240\u4ee5\uff0c\u76f4\u63a5\u8c03\u7528_load_stream\u65b9\u6cd5 if not _hasattr(self, '_stream'): self._load_stream() return self._stream # 12\u3001\u8fd4\u56deBytesIO\u5f62\u5f0f\u7684body\u4fe1\u606f def _load_stream(self): Return the content body of the request, as a stream. meta = self._request.META try: content_length = int( meta.get('CONTENT_LENGTH', meta.get('HTTP_CONTENT_LENGTH', 0)) ) except (ValueError, TypeError): content_length = 0 if content_length == 0: self._stream = None elif not self._request._read_started: self._stream = self._request else: self._stream = io.BytesIO(self.body) \u770b\u4e00\u5207\u7684\u5f00\u5934\uff0c\u5165\u53e3\u8fd8\u662fdispatch def initialize_request(self, request, *args, **kwargs): Returns the initial request object. parser_context = self.get_parser_context(request) return Request( request, # \u8fd9\u6837Request\u7684\u5b9e\u4f8b\u5c31\u4f1a\u5b58\u5728self.parsers\u8fd9\u4e2a\u5c5e\u6027\u53ef\u4ee5\u8c03\u7528\u3002 parsers=self.get_parsers(), authenticators=self.get_authenticators(), negotiator=self.get_content_negotiator(), parser_context=parser_context ) def get_parsers(self): Instantiates and returns the list of parsers that this view can use. return [parser() for parser in self.parser_classes] \u6700\u540e\u8fd9\u4e2a\u89e3\u6790\u5668\u7684\u5c5e\u6027\u5199\u5728\u5168\u5c40\u5c31\u53ef\u4ee5\u4e86\u3002 http\u534f\u8bae\u7684\u8bf7\u6c42\u65b9\u6cd5 \u5e38\u7528\u7684\u8bf7\u6c42\u5934\uff08\u72b6\u6001\u7801\uff0c\u65b9\u6cd5\u7b49\uff09\uff1a application/ refer\u7528\u6765\u505a\u9632\u76d7\u94fe\uff0cuser_agent\uff0caccept\uff0chost\u7b49\u3002","title":"DRF\u7248\u672c&\u89e3\u6790\u5668"},{"location":"django/07-DRF/05-DRF\u89e3\u6790\u5668/#drf","text":"restframework\u4f60\u90fd\u7ee7\u627f\u8fc7\u54ea\u4e9b\u7c7b","title":"DRF\u7248\u672c&amp;\u89e3\u6790\u5668"},{"location":"django/07-DRF/05-DRF\u89e3\u6790\u5668/#drf_1","text":"\u7248\u672c\u53ef\u4ee5\u653e\u5728URL\u91cc\uff0c\u4e5f\u53ef\u4ee5\u653e\u5728\u8bf7\u6c42\u5934\uff0c\u53ea\u8981\u662f\u53ef\u4ee5\u83b7\u53d6\u5230\u5c31\u884c\u3002 def initial(self, request, *args, **kwargs): Runs anything that needs to occur prior to calling the method handler. self.format_kwarg = self.get_format_suffix(**kwargs) # Perform content negotiation and store the accepted info on the request neg = self.perform_content_negotiation(request) request.accepted_renderer, request.accepted_media_type = neg # Determine the API version, if versioning is in use. # \u8c03\u7528self.determine_version\u65b9\u6cd5\uff0c\u4f1a\u6536\u5230\u4e24\u4e2a\u8fd4\u56de\u503c # \u4e24\u4e2a\u8fd4\u56de\u503c\u5206\u522b\u5bf9\u5e94\u7684\u7b2c\u4e00\u4e2a\u662fdetermine_version\u7684\u8fd4\u56de\u503c\uff0c\u53e6\u5916\u4e00\u4e2a\u5c31\u662f\u8fd9\u4e2aversion\u7c7b\u5bf9\u8c61\u3002 version, scheme = self.determine_version(request, *args, **kwargs) # \u5bf9\u5e94\u7684\u7248\u672c\u53f7\u548cversion\u7c7b\u5bf9\u8c61\u4f1a\u88ab\u8d4b\u503c\u7ed9request.version\u548crequest.versioning_scheme request.version, request.versioning_scheme = version, scheme # Ensure that the incoming request is permitted self.perform_authentication(request) self.check_permissions(request) self.check_throttles(request) def determine_version(self, request, *args, **kwargs): If versioning is being used, then determine any API version for the incoming request. Returns a two-tuple of (version, versioning_scheme) if self.versioning_class is None: # \u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u7684\u8bdd\u4e5f\u5c31\u662f\u8bf4\u6839\u672c\u4e0d\u7528\uff0c\u90a3\u5c31\u8fd4\u56deNone\uff0cNone\u7684\u5143\u7ec4 return (None, None) # versioning_class = api_settings.DEFAULT_VERSIONING_CLASS scheme = self.versioning_class() # \u8fd4\u56de\u8fd9\u4e2a\u7c7b\u7684\u5bf9\u8c61\u3002\u8c03\u7528\u5bf9\u8c61\u7684determine_version\u65b9\u6cd5 return (scheme.determine_version(request, *args, **kwargs), scheme) \u6ce8\u610f\u8fd9\u4e2a\u5728\u7c7b\u4e2d\u58f0\u660e\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u53ef\u4e0d\u662f\u7c7b\u5217\u8868\uff0cclass\u540e\u9762\u6ca1\u6709es\uff0c\u8fd9\u4e2a\u5c31\u662f\u5355\u72ec\u7684\u4e00\u4e2a\u7c7b\u3002 class UserView(APIView): authentication_classes = [] permission_classes = [] throttle_classes = [] # \u91cd\u8981 versioning_class = ParamVersion def get(self, request, *args, **kwargs): return HttpResponse('userlist')","title":"DRF\u7248\u672c"},{"location":"django/07-DRF/05-DRF\u89e3\u6790\u5668/#_1","text":"\u4e0d\u8fc7\u5728\u7248\u672c\u8fd9\u4e00\u5757\uff0c\u4e0d\u7528\u81ea\u5df1\u5199\uff0cdrf\u4e2d\u5df2\u7ecf\u63d0\u4f9b\u4e86\u8fd9\u4e00\u5757\u7684\u5185\u5bb9\u3002 # \u76f4\u63a5\u8c03\u7528\u5185\u7f6e\u7684QueryParameterVersioning\u5c31\u53ef\u4ee5\u4e86\u3002 from rest_framework.versioning import QueryParameterVersioning class UserView(APIView): authentication_classes = [] permission_classes = [] throttle_classes = [] versioning_class = [QueryParameterVersioning, ] def get(self, request, *args, **kwargs): return HttpResponse('\u5f53\u524d\u7684\u7248\u672c\u4e3a\uff1a %s ' % request.version) \u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u7248\u672c\u7c7b\u7684\u5b9e\u73b0\uff1a class QueryParameterVersioning(BaseVersioning): GET /something/?version=0.1 HTTP/1.1 Host: example.com Accept: application/json invalid_version_message = _('Invalid version in query parameter.') def determine_version(self, request, *args, **kwargs): # \u800c\u4e14\u8fd9\u91cc\u5982\u679c\u83b7\u53d6\u4e0d\u5230\u914d\u7f6e\u7684VERSION_PARAM\u8fd8\u6709\u4e00\u4e2a\u9ed8\u8ba4\u7684version\u914d\u7f6e\uff1aDEFAULT_VERSION # version_param\u5c31\u662f\u4f60\u4f20\u9012\u7684\u90a3\u4e2aversion\u7684key\u662f\u4ec0\u4e48\uff0c\u540e\u9762\u7684\u5c31\u662f\u4f60\u4e0d\u4f20\u9ed8\u8ba4\u662f\u4ec0\u4e48 # \u8fd9\u4e9b\u90fd\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u53bb\u4f53\u73b0\u3002 version = request.query_params.get(self.version_param, self.default_version) if not self.is_allowed_version(version): raise exceptions.NotFound(self.invalid_version_message) return version # reverse\u7528\u6765\u53cd\u5411\u751f\u6210url\uff0cviewname\u5c31\u662f\u6211\u4eec\u7684\u90a3\u4e2aname\uff0c\u800c\u4e14version\u6211\u4eec\u4e0d\u7528\u52a0 # \u56e0\u4e3arequest.version\u643a\u5e26\u5728request\u91cc\u9762\u4e86\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7701\u7565\u8fd9\u4e2a\u53c2\u6570\u3002 def reverse(self, viewname, args=None, kwargs=None, request=None, format=None, **extra): url = super(QueryParameterVersioning, self).reverse( viewname, args, kwargs, request, format, **extra ) if request.version is not None: return replace_query_param(url, self.version_param, request.version) return url # \u8bbe\u7f6e\u90fd\u5141\u8bb8\u54ea\u4e9bversion # allowed_versions = api_settings.ALLOWED_VERSIONS def is_allowed_version(self, version): if not self.allowed_versions: return True return ((version is not None and version == self.default_version) or (version in self.allowed_versions))","title":"\u4ee5\u53c2\u6570\u5f62\u5f0f\u83b7\u53d6"},{"location":"django/07-DRF/05-DRF\u89e3\u6790\u5668/#_2","text":"\u4e0a\u9762\u7684version\u53c2\u6570\u4f20\u9012\u662f\u4ee5\u53c2\u6570\u7684\u5f62\u5f0f\u4f20\u9012\u7684\uff0c\u4f46\u662f\u5b9e\u9645\u60c5\u51b5\u4e0b\u8fd9\u79cd\u4f7f\u7528\u7684\u5176\u5b9e\u5e76\u4e0d\u591a\uff0c\u66f4\u591a\u7684\u5176\u5b9e\u662f\u5c06version\u5305\u542b\u5728\u8def\u5f84\u4e2d\uff0c\u6bd4\u5982xxx.xxx.com/api/v1\u8fd9\u6837\u7684\u5f62\u5f0f\u3002\u5f53\u7136DRF\u5173\u4e8e\u8fd9\u79cd\u60c5\u51b5\u4e5f\u7ed9\u4f60\u5199\u597d\u4e86\u3002 class URLPathVersioning(BaseVersioning): To the client this is the same style as `NamespaceVersioning`. The difference is in the backend - this implementation uses Django's URL keyword arguments to determine the version. An example URL conf for two views that accept two different versions. urlpatterns = [ url(r'^(?P version [v1|v2]+)/users/$', users_list, name='users-list'), url(r'^(?P version [v1|v2]+)/users/(?P pk [0-9]+)/$', users_detail, name='users-detail') ] GET /1.0/something/ HTTP/1.1 Host: example.com Accept: application/json invalid_version_message = _('Invalid version in URL path.') def determine_version(self, request, *args, **kwargs): version = kwargs.get(self.version_param, self.default_version) if version is None: version = self.default_version if not self.is_allowed_version(version): raise exceptions.NotFound(self.invalid_version_message) return version def reverse(self, viewname, args=None, kwargs=None, request=None, format=None, **extra): if request.version is not None: kwargs = {} if (kwargs is None) else kwargs kwargs[self.version_param] = request.version return super(URLPathVersioning, self).reverse( viewname, args, kwargs, request, format, **extra ) \u66f4\u63a8\u8350\u4f7f\u7528\u8fd9\u79cd\u914d\u7f6e\uff0c\u5176\u4ed6\u7684\u5185\u7f6e\u65b9\u6848\u4ec5\u4f9b\u53c2\u8003\uff1a class NamespaceVersioning(BaseVersioning): To the client this is the same style as `URLPathVersioning`. The difference is in the backend - this implementation uses Django's URL namespaces to determine the version. An example URL conf that is namespaced into two separate versions # users/urls.py urlpatterns = [ url(r'^/users/$', users_list, name='users-list'), url(r'^/users/(?P pk [0-9]+)/$', users_detail, name='users-detail') ] # urls.py urlpatterns = [ url(r'^v1/', include('users.urls', namespace='v1')), url(r'^v2/', include('users.urls', namespace='v2')) ] GET /1.0/something/ HTTP/1.1 Host: example.com Accept: application/json invalid_version_message = _('Invalid version in URL path. Does not match any version namespace.') def determine_version(self, request, *args, **kwargs): resolver_match = getattr(request, 'resolver_match', None) if resolver_match is None or not resolver_match.namespace: return self.default_version # Allow for possibly nested namespaces. possible_versions = resolver_match.namespace.split(':') for version in possible_versions: if self.is_allowed_version(version): return version raise exceptions.NotFound(self.invalid_version_message) def reverse(self, viewname, args=None, kwargs=None, request=None, format=None, **extra): if request.version is not None: viewname = self.get_versioned_viewname(viewname, request) return super(NamespaceVersioning, self).reverse( viewname, args, kwargs, request, format, **extra ) def get_versioned_viewname(self, viewname, request): return request.version + ':' + viewname class HostNameVersioning(BaseVersioning): GET /something/ HTTP/1.1 Host: v1.example.com Accept: application/json hostname_regex = re.compile(r'^([a-zA-Z0-9]+)\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$') invalid_version_message = _('Invalid version in hostname.') def determine_version(self, request, *args, **kwargs): hostname, separator, port = request.get_host().partition(':') match = self.hostname_regex.match(hostname) if not match: return self.default_version version = match.group(1) if not self.is_allowed_version(version): raise exceptions.NotFound(self.invalid_version_message) return version # We don't need to implement `reverse`, as the hostname will already be # preserved as part of the REST framework `reverse` implementation. class AcceptHeaderVersioning(BaseVersioning): GET /something/ HTTP/1.1 Host: example.com Accept: application/json; version=1.0 invalid_version_message = _('Invalid version in Accept header.') def determine_version(self, request, *args, **kwargs): media_type = _MediaType(request.accepted_media_type) version = media_type.params.get(self.version_param, self.default_version) version = unicode_http_header(version) if not self.is_allowed_version(version): raise exceptions.NotAcceptable(self.invalid_version_message) return version # We don't need to implement `reverse`, as the versioning is based # on the `Accept` header, not on the request URL.","title":"\u5728\u8def\u5f84\u4e2d\u4f53\u73b0"},{"location":"django/07-DRF/05-DRF\u89e3\u6790\u5668/#drf_2","text":"def _load_post_and_files(self): Populate self._post and self._files if the content-type is a form type if self.method != 'POST': self._post, self._files = QueryDict(encoding=self._encoding), MultiValueDict() return if self._read_started and not hasattr(self, '_body'): self._mark_post_parse_error() return if self.content_type == 'multipart/form-data': if hasattr(self, '_body'): # Use already read data data = BytesIO(self._body) else: data = self try: self._post, self._files = self.parse_file_upload(self.META, data) except MultiPartParserError: # An error occurred while parsing POST data. Since when # formatting the error the request handler might access # self.POST, set self._post and self._file to prevent # attempts to parse POST data again. # Mark that an error occurred. This allows self.__repr__ to # be explicit about it instead of simply representing an # empty POST self._mark_post_parse_error() raise # \u5982\u679c\u662f\u8fd9\u4e2a\u5934\u624d\u53bbrequest.body\u4e2d\u53bb\u89e3\u6790\u6570\u636e\uff0c\u4e0d\u4ec5\u5982\u6b64\uff0c\u8fd8\u5bf9\u6570\u636e\u683c\u5f0f\u6709\u8981\u6c42 # \u6570\u636e\u683c\u5f0f\u8981\u6c42\u5fc5\u987b\u662fa=1 b=2 c=3\u8fd9\u79cd\u7684\u3002form\u8868\u5355\u7684\u63d0\u4ea4\u9ed8\u8ba4\u5c31\u662f\u8fd9\u4e2a\u5934\uff0c\u6570\u636e\u683c\u5f0f\u9ed8\u8ba4\u4e5f\u662f\u8fd9\u6837\u7684 # \u5f53\u7136Ajax\u4e5f\u662f\u53ef\u4ee5\u63d0\u4ea4\u7684\uff0c\u867d\u7136\u4f60data\u5199\u7684\u662f\u5b57\u5178\uff0c\u4e0d\u8fc7\u5185\u90e8\u4e5f\u4f1a\u7ed9\u4f60\u8f6c\u6210\u4e0a\u9762\u7684\u6570\u636e\u683c\u5f0f\uff0c\u800c\u4e14ajax\u8fd8\u53ef\u4ee5 # \u5b9a\u5236\u8bf7\u6c42\u5934headers\u3002 elif self.content_type == 'application/x-www-form-urlencoded': self._post, self._files = QueryDict(self.body, encoding=self._encoding), MultiValueDict() else: self._post, self._files = QueryDict(encoding=self._encoding), MultiValueDict() \u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\u4e5f\u662frequest.body\u6709\u503c\uff0c\u4f46\u662frequest.post\u6ca1\u6709\u503c # \u8fd9\u4e2a\u65f6\u5019\u4e0d\u4ec5\u5934\u4e0d\u6ee1\u8db3\uff0c\u6570\u636e\u683c\u5f0f\u4e5f\u4e0d\u6ee1\u8db3\uff0c\u90fd\u4e0d\u6ee1\u8db3\u3002\u6240\u6709request.post\u4f9d\u7136\u6ca1\u6709\u503c\u3002 $.ajax({ url: xxx, method: xxx, data: JSON.Stringfy({'a':1,'b':2}) }) \u4e0a\u9762\u8fd9\u4e2a\u662fDjango\u7684\uff0c\u63a5\u4e0b\u6765\u770bDRF\u89e3\u6790\u5668 \u83b7\u53d6\u7528\u6237\u8bf7\u6c42 \u83b7\u53d6\u7528\u6237\u8bf7\u6c42\u4f53 \u6839\u636e\u7528\u6237\u8bf7\u6c42\u5934\u548cparser_classes\u4e2d\u652f\u6301\u7684\u5168\u7ed9\u4f60\u6c42\u5934\u8fdb\u884c\u6bd4\u8f83 \u7b26\u5408\u7684\u5904\u7406\u7c7b\u8fdb\u884c\u8bf7\u6c42\u7684\u5904\u7406 \u8d4b\u503c\u7ed9request.data \u8c03\u7528request.data\u7684\u65f6\u5019\u751f\u6548\u3002 # JSONParser class JSONParser(BaseParser): Parses JSON-serialized data. # \u5728JSONParser\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2amedia type media_type = 'application/json' renderer_class = renderers.JSONRenderer strict = api_settings.STRICT_JSON def parse(self, stream, media_type=None, parser_context=None): Parses the incoming bytestream as JSON and returns the resulting data. parser_context = parser_context or {} encoding = parser_context.get('encoding', settings.DEFAULT_CHARSET) try: decoded_stream = codecs.getreader(encoding)(stream) parse_constant = json.strict_constant if self.strict else None return json.load(decoded_stream, parse_constant=parse_constant) except ValueError as exc: raise ParseError('JSON parse error - %s' % six.text_type(exc)) # FormParser class FormParser(BaseParser): Parser for form data. media_type = 'application/x-www-form-urlencoded' def parse(self, stream, media_type=None, parser_context=None): Parses the incoming bytestream as a URL encoded form, and returns the resulting QueryDict. parser_context = parser_context or {} encoding = parser_context.get('encoding', settings.DEFAULT_CHARSET) data = QueryDict(stream.read(), encoding=encoding) return data # 1\u3001\u6211\u4eec\u77e5\u9053\u6700\u540e\u83b7\u53d6\u5230\u7684\u7ed3\u679c\u53ef\u4ee5\u4ecerequest.data\u4e2d\u62ff\u5230\uff0c\u4f46\u662f\u8fd9\u4e2arequest\u662f\u7ecf\u8fc7\u5c01\u88c5\u540e\u7684Request\u7684\u5bf9\u8c61 # \u56e0\u6b64\u6211\u4eec\u76f4\u63a5\u53bbRequest\u91cc\u9762\u53bb\u627edata\u5c5e\u6027\uff0c\u9996\u5148\u8c03\u7528\u4e86_hasattr\uff0c\u6ce8\u610f\u8fd9\u91cc\u662f\u5e26\u4e0b\u5212\u7ebf\u7684 @property def data(self): # 3\u3001\u9ed8\u8ba4\u7684self._full_data\u4e3aEmpty\uff0c\u90a3\u4e48_hasattr\u4f1a\u8fd4\u56deFalse\uff0c\u76f4\u63a5\u8c03\u7528_load_data_and_files if not _hasattr(self, '_full_data'): self._load_data_and_files() return self._full_data # 2\u3001\u627e\u5230\u4e0b\u5212\u7ebf_has_attr,\u5b83\u4f1a\u4ece\u5f53\u524dself\u4e2d\u53bb\u53d6\u5bf9\u5e94\u7684name\uff0c\u5982\u679c\u8fd9\u4e2aname\u53d6\u5230\u4e86\u662fEmpty\uff0c\u90a3\u4e48\u5c31\u8fd4\u56deFalse def _hasattr(obj, name): return not getattr(obj, name) is Empty # 4\u3001_full_data\u9ed8\u8ba4\u503c self._full_data = Empty # 5\u3001Empty\u7684\u5b9a\u4e49 class Empty(object): Placeholder for unset attributes. Cannot use `None`, as that may be a valid value. pass # 6\u3001_load_data_and_files\u65b9\u6cd5 def _load_data_and_files(self): Parses the request content into `self.data`. # \u9ed8\u8ba4\u7684self._data = Empty\uff0c\u6240\u4ee5\u6761\u4ef6\u6ee1\u8db3\u76f4\u63a5\u8fdb\u5165\u8c03\u7528 if not _hasattr(self, '_data'): # \u8c03\u7528self._parse\u65b9\u6cd5 self._data, self._files = self._parse() if self._files: self._full_data = self._data.copy() self._full_data.update(self._files) else: self._full_data = self._data # if a form media type, copy data files refs to the underlying # http request so that closable objects are handled appropriately. if is_form_media_type(self.content_type): self._request._post = self.POST self._request._files = self.FILES # 7\u3001self._parse\u65b9\u6cd5 def _parse(self): \u683c\u5f0f\u5316request\u7684\u6587\u672c\uff0c\u5e76\u4e14\u8fd4\u56de\u4e00\u4e2a\u4e24\u4e2a\u5143\u7d20\u7684\u5143\u7ec4(data\uff0cfiles) May raise an `UnsupportedMediaType`, or `ParseError` exception. # 8\u3001\u83b7\u53d6\u7528\u6237\u7684\u8bf7\u6c42\u5934 media_type = self.content_type try: # 10\u3001\u83b7\u53d6\u7528\u6237\u7684request.body\u7684\u5185\u5bb9\uff0c\u4ee5stream\u7684\u5f62\u5f0f stream = self.stream except RawPostDataException: if not hasattr(self._request, '_post'): raise # If request.POST has been accessed in middleware, and a method='POST' # request was made with 'multipart/form-data', then the request stream # will already have been exhausted. if self._supports_form_parsing(): return (self._request.POST, self._request.FILES) stream = None if stream is None or media_type is None: if media_type and is_form_media_type(media_type): empty_data = QueryDict('', encoding=self._request._encoding) else: empty_data = {} empty_files = MultiValueDict() return (empty_data, empty_files) # 13\u3001\u8c03\u7528parser\u9009\u62e9\u5668\uff0c\u540e\u9762\u7684self.parsers\u5176\u5b9e\u5c31\u662f\u652f\u6301\u7684\u5bf9\u8c61\u3002parser_classes # self\u4e2d\u4e5f\u6709content-type\uff0c\u6240\u4ee5\u8fd9\u4e2aself\u662f\u8bf7\u6c42\u5bf9\u8c61\uff0c\u5305\u542b\u7528\u6237\u8bf7\u6c42\u7684content-type parser = self.negotiator.select_parser(self, self.parsers) if not parser: raise exceptions.UnsupportedMediaType(media_type) try: parsed = parser.parse(stream, media_type, self.parser_context) except Exception: # If we get an exception during parsing, fill in empty data and # re-raise. Ensures we don't simply repeat the error when # attempting to render the browsable renderer response, or when # logging the request or similar. self._data = QueryDict('', encoding=self._request._encoding) self._files = MultiValueDict() self._full_data = self._data raise # Parser classes may return the raw data, or a # DataAndFiles object. Unpack the result as required. try: return (parsed.data, parsed.files) except AttributeError: empty_files = MultiValueDict() return (parsed, empty_files) # 9\u3001\u52a0\u4e86property\u5c5e\u6027\uff0c\u53ef\u4ee5\u76f4\u63a5\u50cf\u503c\u4e00\u6837\u53bb\u4f7f\u7528\uff0c\u8fd9\u4e2acontent_type\u5b9e\u9645\u4e0a\u5c31\u662f\u53bb\u83b7\u53d6\u7528\u6237\u5b9e\u9645\u7684\u8bf7\u6c42\u5934\u3002 @property def content_type(self): meta = self._request.META return meta.get('CONTENT_TYPE', meta.get('HTTP_CONTENT_TYPE', '')) # 11\u3001stream @property def stream(self): Returns an object that may be used to stream the request content. # \u9ed8\u8ba4\u7684_stream\u5c31\u662fEmpty\u6240\u4ee5\uff0c\u76f4\u63a5\u8c03\u7528_load_stream\u65b9\u6cd5 if not _hasattr(self, '_stream'): self._load_stream() return self._stream # 12\u3001\u8fd4\u56deBytesIO\u5f62\u5f0f\u7684body\u4fe1\u606f def _load_stream(self): Return the content body of the request, as a stream. meta = self._request.META try: content_length = int( meta.get('CONTENT_LENGTH', meta.get('HTTP_CONTENT_LENGTH', 0)) ) except (ValueError, TypeError): content_length = 0 if content_length == 0: self._stream = None elif not self._request._read_started: self._stream = self._request else: self._stream = io.BytesIO(self.body) \u770b\u4e00\u5207\u7684\u5f00\u5934\uff0c\u5165\u53e3\u8fd8\u662fdispatch def initialize_request(self, request, *args, **kwargs): Returns the initial request object. parser_context = self.get_parser_context(request) return Request( request, # \u8fd9\u6837Request\u7684\u5b9e\u4f8b\u5c31\u4f1a\u5b58\u5728self.parsers\u8fd9\u4e2a\u5c5e\u6027\u53ef\u4ee5\u8c03\u7528\u3002 parsers=self.get_parsers(), authenticators=self.get_authenticators(), negotiator=self.get_content_negotiator(), parser_context=parser_context ) def get_parsers(self): Instantiates and returns the list of parsers that this view can use. return [parser() for parser in self.parser_classes] \u6700\u540e\u8fd9\u4e2a\u89e3\u6790\u5668\u7684\u5c5e\u6027\u5199\u5728\u5168\u5c40\u5c31\u53ef\u4ee5\u4e86\u3002 http\u534f\u8bae\u7684\u8bf7\u6c42\u65b9\u6cd5 \u5e38\u7528\u7684\u8bf7\u6c42\u5934\uff08\u72b6\u6001\u7801\uff0c\u65b9\u6cd5\u7b49\uff09\uff1a application/ refer\u7528\u6765\u505a\u9632\u76d7\u94fe\uff0cuser_agent\uff0caccept\uff0chost\u7b49\u3002","title":"DRF\u89e3\u6790\u5668"},{"location":"django/07-DRF/06-DRF\u5e8f\u5217\u5316/","text":"DRF\u5e8f\u5217\u5316 \u8bf7\u6c42\u8ba4\u8bc1 QuerySet\u8fdb\u884c\u5e8f\u5217\u5316 \u7b80\u5355\u4f7f\u7528 QuerySet\u5e8f\u5217\u5316 class UserInfoSer(serializers.Serializer): \u4ee5userinfo\u8868\u4e3a\u4f8b\u5b50\uff0c\u5982\u4e0b\u662f\u6211\u60f3\u8981\u663e\u793a\u7684\u5b57\u6bb5 1-username\u548cpassword\u90fd\u662f\u672c\u8868\u5b57\u6bb5\uff0c\u76f4\u63a5\u5c55\u793a\u5c31\u53ef\u4ee5\uff0c\u8c03\u7528\u5bf9\u5e94\u7c7b\u522b\u4e3aCharField 2-user_type\u4e3a\u7528\u6237\u7c7b\u578b\uff0c\u8fd9\u5728\u6211\u4eec\u7684models\u5b9a\u4e49\u4e2d\u662f\u4e00\u4e2achoice\u5b57\u6bb5\uff0c\u5982\u679c\u76f4\u63a5\u53d6IntegerField\u7684\u8bdd \u90a3\u4e48\u8fd4\u56de\u7684\u5c06\u662f\u4e00\u4e2aid\u800c\u5df2\uff0c\u800c\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684typeid\u5bf9\u5e94\u7684\u4e2d\u6587\u540d\u79f0\uff0c\u56e0\u6b64\u8fd9\u4e00\u5757\u8981\u6307\u5b9a\u6e90source\u3002 orm\u5185\u90e8\u9488\u5bf9choice\u5b57\u6bb5\u5b58\u5728\u4e00\u4e2aget_Foo_display\u7684\u65b9\u6cd5\uff0c\u4f1a\u8fd4\u56de\u5bf9\u5e94\u7684choice\u5bf9\u5e94\u7684\u503c\uff0c\u90a3\u4e48\u5bf9\u5e94\u5230\u8fd9\u91cc\u5c31\u662f \u8981\u663e\u793auser_type\u5b57\u6bb5\u5bf9\u5e94\u7684choice\u7684\u9009\u9879\u503c\u3002 3-\u5916\u952e\u5b57\u6bb5\uff0c\u8fd9\u91cc\u8fd8\u53ef\u4ee5\u586b\u5199\u5bf9\u5e94\u7684\u5916\u952e\u5b57\u6bb5\uff0c\u6bd4\u5982group\uff0c\u5bf9\u5e94\u7684\u5c31\u662fgroup\u5bf9\u8c61\uff0c.title\uff0c\u5c31\u662f\u8c03\u7528group\u5bf9\u8c61 \u7684title\u5b57\u6bb5\u7684\u503c\uff0c\u540c\u6837\u4e5f\u8981\u6307\u5b9asource\u3002 4-\u800c\u9488\u5bf9\u591a\u5bf9\u591a\u5b57\u5178\u5728\u8fd9\u91cc\u6307\u5b9a\u65b9\u6cd5\u7684\u8bdd\u5176\u5b9e\u5c31\u4e0d\u662f\u90a3\u4e48\u65b9\u4fbf\u4e86\uff0c\u56e0\u6b64\u91c7\u7528\u4e00\u4e2a\u65b0\u7684\u7c7bSerializerMethodField \uff0c\u8fd9\u4e2a\u7c7b\u53ef\u4ee5\u5141\u8bb8\u6211\u4eec\u81ea\u5b9a\u4e49\u65b9\u6cd5\u6765\u6307\u5b9a\u663e\u793a\u5185\u5bb9\uff0c\u5047\u5982\u5b57\u6bb5\u540d\u53ebrls\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u547d\u540d\u4e00\u4e2aget_rls\u7684\u65b9\u6cd5\uff0c\u5185\u90e8 \u64cd\u4f5c\u4e5f\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u62ff\u5230\u6240\u6709\u7684role\u5bf9\u8c61\u4ee5\u540e\u7136\u540e\u628a\u5bf9\u8c61\u7684id\u548ctitle\u53d6\u51fa\u6765\u6dfb\u52a0\u5230ret\u91cc\uff0c\u8fd4\u56de\u7684ret\u5373\u662frls\u7684\u503c username = serializers.CharField() password = serializers.CharField() # choices\u5b57\u6bb5 ut = serializers.CharField(source='get_user_type_display') # \u5916\u952e\u5b57\u6bb5\u5185\u90e8\u662f\u6839\u636e.\u505asplit\uff0c\u53d6\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u4e00\u76f4.\u4e0b\u53bb\u3002 gp = serializers.CharField(source='group.title') # \u591a\u5bf9\u591a\u5173\u7cfb\uff0c\u7528SerializerMethod\u8fdb\u884c\u81ea\u5b9a\u4e49\u65b9\u6cd5\u663e\u793a\uff0c\u4e0a\u7ebf\u7684choice\uff0cgp\u90fd\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u6cd5\u7684\u5f62\u5f0f rls = serializers.SerializerMethodField() def get_rls(self, row): role_obj_list = row.roles.all() ret = [] for item in role_obj_list: ret.append({'id': item.id, 'title': item.title}) return ret # \u5bf9\u5e94\u7684CBV class UserInfo(APIView): authentication_classes = [] permission_classes = [] throttle_classes = [] def get(self, request, *args, **kwargs): users = models.UserInfo.objects.all() ser = UserInfoSer(instance=users, many=True) # ser.data\u8fd4\u56de\u7684\u662f\u4e00\u4e2aOrderedDIct\u662f\u4e00\u4e2a\u6709\u5e8f\u5b57\u5178\uff0c\u5b9e\u8d28\u4e0a\u8fd8\u662f\u4e00\u4e2a\u5b57\u5178 ret = json.dumps(ser.data, ensure_ascii=False) return HttpResponse(ret) \u8bbf\u95ee\u5bf9\u5e94\u7684\u8def\u7531\u5f97\u5230\u7684\u7ed3\u679c\u5982\u4e0b\uff1a [{ username : lamber , password : 123 , ut : \u666e\u901a\u7528\u6237 , gp : A\u7ec4 , rls : [{ id : 1, title : \u533b\u751f }, { id : 2, title : \u5b66\u751f }]}, { username : maxiaoyu , password : 123 , ut : VIP , gp : b\u7ec4 , rls : [{ id : 2, title : \u5b66\u751f }, { id : 3, title : \u8001\u5e08 }]}, { username : qimaosen , password : 123 , ut : SVIP , gp : A\u7ec4 , rls : [{ id : 3, title : \u8001\u5e08 }]}] \u5176\u5b9e\u6211\u4eec\u53ea\u505a\u4e86\u4e24\u4e2a\u4e8b\u60c5\uff1a \u5b9a\u4e49\u4e00\u4e2a\u5e8f\u5217\u5316\u7684\u7c7b\uff0c\u5199\u4e0a\u5bf9\u5e94\u7684\u5b57\u6bb5 \u5728CBV\u4e2d\u5b9e\u4f8b\u5316\u5e8f\u5217\u7c7b\uff0c\u751f\u6210\u5e8f\u5217\u5316\u540e\u7684\u6570\u636e\uff0c\u8fd4\u56de\u7ed9\u524d\u7aef\u3002 \u5728\u5e8f\u5217\u5316\u7c7b\u4e2d\u6211\u4eec\u5355\u72ec\u6307\u5b9a\u4e86\u6bcf\u4e00\u4e2a\u5b57\u6bb5\u7684\u663e\u793a\uff0c\u5176\u5b9e\u8fd9\u4e2a\u8fd8\u53ef\u4ee5\u66f4\u7b80\u5355\u7684\u7684\u53bb\u64cd\u4f5c\uff0c\u53ea\u8981\u7ee7\u627f\u5185\u7f6e\u7684ModelSerializer\u7c7b\u5373\u53ef\uff0c\u56e0\u6b64\u4e0a\u9762\u7684\u5185\u5bb9\u5c31\u53ef\u4ee5\u6539\u6210\u5982\u4e0b\u7684\u5f62\u5f0f\uff1a class UserInfoSer(serializers.ModelSerializer): class Meta: model = models.UserInfo fields = __all__ \u5f53fields\u8bbe\u7f6e\u4e3a __all__ \u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u5e2e\u4f60\u663e\u793a\u6240\u6709\u7684\u5b57\u6bb5\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u81ea\u5df1\u4e00\u4e2a\u4e00\u4e2a\u624b\u5199\u4e86\uff0c\u4e0d\u8fc7\u4e5f\u6709\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u8fd9\u91cc\u7684\u5904\u7406\u90fd\u662f\u6700\u7b80\u5355\u5316\u7684\u5904\u7406\uff0c\u5373\u5bf9\u5e94\u7684group\u4e5f\u53ea\u662f\u7ed9\u4f60\u663e\u793a\u7ec4id\uff0cchoices\u4e5f\u662f\u663e\u793achoice\u7684id\u800c\u4e0d\u662f\u663e\u793achoice\u7684\u540d\u79f0\uff0c\u56e0\u6b64\u90e8\u5206\u5b57\u6bb5\u8fd8\u662f\u9700\u8981\u6211\u4eec\u81ea\u5df1\u6765\u8fdb\u884c\u5904\u7406\uff0c\u6765\u8fdb\u884c\u4e00\u4e0b\u6539\u8fdb\u5982\u4e0b\uff1a class UserInfoSer(serializers.ModelSerializer): ut = serializers.CharField(source='get_user_type_display') gp = serializers.CharField(source='group.title') rls = serializers.SerializerMethodField() class Meta: model = models.UserInfo fields = ['id', 'username', 'ut', 'rls', 'gp'] def get_rls(self, row): role_obj_list = row.roles.all() ret = [] for item in role_obj_list: ret.append({'id': item.id, 'title': item.title}) return ret \u4e0d\u8fc7\u8fd8\u6709\u4e00\u79cd\u66f4\u4e3a\u7b80\u5355\u7684\u5199\u6cd5\uff0c\u6307\u5b9a\u4e00\u4e2adepth\uff0cdepth\u8868\u793a\u6df1\u5ea6\uff0c\u6211\u4eec\u5728\u5916\u952e\u8fdb\u884c\u8054\u8868\u67e5\u8be2\u7684\u65f6\u5019\u53ef\u4ee5\u901a\u8fc7\u201c.\u201d\u4e00\u76f4\u591a\u7ea7\u53bb\u83b7\u53d6\uff0c\u5373\u4e00\u76f4\u201c.\u201d\u4e0b\u53bb\uff0c\u8fd9\u91ccdepth\u5c31\u662f\u6307\u5b9a\u8981\u6df1\u5165\u8d70\u591a\u5c11\u5c42\uff0c\uff1a class UserInfoSer(serializers.ModelSerializer): class Meta: model = models.UserInfo fields = __all__ # \u9ed8\u8ba4ModelSerializer\u4f7f\u7528\u4e3b\u952e\u4f5c\u4e3a\u5173\u8054\u5b57\u6bb5\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528depth\u6765\u7b80\u5355\u7684\u751f\u6210\u5d4c\u5957\u8868\u793a\uff0c # depth\u5e94\u8be5\u662f\u6574\u6570\uff0c\u8868\u660e\u5d4c\u5957\u7684\u5c42\u7ea7\u6570\u91cf\uff0c\u5efa\u8bae3~4\u5c42\u5c31\u5dee\u4e0d\u591a\u4e86\uff0c\u518d\u591a\u5c31\u4f1a\u6162\u4e86\u3002 depth = 1 \u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5b57\u6bb5\u663e\u793a\uff0c\u5b9a\u4e49\u4e00\u4e2a\u81ea\u5b9a\u5236\u7684Field\u7684\u7c7b\uff0c\u5728\u5185\u90e8\u91cd\u5199to_representtation\u65b9\u6cd5\uff0c\u65b9\u6cd5\u8fd4\u56de\u4ec0\u4e48\u5c31\u663e\u793a\u4ec0\u4e48\u3002 class MyField(serializers.CharField): def to_representation(self, value): \u53ef\u4ee5\u81ea\u5b9a\u4e49\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u4ec0\u4e48\uff0c\u90a3\u4e48\u8fd4\u56de\u7684\u9875\u9762\u6570\u636e\u5c31\u662f\u4ec0\u4e48\uff0cvalue\u662f\u4ece\u6570\u636e\u5e93\u53d6\u5230\u7684\u503c\uff0c \u8fd9\u4e2a\u65b9\u6cd5\u4e00\u822c\u662f\u7528\u4e0d\u4e0a\uff0c\u56e0\u4e3a\u6211\u4eec\u81ea\u5b9a\u4e49\u65b9\u6cd5\u4e00\u822c\u5c31\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002 return time.time() class UserInfoSer(serializers.ModelSerializer): ut = serializers.CharField(source='get_user_type_display') gp = serializers.CharField(source='group.title') x1 = MyField(source='username') class Meta: model = models.UserInfo fields = ['id', 'username', 'ut', 'gp', 'x1'] \u5bf9\u5e94\u7684\u7ed3\u679c\u5982\u4e0b\uff1a [{ id : 1, username : lamber , ut : \u666e\u901a\u7528\u6237 , gp : A\u7ec4 , x1 : 1550142281.049991}, { id : 2, username : maxiaoyu , ut : VIP , gp : b\u7ec4 , x1 : 1550142281.052642}, { id : 3, username : qimaosen , ut : SVIP , gp : A\u7ec4 , x1 : 1550142281.054938}] Hypermedia API Hypermedia API\uff0cRESTful API\u6700\u597d\u505a\u5230Hypermedia\uff0c\u5373\u8fd4\u56de\u7ed3\u679c\u4e2d\u63d0\u4f9b\u94fe\u63a5\uff0c\u8fde\u5411\u5176\u4ed6API\u65b9\u6cd5\uff0c\u4f7f\u5f97\u7528\u6237\u4e0d\u67e5\u6587\u6863\uff0c\u4e5f\u77e5\u9053\u4e0b\u4e00\u6b65\u5e94\u8be5\u505a\u4ec0\u4e48\u3002\u4ee5\u7528\u6237\u7ec4\u4e3a\u4f8b\uff1a class UserInfoSer(serializers.ModelSerializer): \u8fd9\u91cc\u7684lookup_url_kwarg\u662f\u6307\u7684\u6211\u53bb\u53cd\u5411\u751f\u6210url\u7684\u65f6\u5019\uff0c\u53c2\u6570\u5199\u7684\u503c\u662f\u4ec0\u4e48\uff0c \u5982\u679c\u662fpk\u90a3\u5c31\u662fpk\uff0c\u5982\u679c\u662fxxx\u90a3\u5339\u914d\u5230\u7684\u5c31\u662fxxx\uff0c\u8fd9\u4e2a\u662f\u9488\u5bf9URL\u4e0a\u6709\u53c2\u6570\u7684\u60c5\u51b5 lookup_field\u7528\u4e8e\u6267\u884c\u5404\u4e2a\u6a21\u578b\u5b9e\u4f8b\u7684\u5bf9\u8c61\u67e5\u627e\u7684\u6a21\u578b\u5b57\u6bb5\u3002\u9ed8\u8ba4\u4e3a 'pk'\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528 hyperlinked API \u65f6\uff0c\u5982\u679c\u9700\u8981\u4f7f\u7528\u81ea\u5b9a\u4e49\u503c\uff0c \u5219\u9700\u8981\u786e\u4fdd API \u89c6\u56fe\u548c\u5e8f\u5217\u5316\u7c7b\u8bbe\u7f6e\u4e86 lookup field\uff0c\u4e0d\u8bbe\u7f6e\u9ed8\u8ba4\u6309\u7167pk\u6765\uff0c\u6570\u636e\u53ef\u80fd\u662f\u4e0d\u5bf9\u7684\u3002 \u751f\u6210\u53cd\u5411URL\u5730\u5740\uff0c\u5e2e\u52a9\u63a5\u53e3\u4eba\u8c03\u7528\u7684\u65f6\u5019\u53ef\u4ee5\u4e86\u89e3\u5230\u8fde\u63a5\u7684\u5185\u5bb9\u3002 group = serializers.HyperlinkedIdentityField(view_name='gp', lookup_url_kwarg='pk', lookup_field='group_id') class Meta: model = models.UserInfo fields = ['id', 'username', 'group'] class UserInfo(APIView): authentication_classes = [] permission_classes = [] throttle_classes = [] def get(self, request, *args, **kwargs): users = models.UserInfo.objects.all() ser = UserInfoSer(instance=users, many=True) # \u8fd4\u56de\u7684ser.data\u662f\u4e00\u4e2aOrderedDIct\u662f\u4e00\u4e2a\u6709\u5e8f\u5b57\u5178\uff0c\u5b9e\u8d28\u4e0a\u8fd8\u662f\u4e00\u4e2a\u5b57\u5178 ret = json.dumps(ser.data, ensure_ascii=False) return HttpResponse(ret) class GroupSer(serializers.ModelSerializer): group = serializers.HyperlinkedIdentityField(view_name='gp', lookup_url_kwarg='pk', lookup_field='id') class Meta: model = models.UserGroup fields = __all__ class Group(APIView): authentication_classes = [] permission_classes = [] throttle_classes = [] def get(self, request, *args, **kwargs): pk = kwargs.get('pk') obj = models.UserGroup.objects.filter(id=pk).first() # \u4f46\u51e1\u4f60\u8981\u662f\u4f7f\u7528HyperlinkedIdentityField\u4e86\uff0c\u4f60\u5c31\u8981\u52a0\u4e0acontext\u8fd9\u4e2a\u53c2\u6570\uff0c\u8fd9\u6837\u5c31\u80fd\u83b7\u5f97\u53cd\u5411\u7684url # \u5426\u5219\u4f1a\u62a5\u5982\u4e0b\u5f02\u5e38\uff1a # `HyperlinkedIdentityField` requires the request in the serializer context. Add `context={'request': request}` when instantiating the serializer. ser = GroupSer(instance=obj, many=False, context={'request': request}) ret = json.dumps(ser.data) return HttpResponse(ret) \u8fd4\u56de\u7684\u7ed3\u679c\u5185\u5bb9\u5982\u4e0b\uff1a [ { id : 1, username : lamber , group : http://127.0.0.1:8000/group/1 }, { id : 2, username : maxiaoyu , group : http://127.0.0.1:8000/group/2 }, { id : 3, username : qimaosen , group : http://127.0.0.1:8000/group/1 } ] \u8bf7\u6c42\u8ba4\u8bc1 \u5728\u8bf7\u6c42\u8ba4\u8bc1\u8fd9\u91cc\u5176\u5b9e\u5f88\u7c7b\u4f3c\u4e8eForm\u7ec4\u4ef6\u7684\u8bf7\u6c42\u8ba4\u8bc1\uff0c\u6bd4\u5982\u6211\u8981\u9488\u5bf9username\u505a\u4e00\u4e2a\u8bf7\u6c42\u8ba4\u8bc1 class xxValidator(object): def __init__(self, base): self.base = base def __call__(self, value, *args, **kwargs): if not value.startswith(self.base): message = '\u6807\u9898\u5fc5\u987b\u4ee5%s\u5f00\u5934' % self.base raise serializers.ValidationError(message) class UserInfoSer(serializers.ModelSerializer): username = serializers.CharField( # \u8fd9\u91cc\u9762\u5305\u542b\u4e86\u5f88\u591a\u539f\u751f\u7684\u9a8c\u8bc1\u89c4\u5219\uff0c\u6bd4\u5982required\uff0c\u4e0d\u80fd\u4e3a\u7a7a error_messages={ 'required': '\u4e0d\u80fd\u4e3a\u7a7a' }, # \u4f46\u662f\u6211\u4eec\u8fd8\u53ef\u4ee5\u81ea\u5df1\u53bb\u5b9a\u4e49\u9a8c\u8bc1\u89c4\u5219\uff0c\u65b9\u6cd5\u5c31\u662f\u5b9a\u4e00\u4e2a\u7c7b\u5c31\u53ef\u4ee5\u4e86\uff0c\u6bd4\u5982\u4e0a\u9762\u7684xxValidator\u7c7b # \u5982\u679c\u6ee1\u8db3\u7684\u8bdd\u4e0d\u4f5c\u64cd\u4f5c\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3raise\u4e00\u4e2aValidationError # \u8fd9\u91cc\u8c03\u7528\u4e86__call__\u65b9\u6cd5\uff0c\u56e0\u6b64\u7c7b\u53ef\u4ee5\u76f4\u63a5\u52a0\u62ec\u53f7\u8c03\u7528\uff0c\u9ed8\u8ba4\u5c31\u662f\u8c03\u7528\u7684__call__\u65b9\u6cd5\u3002 validators=[xxValidator('\u5475\u5475\u54d2'), ], ) group = serializers.HyperlinkedIdentityField(view_name='gp', lookup_url_kwarg='pk', lookup_field='group_id') class Meta: model = models.UserInfo fields = ['id', 'username', 'group'] class UserInfo(APIView): authentication_classes = [] permission_classes = [] throttle_classes = [] def post(self, request, *args, **kwargs): ser = UserInfoSer(data=request.data) if ser.is_valid(): print(ser.validated_data) else: print(ser.errors) return HttpResponse('\u6d4b\u8bd5\u7684post\u8bf7\u6c42') \u5982\u679cpost\u8bf7\u6c42\u8fc7\u6765\u7684\u5185\u5bb9\u4e0d\u662f\u4ee5\u201c\u5475\u5475\u54d2\u201d\u5f00\u5934\u7684\u8bdd\uff0cser.errors\u5c31\u4f1a\u6253\u5370\u51fa\u5bf9\u5e94\u7684\u62a5\u9519 {'username': [ErrorDetail(string='\u6807\u9898\u5fc5\u987b\u4ee5\u5475\u5475\u54d2\u5f00\u5934', code='invalid')]} \u5f53\u7136\u4e00\u822c\u60c5\u51b5\u4e0b\u6211\u4eec\u4e0d\u4f1a\u53bb\u8fd9\u4e48\u505a\uff0cForm\u7ec4\u4ef6\u4e2d\u6709\u94a9\u5b50\uff0c\u8fd9\u91cc\u540c\u6837\u4e5f\u6709\u3002 def is_valid(self, raise_exception=False): \u7701\u7565\u4e00\u90e8\u5206\u4ee3\u7801 # \u5982\u679c\u6ca1\u6709_validated_data\u5c5e\u6027\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u4f1a\u53bb\u8c03\u7528run_validation\u65b9\u6cd5\u3002 if not hasattr(self, '_validated_data'): try: self._validated_data = self.run_validation(self.initial_data) except ValidationError as exc: self._validated_data = {} self._errors = exc.detail else: self._errors = {} if self._errors and raise_exception: raise ValidationError(self.errors) return not bool(self._errors) def run_validation(self, data=empty): Validate a simple representation and return the internal value. The provided data may be `empty` if no representation was included in the input. May raise `SkipField` if the field should not be included in the validated data. (is_empty_value, data) = self.validate_empty_values(data) if is_empty_value: return data value = self.to_internal_value(data) self.run_validators(value) return value def validate_empty_values(self, data): Validate empty values, and either: * Raise `ValidationError`, \u6307\u51fa\u65e0\u6548\u7684\u6570\u636e * Raise `SkipField`, \u6307\u51fa\u8fd9\u4e2a\u5b57\u6bb5\u5e94\u8be5\u88ab\u5ffd\u7565 * Return (True, data), indicating an empty value that should be returned without any further validation being applied. * Return (False, data), indicating a non-empty value, that should have validation applied as normal. if self.read_only: return (True, self.get_default()) if data is empty: if getattr(self.root, 'partial', False): raise SkipField() if self.required: self.fail('required') return (True, self.get_default()) if data is None: if not self.allow_null: self.fail('null') return (True, None) return (False, data) \u6e90\u7801\u6d41\u7a0b \u6211\u4eec\u5199\u4e00\u4e2a\u8981\u505a\u5e8f\u5217\u5316\u7684\u65f6\u5019\uff0c\u5047\u5982\u8bf4\u7ee7\u627f\u4e86serializers.Serializer\u7c7b\uff0c\u6211\u4eec\u5728CBV\u4e2d\u8981\u8fdb\u884c\u8c03\u7528\uff1a # \u4e5f\u5c31\u662f\u5b9e\u4f8b\u5316\uff0c\u90a3\u4e48\u6574\u4e2a\u4ee3\u7801\u6d41\u7a0b\u5c31\u4ece\u5b9e\u4f8b\u5316\u5f00\u59cb\u770b ser = UserInfoSer(instance=users, many=True) \u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u4f1a\u4f18\u5148\u6307\u5b9a\u7684\u4e24\u4e2a\u65b9\u6cd5\u4e00\u4e2a\u662f __new__ \u53e6\u5916\u4e00\u4e2a\u5c31\u662f\u6784\u9020\u65b9\u6cd5 __init__ \u3002\u4f46\u662f\u6211\u4eec\u5728Serializer\u4e2d\u5e76\u6ca1\u6709\u53d1\u73b0\uff0c\u6240\u4ee5\u5230\u5b83\u96c6\u6210\u7684\u7236\u7c7bBaseSerializer\u4e2d\u53bb\u627e\u3002 def __init__(self, instance=None, data=empty, **kwargs): # \u8fd9\u4e2a\u5c31\u662f\u6211\u4eec\u4f20\u9012\u7684instance\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\uff0c\u4e5f\u53ef\u80fd\u662f\u591a\u4e2a\u3002 self.instance = instance if data is not empty: self.initial_data = data self.partial = kwargs.pop('partial', False) self._context = kwargs.pop('context', {}) kwargs.pop('many', None) super(BaseSerializer, self).__init__(**kwargs) def __new__(cls, *args, **kwargs): # \u91cd\u5199\u8fd9\u4e2a\u7c7b\u6765\u81ea\u52a8\u6784\u5efaListSerializer\u7c7b\u4ee3\u66ff\uff0c\u5f53\u8bbe\u7f6e\u4e86many=True\u65f6\u5019 # \u6211\u4eec\u4f1a\u53bb\u628amany\u8fd9\u4e2a\u9009\u9879pop\u51fa\u6765\uff0c\u5982\u679c\u6ca1\u6709\u90a3\u5c31\u662fFalse\uff0c\u4e0d\u8d70\u8fd9\u91cc\u7684\u6761\u4ef6 # \u76f4\u63a5\u53bb\u8c03\u7528\u7236\u7c7b\u7684__new__\u65b9\u6cd5. if kwargs.pop('many', False): # \u5982\u679c\u8bf4\u6709many\uff0c\u90a3\u4e48\u8c03\u7528\u7c7b\u65b9\u6cd5many_init return cls.many_init(*args, **kwargs) return super(BaseSerializer, cls).__new__(cls, *args, **kwargs) \u5728Serializer\uff0c\u5982\u679c\u6ca1\u6709\u7ed9meta\u8bbe\u7f6elist_serializer_class\u5c5e\u6027\uff0c\u90a3\u4e48list_serializer_class\u5c5e\u6027\u5c31\u662fListSerializer\uff0c\u6700\u540e\u8fd4\u56de\u7684\u4e5f\u5c31\u662fListSerializer\u7684\u5bf9\u8c61\uff0c\u63a5\u4e0b\u6765\u6267\u884cListSerializer\u5bf9\u8c61\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5426\u5219\u6267\u884cBaseSerializer\u91cc\u9762\u7684\u6784\u9020\u65b9\u6cd5\uff08\u5982\u679c\u6211\u4eec\u91cd\u5199\u4e86\u8fd9\u4e2a\u5c31\u4f1a\u8c03\u7528\u6211\u4eec\u81ea\u5df1\u7684\u6784\u9020\u65b9\u6cd5\uff09\u3002 @classmethod def many_init(cls, *args, **kwargs): This method implements the creation of a `ListSerializer` parent class when `many=True` is used. You can customize it if you need to control which keyword arguments are passed to the parent, and which are passed to the child. Note that we're over-cautious in passing most arguments to both parent and child classes in order to try to cover the general case. If you're overriding this method you'll probably want something much simpler, eg: @classmethod def many_init(cls, *args, **kwargs): kwargs['child'] = cls() return CustomListSerializer(*args, **kwargs) allow_empty = kwargs.pop('allow_empty', None) child_serializer = cls(*args, **kwargs) list_kwargs = { 'child': child_serializer, } if allow_empty is not None: list_kwargs['allow_empty'] = allow_empty list_kwargs.update({ key: value for key, value in kwargs.items() if key in LIST_SERIALIZER_KWARGS }) meta = getattr(cls, 'Meta', None) list_serializer_class = getattr(meta, 'list_serializer_class', ListSerializer) return list_serializer_class(*args, **list_kwargs) \u7136\u540e\u6211\u4eec\u8c03\u7528\u4e86\u8fd9\u4e2a\u8fd9\u4e2a\u5bf9\u8c61\u7684data\u5c5e\u6027\uff1a ret = json.dumps(ser.data, ensure_ascii=False) \u6765\u770b\u4e00\u4e0b\u8fd9\u4e2adata\u65b9\u6cd5\u7684\u5b9e\u73b0 @property def data(self): ret = super(Serializer, self).data return ReturnDict(ret, serializer=self) @property def data(self): if hasattr(self, 'initial_data') and not hasattr(self, '_validated_data'): msg = ( 'When a serializer is passed a `data` keyword argument you ' 'must call `.is_valid()` before attempting to access the ' 'serialized `.data` representation.\\n' 'You should either call `.is_valid()` first, ' 'or access `.initial_data` instead.' ) raise AssertionError(msg) if not hasattr(self, '_data'): if self.instance is not None and not getattr(self, '_errors', None): self._data = self.to_representation(self.instance) elif hasattr(self, '_validated_data') and not getattr(self, '_errors', None): self._data = self.to_representation(self.validated_data) else: self._data = self.get_initial() return self._data def to_representation(self, instance): raise NotImplementedError('`to_representation()` must be implemented.') # Serializer\u7c7b\u7684\u7c7b\u65b9\u6cd5 def to_representation(self, instance): Object instance - Dict of primitive datatypes. ret = OrderedDict() fields = self._readable_fields # fields\u5176\u5b9e\u5c31\u662f\u54b1\u4eec\u5b9a\u4e49\u7684\u8fd9\u4e9b\u5b57\u6bb5 for field in fields: try: # \u8c03\u7528\u5b57\u6bb5\u7684get_attribute\u65b9\u6cd5\uff0c\u5e76\u628ainstance\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u8fdb\u53bb\u3002 attribute = field.get_attribute(instance) except SkipField: continue # We skip `to_representation` for `None` values so that fields do # not have to explicitly deal with that case. # # For related fields with `use_pk_only_optimization` we need to # resolve the pk value. check_for_none = attribute.pk if isinstance(attribute, PKOnlyObject) else attribute if check_for_none is None: ret[field.field_name] = None else: ret[field.field_name] = field.to_representation(attribute) return ret \u627e\u4e00\u4e2aCharfield\u770b\u770b # from rest_framework.serializers import CharField\uff0c\u53d1\u73b0CharField\u4e2d\u5e76\u6ca1\u6709get_attribute\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u6240\u4ee5\u7ee7\u7eed\u627e\uff0c\u5b83\u7684\u7236\u7c7bField\u53d1\u73b0\u4e86\u8fd9\u4e2a\u65b9\u6cd5 def get_attribute(self, instance): Given the *outgoing* object instance, return the primitive value that should be used for this field. try: return get_attribute(instance, self.source_attrs) except (KeyError, AttributeError) as exc: if self.default is not empty: return self.get_default() if self.allow_null: return None if not self.required: raise SkipField() msg = ( 'Got {exc_type} when attempting to get a value for field ' '`{field}` on serializer `{serializer}`.\\nThe serializer ' 'field might be named incorrectly and not match ' 'any attribute or key on the `{instance}` instance.\\n' 'Original exception text was: {exc}.'.format( exc_type=type(exc).__name__, field=self.field_name, serializer=self.parent.__class__.__name__, instance=instance.__class__.__name__, exc=exc ) ) raise type(exc)(msg) # source if self.source == '*': self.source_attrs = [] else: # \u6bd4\u5982group.title\uff0c\u5206\u9694\u540e\u5c31\u662fgroup\uff0ctitle self.source_attrs = self.source.split('.') def get_attribute(instance, attrs): Similar to Python's built in `getattr(instance, attr)`, but takes a list of nested attributes, instead of a single attribute. Also accepts either attribute lookup on objects or dictionary lookups. for attr in attrs: try: if isinstance(instance, collections.Mapping): instance = instance[attr] else: instance = getattr(instance, attr) except ObjectDoesNotExist: return None if is_simple_callable(instance): try: instance = instance() except (AttributeError, KeyError) as exc: # If we raised an Attribute or KeyError here it'd get treated # as an omitted field in `Field.get_attribute()`. Instead we # raise a ValueError to ensure the exception is not masked. raise ValueError('Exception raised in callable attribute {0} ; original exception was: {1}'.format(attr, exc)) return instance def is_simple_callable(obj): True if the object is a callable that takes no arguments. if not (inspect.isfunction(obj) or inspect.ismethod(obj) or isinstance(obj, functools.partial)): return False sig = inspect.signature(obj) params = sig.parameters.values() return all( param.kind == param.VAR_POSITIONAL or param.kind == param.VAR_KEYWORD or param.default != param.empty for param in params ) def isfunction(object): Return true if the object is a user-defined function. Function objects provide these attributes: __doc__ documentation string __name__ name with which this function was defined __code__ code object containing compiled function bytecode __defaults__ tuple of any default values for arguments __globals__ global namespace in which this function was defined __annotations__ dict of parameter annotations __kwdefaults__ dict of keyword only parameters with defaults # \u548ccallable\u662f\u7b49\u4ef7\u7684 return isinstance(object, types.FunctionType) def ismethod(object): Return true if the object is an instance method. Instance method objects provide these attributes: __doc__ documentation string __name__ name with which this method was defined __func__ function object containing implementation of method __self__ instance to which this method is bound return isinstance(object, types.MethodType) \u8bf7\u6c42\u6570\u636e\u6821\u9a8c","title":"DRF\u5e8f\u5217\u5316"},{"location":"django/07-DRF/06-DRF\u5e8f\u5217\u5316/#drf","text":"\u8bf7\u6c42\u8ba4\u8bc1 QuerySet\u8fdb\u884c\u5e8f\u5217\u5316","title":"DRF\u5e8f\u5217\u5316"},{"location":"django/07-DRF/06-DRF\u5e8f\u5217\u5316/#_1","text":"","title":"\u7b80\u5355\u4f7f\u7528"},{"location":"django/07-DRF/06-DRF\u5e8f\u5217\u5316/#queryset","text":"class UserInfoSer(serializers.Serializer): \u4ee5userinfo\u8868\u4e3a\u4f8b\u5b50\uff0c\u5982\u4e0b\u662f\u6211\u60f3\u8981\u663e\u793a\u7684\u5b57\u6bb5 1-username\u548cpassword\u90fd\u662f\u672c\u8868\u5b57\u6bb5\uff0c\u76f4\u63a5\u5c55\u793a\u5c31\u53ef\u4ee5\uff0c\u8c03\u7528\u5bf9\u5e94\u7c7b\u522b\u4e3aCharField 2-user_type\u4e3a\u7528\u6237\u7c7b\u578b\uff0c\u8fd9\u5728\u6211\u4eec\u7684models\u5b9a\u4e49\u4e2d\u662f\u4e00\u4e2achoice\u5b57\u6bb5\uff0c\u5982\u679c\u76f4\u63a5\u53d6IntegerField\u7684\u8bdd \u90a3\u4e48\u8fd4\u56de\u7684\u5c06\u662f\u4e00\u4e2aid\u800c\u5df2\uff0c\u800c\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684typeid\u5bf9\u5e94\u7684\u4e2d\u6587\u540d\u79f0\uff0c\u56e0\u6b64\u8fd9\u4e00\u5757\u8981\u6307\u5b9a\u6e90source\u3002 orm\u5185\u90e8\u9488\u5bf9choice\u5b57\u6bb5\u5b58\u5728\u4e00\u4e2aget_Foo_display\u7684\u65b9\u6cd5\uff0c\u4f1a\u8fd4\u56de\u5bf9\u5e94\u7684choice\u5bf9\u5e94\u7684\u503c\uff0c\u90a3\u4e48\u5bf9\u5e94\u5230\u8fd9\u91cc\u5c31\u662f \u8981\u663e\u793auser_type\u5b57\u6bb5\u5bf9\u5e94\u7684choice\u7684\u9009\u9879\u503c\u3002 3-\u5916\u952e\u5b57\u6bb5\uff0c\u8fd9\u91cc\u8fd8\u53ef\u4ee5\u586b\u5199\u5bf9\u5e94\u7684\u5916\u952e\u5b57\u6bb5\uff0c\u6bd4\u5982group\uff0c\u5bf9\u5e94\u7684\u5c31\u662fgroup\u5bf9\u8c61\uff0c.title\uff0c\u5c31\u662f\u8c03\u7528group\u5bf9\u8c61 \u7684title\u5b57\u6bb5\u7684\u503c\uff0c\u540c\u6837\u4e5f\u8981\u6307\u5b9asource\u3002 4-\u800c\u9488\u5bf9\u591a\u5bf9\u591a\u5b57\u5178\u5728\u8fd9\u91cc\u6307\u5b9a\u65b9\u6cd5\u7684\u8bdd\u5176\u5b9e\u5c31\u4e0d\u662f\u90a3\u4e48\u65b9\u4fbf\u4e86\uff0c\u56e0\u6b64\u91c7\u7528\u4e00\u4e2a\u65b0\u7684\u7c7bSerializerMethodField \uff0c\u8fd9\u4e2a\u7c7b\u53ef\u4ee5\u5141\u8bb8\u6211\u4eec\u81ea\u5b9a\u4e49\u65b9\u6cd5\u6765\u6307\u5b9a\u663e\u793a\u5185\u5bb9\uff0c\u5047\u5982\u5b57\u6bb5\u540d\u53ebrls\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u547d\u540d\u4e00\u4e2aget_rls\u7684\u65b9\u6cd5\uff0c\u5185\u90e8 \u64cd\u4f5c\u4e5f\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u62ff\u5230\u6240\u6709\u7684role\u5bf9\u8c61\u4ee5\u540e\u7136\u540e\u628a\u5bf9\u8c61\u7684id\u548ctitle\u53d6\u51fa\u6765\u6dfb\u52a0\u5230ret\u91cc\uff0c\u8fd4\u56de\u7684ret\u5373\u662frls\u7684\u503c username = serializers.CharField() password = serializers.CharField() # choices\u5b57\u6bb5 ut = serializers.CharField(source='get_user_type_display') # \u5916\u952e\u5b57\u6bb5\u5185\u90e8\u662f\u6839\u636e.\u505asplit\uff0c\u53d6\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u4e00\u76f4.\u4e0b\u53bb\u3002 gp = serializers.CharField(source='group.title') # \u591a\u5bf9\u591a\u5173\u7cfb\uff0c\u7528SerializerMethod\u8fdb\u884c\u81ea\u5b9a\u4e49\u65b9\u6cd5\u663e\u793a\uff0c\u4e0a\u7ebf\u7684choice\uff0cgp\u90fd\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u6cd5\u7684\u5f62\u5f0f rls = serializers.SerializerMethodField() def get_rls(self, row): role_obj_list = row.roles.all() ret = [] for item in role_obj_list: ret.append({'id': item.id, 'title': item.title}) return ret # \u5bf9\u5e94\u7684CBV class UserInfo(APIView): authentication_classes = [] permission_classes = [] throttle_classes = [] def get(self, request, *args, **kwargs): users = models.UserInfo.objects.all() ser = UserInfoSer(instance=users, many=True) # ser.data\u8fd4\u56de\u7684\u662f\u4e00\u4e2aOrderedDIct\u662f\u4e00\u4e2a\u6709\u5e8f\u5b57\u5178\uff0c\u5b9e\u8d28\u4e0a\u8fd8\u662f\u4e00\u4e2a\u5b57\u5178 ret = json.dumps(ser.data, ensure_ascii=False) return HttpResponse(ret) \u8bbf\u95ee\u5bf9\u5e94\u7684\u8def\u7531\u5f97\u5230\u7684\u7ed3\u679c\u5982\u4e0b\uff1a [{ username : lamber , password : 123 , ut : \u666e\u901a\u7528\u6237 , gp : A\u7ec4 , rls : [{ id : 1, title : \u533b\u751f }, { id : 2, title : \u5b66\u751f }]}, { username : maxiaoyu , password : 123 , ut : VIP , gp : b\u7ec4 , rls : [{ id : 2, title : \u5b66\u751f }, { id : 3, title : \u8001\u5e08 }]}, { username : qimaosen , password : 123 , ut : SVIP , gp : A\u7ec4 , rls : [{ id : 3, title : \u8001\u5e08 }]}] \u5176\u5b9e\u6211\u4eec\u53ea\u505a\u4e86\u4e24\u4e2a\u4e8b\u60c5\uff1a \u5b9a\u4e49\u4e00\u4e2a\u5e8f\u5217\u5316\u7684\u7c7b\uff0c\u5199\u4e0a\u5bf9\u5e94\u7684\u5b57\u6bb5 \u5728CBV\u4e2d\u5b9e\u4f8b\u5316\u5e8f\u5217\u7c7b\uff0c\u751f\u6210\u5e8f\u5217\u5316\u540e\u7684\u6570\u636e\uff0c\u8fd4\u56de\u7ed9\u524d\u7aef\u3002 \u5728\u5e8f\u5217\u5316\u7c7b\u4e2d\u6211\u4eec\u5355\u72ec\u6307\u5b9a\u4e86\u6bcf\u4e00\u4e2a\u5b57\u6bb5\u7684\u663e\u793a\uff0c\u5176\u5b9e\u8fd9\u4e2a\u8fd8\u53ef\u4ee5\u66f4\u7b80\u5355\u7684\u7684\u53bb\u64cd\u4f5c\uff0c\u53ea\u8981\u7ee7\u627f\u5185\u7f6e\u7684ModelSerializer\u7c7b\u5373\u53ef\uff0c\u56e0\u6b64\u4e0a\u9762\u7684\u5185\u5bb9\u5c31\u53ef\u4ee5\u6539\u6210\u5982\u4e0b\u7684\u5f62\u5f0f\uff1a class UserInfoSer(serializers.ModelSerializer): class Meta: model = models.UserInfo fields = __all__ \u5f53fields\u8bbe\u7f6e\u4e3a __all__ \u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u5e2e\u4f60\u663e\u793a\u6240\u6709\u7684\u5b57\u6bb5\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u81ea\u5df1\u4e00\u4e2a\u4e00\u4e2a\u624b\u5199\u4e86\uff0c\u4e0d\u8fc7\u4e5f\u6709\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u8fd9\u91cc\u7684\u5904\u7406\u90fd\u662f\u6700\u7b80\u5355\u5316\u7684\u5904\u7406\uff0c\u5373\u5bf9\u5e94\u7684group\u4e5f\u53ea\u662f\u7ed9\u4f60\u663e\u793a\u7ec4id\uff0cchoices\u4e5f\u662f\u663e\u793achoice\u7684id\u800c\u4e0d\u662f\u663e\u793achoice\u7684\u540d\u79f0\uff0c\u56e0\u6b64\u90e8\u5206\u5b57\u6bb5\u8fd8\u662f\u9700\u8981\u6211\u4eec\u81ea\u5df1\u6765\u8fdb\u884c\u5904\u7406\uff0c\u6765\u8fdb\u884c\u4e00\u4e0b\u6539\u8fdb\u5982\u4e0b\uff1a class UserInfoSer(serializers.ModelSerializer): ut = serializers.CharField(source='get_user_type_display') gp = serializers.CharField(source='group.title') rls = serializers.SerializerMethodField() class Meta: model = models.UserInfo fields = ['id', 'username', 'ut', 'rls', 'gp'] def get_rls(self, row): role_obj_list = row.roles.all() ret = [] for item in role_obj_list: ret.append({'id': item.id, 'title': item.title}) return ret \u4e0d\u8fc7\u8fd8\u6709\u4e00\u79cd\u66f4\u4e3a\u7b80\u5355\u7684\u5199\u6cd5\uff0c\u6307\u5b9a\u4e00\u4e2adepth\uff0cdepth\u8868\u793a\u6df1\u5ea6\uff0c\u6211\u4eec\u5728\u5916\u952e\u8fdb\u884c\u8054\u8868\u67e5\u8be2\u7684\u65f6\u5019\u53ef\u4ee5\u901a\u8fc7\u201c.\u201d\u4e00\u76f4\u591a\u7ea7\u53bb\u83b7\u53d6\uff0c\u5373\u4e00\u76f4\u201c.\u201d\u4e0b\u53bb\uff0c\u8fd9\u91ccdepth\u5c31\u662f\u6307\u5b9a\u8981\u6df1\u5165\u8d70\u591a\u5c11\u5c42\uff0c\uff1a class UserInfoSer(serializers.ModelSerializer): class Meta: model = models.UserInfo fields = __all__ # \u9ed8\u8ba4ModelSerializer\u4f7f\u7528\u4e3b\u952e\u4f5c\u4e3a\u5173\u8054\u5b57\u6bb5\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528depth\u6765\u7b80\u5355\u7684\u751f\u6210\u5d4c\u5957\u8868\u793a\uff0c # depth\u5e94\u8be5\u662f\u6574\u6570\uff0c\u8868\u660e\u5d4c\u5957\u7684\u5c42\u7ea7\u6570\u91cf\uff0c\u5efa\u8bae3~4\u5c42\u5c31\u5dee\u4e0d\u591a\u4e86\uff0c\u518d\u591a\u5c31\u4f1a\u6162\u4e86\u3002 depth = 1 \u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5b57\u6bb5\u663e\u793a\uff0c\u5b9a\u4e49\u4e00\u4e2a\u81ea\u5b9a\u5236\u7684Field\u7684\u7c7b\uff0c\u5728\u5185\u90e8\u91cd\u5199to_representtation\u65b9\u6cd5\uff0c\u65b9\u6cd5\u8fd4\u56de\u4ec0\u4e48\u5c31\u663e\u793a\u4ec0\u4e48\u3002 class MyField(serializers.CharField): def to_representation(self, value): \u53ef\u4ee5\u81ea\u5b9a\u4e49\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u4ec0\u4e48\uff0c\u90a3\u4e48\u8fd4\u56de\u7684\u9875\u9762\u6570\u636e\u5c31\u662f\u4ec0\u4e48\uff0cvalue\u662f\u4ece\u6570\u636e\u5e93\u53d6\u5230\u7684\u503c\uff0c \u8fd9\u4e2a\u65b9\u6cd5\u4e00\u822c\u662f\u7528\u4e0d\u4e0a\uff0c\u56e0\u4e3a\u6211\u4eec\u81ea\u5b9a\u4e49\u65b9\u6cd5\u4e00\u822c\u5c31\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e86\u3002 return time.time() class UserInfoSer(serializers.ModelSerializer): ut = serializers.CharField(source='get_user_type_display') gp = serializers.CharField(source='group.title') x1 = MyField(source='username') class Meta: model = models.UserInfo fields = ['id', 'username', 'ut', 'gp', 'x1'] \u5bf9\u5e94\u7684\u7ed3\u679c\u5982\u4e0b\uff1a [{ id : 1, username : lamber , ut : \u666e\u901a\u7528\u6237 , gp : A\u7ec4 , x1 : 1550142281.049991}, { id : 2, username : maxiaoyu , ut : VIP , gp : b\u7ec4 , x1 : 1550142281.052642}, { id : 3, username : qimaosen , ut : SVIP , gp : A\u7ec4 , x1 : 1550142281.054938}]","title":"QuerySet\u5e8f\u5217\u5316"},{"location":"django/07-DRF/06-DRF\u5e8f\u5217\u5316/#hypermedia-api","text":"Hypermedia API\uff0cRESTful API\u6700\u597d\u505a\u5230Hypermedia\uff0c\u5373\u8fd4\u56de\u7ed3\u679c\u4e2d\u63d0\u4f9b\u94fe\u63a5\uff0c\u8fde\u5411\u5176\u4ed6API\u65b9\u6cd5\uff0c\u4f7f\u5f97\u7528\u6237\u4e0d\u67e5\u6587\u6863\uff0c\u4e5f\u77e5\u9053\u4e0b\u4e00\u6b65\u5e94\u8be5\u505a\u4ec0\u4e48\u3002\u4ee5\u7528\u6237\u7ec4\u4e3a\u4f8b\uff1a class UserInfoSer(serializers.ModelSerializer): \u8fd9\u91cc\u7684lookup_url_kwarg\u662f\u6307\u7684\u6211\u53bb\u53cd\u5411\u751f\u6210url\u7684\u65f6\u5019\uff0c\u53c2\u6570\u5199\u7684\u503c\u662f\u4ec0\u4e48\uff0c \u5982\u679c\u662fpk\u90a3\u5c31\u662fpk\uff0c\u5982\u679c\u662fxxx\u90a3\u5339\u914d\u5230\u7684\u5c31\u662fxxx\uff0c\u8fd9\u4e2a\u662f\u9488\u5bf9URL\u4e0a\u6709\u53c2\u6570\u7684\u60c5\u51b5 lookup_field\u7528\u4e8e\u6267\u884c\u5404\u4e2a\u6a21\u578b\u5b9e\u4f8b\u7684\u5bf9\u8c61\u67e5\u627e\u7684\u6a21\u578b\u5b57\u6bb5\u3002\u9ed8\u8ba4\u4e3a 'pk'\u3002 \u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528 hyperlinked API \u65f6\uff0c\u5982\u679c\u9700\u8981\u4f7f\u7528\u81ea\u5b9a\u4e49\u503c\uff0c \u5219\u9700\u8981\u786e\u4fdd API \u89c6\u56fe\u548c\u5e8f\u5217\u5316\u7c7b\u8bbe\u7f6e\u4e86 lookup field\uff0c\u4e0d\u8bbe\u7f6e\u9ed8\u8ba4\u6309\u7167pk\u6765\uff0c\u6570\u636e\u53ef\u80fd\u662f\u4e0d\u5bf9\u7684\u3002 \u751f\u6210\u53cd\u5411URL\u5730\u5740\uff0c\u5e2e\u52a9\u63a5\u53e3\u4eba\u8c03\u7528\u7684\u65f6\u5019\u53ef\u4ee5\u4e86\u89e3\u5230\u8fde\u63a5\u7684\u5185\u5bb9\u3002 group = serializers.HyperlinkedIdentityField(view_name='gp', lookup_url_kwarg='pk', lookup_field='group_id') class Meta: model = models.UserInfo fields = ['id', 'username', 'group'] class UserInfo(APIView): authentication_classes = [] permission_classes = [] throttle_classes = [] def get(self, request, *args, **kwargs): users = models.UserInfo.objects.all() ser = UserInfoSer(instance=users, many=True) # \u8fd4\u56de\u7684ser.data\u662f\u4e00\u4e2aOrderedDIct\u662f\u4e00\u4e2a\u6709\u5e8f\u5b57\u5178\uff0c\u5b9e\u8d28\u4e0a\u8fd8\u662f\u4e00\u4e2a\u5b57\u5178 ret = json.dumps(ser.data, ensure_ascii=False) return HttpResponse(ret) class GroupSer(serializers.ModelSerializer): group = serializers.HyperlinkedIdentityField(view_name='gp', lookup_url_kwarg='pk', lookup_field='id') class Meta: model = models.UserGroup fields = __all__ class Group(APIView): authentication_classes = [] permission_classes = [] throttle_classes = [] def get(self, request, *args, **kwargs): pk = kwargs.get('pk') obj = models.UserGroup.objects.filter(id=pk).first() # \u4f46\u51e1\u4f60\u8981\u662f\u4f7f\u7528HyperlinkedIdentityField\u4e86\uff0c\u4f60\u5c31\u8981\u52a0\u4e0acontext\u8fd9\u4e2a\u53c2\u6570\uff0c\u8fd9\u6837\u5c31\u80fd\u83b7\u5f97\u53cd\u5411\u7684url # \u5426\u5219\u4f1a\u62a5\u5982\u4e0b\u5f02\u5e38\uff1a # `HyperlinkedIdentityField` requires the request in the serializer context. Add `context={'request': request}` when instantiating the serializer. ser = GroupSer(instance=obj, many=False, context={'request': request}) ret = json.dumps(ser.data) return HttpResponse(ret) \u8fd4\u56de\u7684\u7ed3\u679c\u5185\u5bb9\u5982\u4e0b\uff1a [ { id : 1, username : lamber , group : http://127.0.0.1:8000/group/1 }, { id : 2, username : maxiaoyu , group : http://127.0.0.1:8000/group/2 }, { id : 3, username : qimaosen , group : http://127.0.0.1:8000/group/1 } ]","title":"Hypermedia API"},{"location":"django/07-DRF/06-DRF\u5e8f\u5217\u5316/#_2","text":"\u5728\u8bf7\u6c42\u8ba4\u8bc1\u8fd9\u91cc\u5176\u5b9e\u5f88\u7c7b\u4f3c\u4e8eForm\u7ec4\u4ef6\u7684\u8bf7\u6c42\u8ba4\u8bc1\uff0c\u6bd4\u5982\u6211\u8981\u9488\u5bf9username\u505a\u4e00\u4e2a\u8bf7\u6c42\u8ba4\u8bc1 class xxValidator(object): def __init__(self, base): self.base = base def __call__(self, value, *args, **kwargs): if not value.startswith(self.base): message = '\u6807\u9898\u5fc5\u987b\u4ee5%s\u5f00\u5934' % self.base raise serializers.ValidationError(message) class UserInfoSer(serializers.ModelSerializer): username = serializers.CharField( # \u8fd9\u91cc\u9762\u5305\u542b\u4e86\u5f88\u591a\u539f\u751f\u7684\u9a8c\u8bc1\u89c4\u5219\uff0c\u6bd4\u5982required\uff0c\u4e0d\u80fd\u4e3a\u7a7a error_messages={ 'required': '\u4e0d\u80fd\u4e3a\u7a7a' }, # \u4f46\u662f\u6211\u4eec\u8fd8\u53ef\u4ee5\u81ea\u5df1\u53bb\u5b9a\u4e49\u9a8c\u8bc1\u89c4\u5219\uff0c\u65b9\u6cd5\u5c31\u662f\u5b9a\u4e00\u4e2a\u7c7b\u5c31\u53ef\u4ee5\u4e86\uff0c\u6bd4\u5982\u4e0a\u9762\u7684xxValidator\u7c7b # \u5982\u679c\u6ee1\u8db3\u7684\u8bdd\u4e0d\u4f5c\u64cd\u4f5c\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3raise\u4e00\u4e2aValidationError # \u8fd9\u91cc\u8c03\u7528\u4e86__call__\u65b9\u6cd5\uff0c\u56e0\u6b64\u7c7b\u53ef\u4ee5\u76f4\u63a5\u52a0\u62ec\u53f7\u8c03\u7528\uff0c\u9ed8\u8ba4\u5c31\u662f\u8c03\u7528\u7684__call__\u65b9\u6cd5\u3002 validators=[xxValidator('\u5475\u5475\u54d2'), ], ) group = serializers.HyperlinkedIdentityField(view_name='gp', lookup_url_kwarg='pk', lookup_field='group_id') class Meta: model = models.UserInfo fields = ['id', 'username', 'group'] class UserInfo(APIView): authentication_classes = [] permission_classes = [] throttle_classes = [] def post(self, request, *args, **kwargs): ser = UserInfoSer(data=request.data) if ser.is_valid(): print(ser.validated_data) else: print(ser.errors) return HttpResponse('\u6d4b\u8bd5\u7684post\u8bf7\u6c42') \u5982\u679cpost\u8bf7\u6c42\u8fc7\u6765\u7684\u5185\u5bb9\u4e0d\u662f\u4ee5\u201c\u5475\u5475\u54d2\u201d\u5f00\u5934\u7684\u8bdd\uff0cser.errors\u5c31\u4f1a\u6253\u5370\u51fa\u5bf9\u5e94\u7684\u62a5\u9519 {'username': [ErrorDetail(string='\u6807\u9898\u5fc5\u987b\u4ee5\u5475\u5475\u54d2\u5f00\u5934', code='invalid')]} \u5f53\u7136\u4e00\u822c\u60c5\u51b5\u4e0b\u6211\u4eec\u4e0d\u4f1a\u53bb\u8fd9\u4e48\u505a\uff0cForm\u7ec4\u4ef6\u4e2d\u6709\u94a9\u5b50\uff0c\u8fd9\u91cc\u540c\u6837\u4e5f\u6709\u3002 def is_valid(self, raise_exception=False): \u7701\u7565\u4e00\u90e8\u5206\u4ee3\u7801 # \u5982\u679c\u6ca1\u6709_validated_data\u5c5e\u6027\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u4f1a\u53bb\u8c03\u7528run_validation\u65b9\u6cd5\u3002 if not hasattr(self, '_validated_data'): try: self._validated_data = self.run_validation(self.initial_data) except ValidationError as exc: self._validated_data = {} self._errors = exc.detail else: self._errors = {} if self._errors and raise_exception: raise ValidationError(self.errors) return not bool(self._errors) def run_validation(self, data=empty): Validate a simple representation and return the internal value. The provided data may be `empty` if no representation was included in the input. May raise `SkipField` if the field should not be included in the validated data. (is_empty_value, data) = self.validate_empty_values(data) if is_empty_value: return data value = self.to_internal_value(data) self.run_validators(value) return value def validate_empty_values(self, data): Validate empty values, and either: * Raise `ValidationError`, \u6307\u51fa\u65e0\u6548\u7684\u6570\u636e * Raise `SkipField`, \u6307\u51fa\u8fd9\u4e2a\u5b57\u6bb5\u5e94\u8be5\u88ab\u5ffd\u7565 * Return (True, data), indicating an empty value that should be returned without any further validation being applied. * Return (False, data), indicating a non-empty value, that should have validation applied as normal. if self.read_only: return (True, self.get_default()) if data is empty: if getattr(self.root, 'partial', False): raise SkipField() if self.required: self.fail('required') return (True, self.get_default()) if data is None: if not self.allow_null: self.fail('null') return (True, None) return (False, data)","title":"\u8bf7\u6c42\u8ba4\u8bc1"},{"location":"django/07-DRF/06-DRF\u5e8f\u5217\u5316/#_3","text":"\u6211\u4eec\u5199\u4e00\u4e2a\u8981\u505a\u5e8f\u5217\u5316\u7684\u65f6\u5019\uff0c\u5047\u5982\u8bf4\u7ee7\u627f\u4e86serializers.Serializer\u7c7b\uff0c\u6211\u4eec\u5728CBV\u4e2d\u8981\u8fdb\u884c\u8c03\u7528\uff1a # \u4e5f\u5c31\u662f\u5b9e\u4f8b\u5316\uff0c\u90a3\u4e48\u6574\u4e2a\u4ee3\u7801\u6d41\u7a0b\u5c31\u4ece\u5b9e\u4f8b\u5316\u5f00\u59cb\u770b ser = UserInfoSer(instance=users, many=True) \u5b9e\u4f8b\u5316\u7684\u65f6\u5019\u4f1a\u4f18\u5148\u6307\u5b9a\u7684\u4e24\u4e2a\u65b9\u6cd5\u4e00\u4e2a\u662f __new__ \u53e6\u5916\u4e00\u4e2a\u5c31\u662f\u6784\u9020\u65b9\u6cd5 __init__ \u3002\u4f46\u662f\u6211\u4eec\u5728Serializer\u4e2d\u5e76\u6ca1\u6709\u53d1\u73b0\uff0c\u6240\u4ee5\u5230\u5b83\u96c6\u6210\u7684\u7236\u7c7bBaseSerializer\u4e2d\u53bb\u627e\u3002 def __init__(self, instance=None, data=empty, **kwargs): # \u8fd9\u4e2a\u5c31\u662f\u6211\u4eec\u4f20\u9012\u7684instance\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\uff0c\u4e5f\u53ef\u80fd\u662f\u591a\u4e2a\u3002 self.instance = instance if data is not empty: self.initial_data = data self.partial = kwargs.pop('partial', False) self._context = kwargs.pop('context', {}) kwargs.pop('many', None) super(BaseSerializer, self).__init__(**kwargs) def __new__(cls, *args, **kwargs): # \u91cd\u5199\u8fd9\u4e2a\u7c7b\u6765\u81ea\u52a8\u6784\u5efaListSerializer\u7c7b\u4ee3\u66ff\uff0c\u5f53\u8bbe\u7f6e\u4e86many=True\u65f6\u5019 # \u6211\u4eec\u4f1a\u53bb\u628amany\u8fd9\u4e2a\u9009\u9879pop\u51fa\u6765\uff0c\u5982\u679c\u6ca1\u6709\u90a3\u5c31\u662fFalse\uff0c\u4e0d\u8d70\u8fd9\u91cc\u7684\u6761\u4ef6 # \u76f4\u63a5\u53bb\u8c03\u7528\u7236\u7c7b\u7684__new__\u65b9\u6cd5. if kwargs.pop('many', False): # \u5982\u679c\u8bf4\u6709many\uff0c\u90a3\u4e48\u8c03\u7528\u7c7b\u65b9\u6cd5many_init return cls.many_init(*args, **kwargs) return super(BaseSerializer, cls).__new__(cls, *args, **kwargs) \u5728Serializer\uff0c\u5982\u679c\u6ca1\u6709\u7ed9meta\u8bbe\u7f6elist_serializer_class\u5c5e\u6027\uff0c\u90a3\u4e48list_serializer_class\u5c5e\u6027\u5c31\u662fListSerializer\uff0c\u6700\u540e\u8fd4\u56de\u7684\u4e5f\u5c31\u662fListSerializer\u7684\u5bf9\u8c61\uff0c\u63a5\u4e0b\u6765\u6267\u884cListSerializer\u5bf9\u8c61\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5426\u5219\u6267\u884cBaseSerializer\u91cc\u9762\u7684\u6784\u9020\u65b9\u6cd5\uff08\u5982\u679c\u6211\u4eec\u91cd\u5199\u4e86\u8fd9\u4e2a\u5c31\u4f1a\u8c03\u7528\u6211\u4eec\u81ea\u5df1\u7684\u6784\u9020\u65b9\u6cd5\uff09\u3002 @classmethod def many_init(cls, *args, **kwargs): This method implements the creation of a `ListSerializer` parent class when `many=True` is used. You can customize it if you need to control which keyword arguments are passed to the parent, and which are passed to the child. Note that we're over-cautious in passing most arguments to both parent and child classes in order to try to cover the general case. If you're overriding this method you'll probably want something much simpler, eg: @classmethod def many_init(cls, *args, **kwargs): kwargs['child'] = cls() return CustomListSerializer(*args, **kwargs) allow_empty = kwargs.pop('allow_empty', None) child_serializer = cls(*args, **kwargs) list_kwargs = { 'child': child_serializer, } if allow_empty is not None: list_kwargs['allow_empty'] = allow_empty list_kwargs.update({ key: value for key, value in kwargs.items() if key in LIST_SERIALIZER_KWARGS }) meta = getattr(cls, 'Meta', None) list_serializer_class = getattr(meta, 'list_serializer_class', ListSerializer) return list_serializer_class(*args, **list_kwargs) \u7136\u540e\u6211\u4eec\u8c03\u7528\u4e86\u8fd9\u4e2a\u8fd9\u4e2a\u5bf9\u8c61\u7684data\u5c5e\u6027\uff1a ret = json.dumps(ser.data, ensure_ascii=False) \u6765\u770b\u4e00\u4e0b\u8fd9\u4e2adata\u65b9\u6cd5\u7684\u5b9e\u73b0 @property def data(self): ret = super(Serializer, self).data return ReturnDict(ret, serializer=self) @property def data(self): if hasattr(self, 'initial_data') and not hasattr(self, '_validated_data'): msg = ( 'When a serializer is passed a `data` keyword argument you ' 'must call `.is_valid()` before attempting to access the ' 'serialized `.data` representation.\\n' 'You should either call `.is_valid()` first, ' 'or access `.initial_data` instead.' ) raise AssertionError(msg) if not hasattr(self, '_data'): if self.instance is not None and not getattr(self, '_errors', None): self._data = self.to_representation(self.instance) elif hasattr(self, '_validated_data') and not getattr(self, '_errors', None): self._data = self.to_representation(self.validated_data) else: self._data = self.get_initial() return self._data def to_representation(self, instance): raise NotImplementedError('`to_representation()` must be implemented.') # Serializer\u7c7b\u7684\u7c7b\u65b9\u6cd5 def to_representation(self, instance): Object instance - Dict of primitive datatypes. ret = OrderedDict() fields = self._readable_fields # fields\u5176\u5b9e\u5c31\u662f\u54b1\u4eec\u5b9a\u4e49\u7684\u8fd9\u4e9b\u5b57\u6bb5 for field in fields: try: # \u8c03\u7528\u5b57\u6bb5\u7684get_attribute\u65b9\u6cd5\uff0c\u5e76\u628ainstance\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u8fdb\u53bb\u3002 attribute = field.get_attribute(instance) except SkipField: continue # We skip `to_representation` for `None` values so that fields do # not have to explicitly deal with that case. # # For related fields with `use_pk_only_optimization` we need to # resolve the pk value. check_for_none = attribute.pk if isinstance(attribute, PKOnlyObject) else attribute if check_for_none is None: ret[field.field_name] = None else: ret[field.field_name] = field.to_representation(attribute) return ret \u627e\u4e00\u4e2aCharfield\u770b\u770b # from rest_framework.serializers import CharField\uff0c\u53d1\u73b0CharField\u4e2d\u5e76\u6ca1\u6709get_attribute\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u6240\u4ee5\u7ee7\u7eed\u627e\uff0c\u5b83\u7684\u7236\u7c7bField\u53d1\u73b0\u4e86\u8fd9\u4e2a\u65b9\u6cd5 def get_attribute(self, instance): Given the *outgoing* object instance, return the primitive value that should be used for this field. try: return get_attribute(instance, self.source_attrs) except (KeyError, AttributeError) as exc: if self.default is not empty: return self.get_default() if self.allow_null: return None if not self.required: raise SkipField() msg = ( 'Got {exc_type} when attempting to get a value for field ' '`{field}` on serializer `{serializer}`.\\nThe serializer ' 'field might be named incorrectly and not match ' 'any attribute or key on the `{instance}` instance.\\n' 'Original exception text was: {exc}.'.format( exc_type=type(exc).__name__, field=self.field_name, serializer=self.parent.__class__.__name__, instance=instance.__class__.__name__, exc=exc ) ) raise type(exc)(msg) # source if self.source == '*': self.source_attrs = [] else: # \u6bd4\u5982group.title\uff0c\u5206\u9694\u540e\u5c31\u662fgroup\uff0ctitle self.source_attrs = self.source.split('.') def get_attribute(instance, attrs): Similar to Python's built in `getattr(instance, attr)`, but takes a list of nested attributes, instead of a single attribute. Also accepts either attribute lookup on objects or dictionary lookups. for attr in attrs: try: if isinstance(instance, collections.Mapping): instance = instance[attr] else: instance = getattr(instance, attr) except ObjectDoesNotExist: return None if is_simple_callable(instance): try: instance = instance() except (AttributeError, KeyError) as exc: # If we raised an Attribute or KeyError here it'd get treated # as an omitted field in `Field.get_attribute()`. Instead we # raise a ValueError to ensure the exception is not masked. raise ValueError('Exception raised in callable attribute {0} ; original exception was: {1}'.format(attr, exc)) return instance def is_simple_callable(obj): True if the object is a callable that takes no arguments. if not (inspect.isfunction(obj) or inspect.ismethod(obj) or isinstance(obj, functools.partial)): return False sig = inspect.signature(obj) params = sig.parameters.values() return all( param.kind == param.VAR_POSITIONAL or param.kind == param.VAR_KEYWORD or param.default != param.empty for param in params ) def isfunction(object): Return true if the object is a user-defined function. Function objects provide these attributes: __doc__ documentation string __name__ name with which this function was defined __code__ code object containing compiled function bytecode __defaults__ tuple of any default values for arguments __globals__ global namespace in which this function was defined __annotations__ dict of parameter annotations __kwdefaults__ dict of keyword only parameters with defaults # \u548ccallable\u662f\u7b49\u4ef7\u7684 return isinstance(object, types.FunctionType) def ismethod(object): Return true if the object is an instance method. Instance method objects provide these attributes: __doc__ documentation string __name__ name with which this method was defined __func__ function object containing implementation of method __self__ instance to which this method is bound return isinstance(object, types.MethodType)","title":"\u6e90\u7801\u6d41\u7a0b"},{"location":"django/07-DRF/06-DRF\u5e8f\u5217\u5316/#_4","text":"","title":"\u8bf7\u6c42\u6570\u636e\u6821\u9a8c"},{"location":"django/07-DRF/07-DRF\u5206\u9875/","text":"\u5206\u9875 \u7b80\u5355\u5206\u9875\uff1a\u770b\u7b2cn\u9875\uff0c\u6bcf\u9875\u663e\u793am\u6761\u6570\u636e \u6307\u5b9a\u5206\u9875\uff1a\u5728\u7b2cn\u4e2a\u4f4d\u7f6e\uff0c\u5411\u540e\u67e5\u770bn\u6761\u6570\u636e\u3002 \u52a0\u5bc6\u5206\u9875\uff1a\u53ea\u80fd\u770b\u4e0a\u4e00\u9875\u4e0b\u4e00\u9875 class GenericViewSet(ViewSetMixin, generics.GenericAPIView): The GenericViewSet class does not provide any actions by default, but does include the base set of generic view behavior, such as the `get_object` and `get_queryset` methods. pass","title":"\u5206\u9875"},{"location":"django/07-DRF/07-DRF\u5206\u9875/#_1","text":"\u7b80\u5355\u5206\u9875\uff1a\u770b\u7b2cn\u9875\uff0c\u6bcf\u9875\u663e\u793am\u6761\u6570\u636e \u6307\u5b9a\u5206\u9875\uff1a\u5728\u7b2cn\u4e2a\u4f4d\u7f6e\uff0c\u5411\u540e\u67e5\u770bn\u6761\u6570\u636e\u3002 \u52a0\u5bc6\u5206\u9875\uff1a\u53ea\u80fd\u770b\u4e0a\u4e00\u9875\u4e0b\u4e00\u9875 class GenericViewSet(ViewSetMixin, generics.GenericAPIView): The GenericViewSet class does not provide any actions by default, but does include the base set of generic view behavior, such as the `get_object` and `get_queryset` methods. pass","title":"\u5206\u9875"},{"location":"django/07-DRF/08-DRF\u89c6\u56fe/","text":"\u53ef\u4ee5\u5355\u72ec\u7ee7\u627fmixin\u4e2d\u7684create\uff0cretrieve\uff0cdestroy\u7b49\u7c7b\uff0c\u5982\u679c\u5199\u7684\u662f\u7279\u522b\u590d\u6742\u7684\u5c31\u4e0d\u63a8\u8350\u4f7f\u7528\u8fd9\u4e9b\u4e86\uff0c\u63a8\u8350\u4f7f\u7528APIVIEW\u6216\u8005\u4f7f\u7528ModelViewSet\uff0cModelViewSet\u6bd4\u8f83APIVIEW\u6709\u4e00\u4e2a\u597d\u5904\u5c31\u662f \u5982\u679c\u53ea\u60f3\u5b8c\u6210\u7b80\u5355\u7684CURD\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528ModelViewSet\uff0c\u5982\u679c\u8981\u5b8c\u6210\u590d\u6742\u7684\u903b\u8f91\uff0c\u5c31\u76f4\u63a5\u7528Generic\u6216\u8005\u76f4\u63a5\u4f7f\u7528APIView\u3002 has_object_permission Gerneric_api_view .API_VIEW.get_object,check_object_perssion Route \u6e32\u67d3\u5668 format=json/admin/form\uff0c\u4e3b\u8981\u5c31\u7528json\u8fd8\u6709\u4e00\u4e2abrowser\u7684\u3002 \u5141\u8bb8\u533f\u540d\u7528\u6237\u4e24\u5206\u949f\u8bbf\u95ee10\u6b21\uff0c\u6ce8\u518c\u7528\u6237\u4e24\u5206\u949f\u8bbf\u95ee20\u6b21\u3002CORS\u8de8\u57df","title":"08 DRF\u89c6\u56fe"},{"location":"django/07-DRF/08-DRF\u89c6\u56fe/#route","text":"","title":"Route"},{"location":"django/07-DRF/08-DRF\u89c6\u56fe/#_1","text":"format=json/admin/form\uff0c\u4e3b\u8981\u5c31\u7528json\u8fd8\u6709\u4e00\u4e2abrowser\u7684\u3002 \u5141\u8bb8\u533f\u540d\u7528\u6237\u4e24\u5206\u949f\u8bbf\u95ee10\u6b21\uff0c\u6ce8\u518c\u7528\u6237\u4e24\u5206\u949f\u8bbf\u95ee20\u6b21\u3002CORS\u8de8\u57df","title":"\u6e32\u67d3\u5668"}]}